
#######################################################################

#oryginal loop:

#schedule:
{ domain: "[TSTEPS, _PB_N] -> { S_0[t, i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_1[t, i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N }", child: { schedule: "[TSTEPS, _PB_N] -> L_0[{ S_0[t, i, j, k] -> [(t)]; S_1[t, i, j, k] -> [(t)] }]", child: { sequence: [ { filter: "[TSTEPS, _PB_N] -> { S_0[t, i, j, k] }", child: { schedule: "[TSTEPS, _PB_N] -> L_1[{ S_0[t, i, j, k] -> [(i)] }]", child: { schedule: "[TSTEPS, _PB_N] -> L_2[{ S_0[t, i, j, k] -> [(j)] }]", child: { schedule: "[TSTEPS, _PB_N] -> L_3[{ S_0[t, i, j, k] -> [(k)] }]" } } } }, { filter: "[TSTEPS, _PB_N] -> { S_1[t, i, j, k] }", child: { schedule: "[TSTEPS, _PB_N] -> L_4[{ S_1[t, i, j, k] -> [(i)] }]", child: { schedule: "[TSTEPS, _PB_N] -> L_5[{ S_1[t, i, j, k] -> [(j)] }]", child: { schedule: "[TSTEPS, _PB_N] -> L_6[{ S_1[t, i, j, k] -> [(k)] }]" } } } } ] } } }

#domain:
[TSTEPS, _PB_N] -> { S_0[t, i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_1[t, i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N }

#schedule map:
[TSTEPS, _PB_N] -> { S_0[t, i, j, k] -> [t, 0, i, j, k]; S_1[t, i, j, k] -> [t, 1, i, j, k] }

#isl schedule:
{ domain: "[TSTEPS, _PB_N] -> { S_0[t, i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_1[t, i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N }", child: { schedule: "[TSTEPS, _PB_N] -> [{ S_0[t, i, j, k] -> [(t)]; S_1[t, i, j, k] -> [(t)] }, { S_0[t, i, j, k] -> [(2t + i)]; S_1[t, i, j, k] -> [(1 + 2t + i)] }, { S_0[t, i, j, k] -> [(2t + j)]; S_1[t, i, j, k] -> [(1 + 2t + j)] }, { S_0[t, i, j, k] -> [(2t + k)]; S_1[t, i, j, k] -> [(1 + 2t + k)] }]", permutable: 1, coincident: [ 1, 1, 1, 1 ] } }

#isl schedule map:
[TSTEPS, _PB_N] -> { S_1[t, i, j, k] -> [t, 1 + 2t + i, 1 + 2t + j, 1 + 2t + k]; S_0[t, i, j, k] -> [t, 2t + i, 2t + j, 2t + k] }

#writes:
[TSTEPS, _PB_N] -> { S_1[t, i, j, k] -> A[i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_0[t, i, j, k] -> B[i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N }

#reads:
[TSTEPS, _PB_N] -> { S_1[t, i, j, k] -> B[i, j, 1 + k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_1[t, i, j, k] -> B[i, 1 + j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_1[t, i, j, k] -> B[1 + i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_1[t, i, j, k] -> B[i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_1[t, i, j, k] -> B[i, j, -1 + k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_1[t, i, j, k] -> B[-1 + i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_1[t, i, j, k] -> B[i, -1 + j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_0[t, i, j, k] -> A[i, j, 1 + k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_0[t, i, j, k] -> A[i, 1 + j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_0[t, i, j, k] -> A[1 + i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_0[t, i, j, k] -> A[i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_0[t, i, j, k] -> A[i, j, -1 + k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_0[t, i, j, k] -> A[-1 + i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N; S_0[t, i, j, k] -> A[i, -1 + j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N }

#dep_raw:
[TSTEPS, _PB_N] -> { S_1[t, i, j, k] -> S_0[t', i', j', k'] : t > 0 and i > 0 and j > 0 and k > 0 and t < t' <= TSTEPS and i <= i' <= -2 + _PB_N and j <= j' <= 1 + i + j - i' and j' <= -2 + _PB_N and k <= k' <= 1 + j + k - j' and k' <= 1 + i + k - i' and k' <= -2 + _PB_N; S_1[t, i, j, k] -> S_0[t', i', j', k' = -1 + i + j + k - i' - j'] : t > 0 and i <= -2 + _PB_N and j <= -2 + _PB_N and k <= -2 + _PB_N and t < t' <= TSTEPS and 0 < i' <= i and j' >= -1 + i + j - i' and 0 < j' <= j and j' <= -2 + i + j + k - i'; S_0[t, i, j, k] -> S_1[t', i', j', k'] : t > 0 and i > 0 and j > 0 and k > 0 and t <= t' <= TSTEPS and i <= i' <= -2 + _PB_N and j <= j' <= 1 + i + j - i' and j' <= -2 + _PB_N and k <= k' <= 1 + j + k - j' and k' <= 1 + i + k - i' and k' <= -2 + _PB_N; S_0[t, i, j, k] -> S_1[t', i', j', k' = -1 + i + j + k - i' - j'] : t > 0 and i <= -2 + _PB_N and j <= -2 + _PB_N and k <= -2 + _PB_N and t <= t' <= TSTEPS and 0 < i' <= i and j' >= -1 + i + j - i' and 0 < j' <= j and j' <= -2 + i + j + k - i' }

#dep_waw:
[TSTEPS, _PB_N] -> { S_0[t, i, j, k] -> S_0[t', i' = i, j' = j, k' = k] : t > 0 and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N and t < t' <= TSTEPS; S_1[t, i, j, k] -> S_1[t', i' = i, j' = j, k' = k] : t > 0 and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N and t < t' <= TSTEPS }

#dep_war:
[TSTEPS, _PB_N] -> { S_1[t, i, j, k] -> S_0[t', i', j', k'] : t > 0 and i > 0 and j > 0 and k > 0 and t < t' <= TSTEPS and i <= i' <= -2 + _PB_N and j <= j' <= 1 + i + j - i' and j' <= -2 + _PB_N and k <= k' <= 1 + j + k - j' and k' <= 1 + i + k - i' and k' <= -2 + _PB_N; S_1[t, i, j, k] -> S_0[t', i', j', k' = -1 + i + j + k - i' - j'] : t > 0 and i <= -2 + _PB_N and j <= -2 + _PB_N and k <= -2 + _PB_N and t < t' <= TSTEPS and 0 < i' <= i and j' >= -1 + i + j - i' and 0 < j' <= j and j' <= -2 + i + j + k - i'; S_0[t, i, j, k] -> S_1[t', i', j', k'] : t > 0 and i > 0 and j > 0 and k > 0 and t <= t' <= TSTEPS and i <= i' <= -2 + _PB_N and j <= j' <= 1 + i + j - i' and j' <= -2 + _PB_N and k <= k' <= 1 + j + k - j' and k' <= 1 + i + k - i' and k' <= -2 + _PB_N; S_0[t, i, j, k] -> S_1[t', i', j', k' = -1 + i + j + k - i' - j'] : t > 0 and i <= -2 + _PB_N and j <= -2 + _PB_N and k <= -2 + _PB_N and t <= t' <= TSTEPS and 0 < i' <= i and j' >= -1 + i + j - i' and 0 < j' <= j and j' <= -2 + i + j + k - i' }

#relations:
[TSTEPS, _PB_N] -> { S_0[t, i, j, k] -> S_0[t', i' = i, j' = j, k' = k] : t > 0 and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N and t < t' <= TSTEPS; S_1[t, i, j, k] -> S_1[t', i' = i, j' = j, k' = k] : t > 0 and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N and t < t' <= TSTEPS; S_1[t, i, j, k] -> S_0[t', i', j', k'] : t > 0 and i > 0 and j > 0 and k > 0 and t < t' <= TSTEPS and i <= i' <= -2 + _PB_N and j <= j' <= 1 + i + j - i' and j' <= -2 + _PB_N and k <= k' <= 1 + j + k - j' and k' <= 1 + i + k - i' and k' <= -2 + _PB_N; S_1[t, i, j, k] -> S_0[t', i', j', k' = -1 + i + j + k - i' - j'] : t > 0 and i <= -2 + _PB_N and j <= -2 + _PB_N and k <= -2 + _PB_N and t < t' <= TSTEPS and 0 < i' <= i and j' >= -1 + i + j - i' and 0 < j' <= j and j' <= -2 + i + j + k - i'; S_0[t, i, j, k] -> S_1[t', i', j', k'] : t > 0 and i > 0 and j > 0 and k > 0 and t <= t' <= TSTEPS and i <= i' <= -2 + _PB_N and j <= j' <= 1 + i + j - i' and j' <= -2 + _PB_N and k <= k' <= 1 + j + k - j' and k' <= 1 + i + k - i' and k' <= -2 + _PB_N; S_0[t, i, j, k] -> S_1[t', i', j', k' = -1 + i + j + k - i' - j'] : t > 0 and i <= -2 + _PB_N and j <= -2 + _PB_N and k <= -2 + _PB_N and t <= t' <= TSTEPS and 0 < i' <= i and j' >= -1 + i + j - i' and 0 < j' <= j and j' <= -2 + i + j + k - i' }

#delta:
{ [t, i, j, k] : t >= 0 and i >= 0 and 0 <= j <= 1 - i and 0 <= k <= 1 - i and k <= 1 - j; [t, i, j, k = -1 - i - j] : t >= 0 and i <= 0 and -1 - i <= j <= 0 }

#######################################################################

#######################################################################

#norm schedule map:
[TSTEPS, _PB_N] -> { S_0[t, i, j, k] -> [t, 0, i, j, k]; S_1[t, i, j, k] -> [t, 1, i, j, k] }

#######################################################################

#######################################################################

#normalized loop (0):

#mapper:
[TSTEPS, _PB_N] -> { S_0[t, i, j, k] -> S_0[i0 = t, i1 = 0, i2 = i, i3 = j, i4 = k]; S_1[t, i, j, k] -> S_1[i0 = t, i1 = 1, i2 = i, i3 = j, i4 = k] }

#domain:
[TSTEPS, _PB_N] -> { S_0[i0, i1 = 0, i2, i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_1[i0, i1 = 1, i2, i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N }

#schedule map:
[TSTEPS, _PB_N] -> { S_0[i0, i1 = 0, i2, i3, i4] -> [i0, 0, i2, i3, i4]; S_1[i0, i1 = 1, i2, i3, i4] -> [i0, 1, i2, i3, i4] }

#writes:
[TSTEPS, _PB_N] -> { S_0[i0, i1 = 0, i2, i3, i4] -> B[i2, i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_1[i0, i1 = 1, i2, i3, i4] -> A[i2, i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N }

#reads:
[TSTEPS, _PB_N] -> { S_0[i0, i1 = 0, i2, i3, i4] -> A[i2, i3, 1 + i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_0[i0, i1 = 0, i2, i3, i4] -> A[i2, 1 + i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_0[i0, i1 = 0, i2, i3, i4] -> A[1 + i2, i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_0[i0, i1 = 0, i2, i3, i4] -> A[i2, i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_0[i0, i1 = 0, i2, i3, i4] -> A[i2, i3, -1 + i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_0[i0, i1 = 0, i2, i3, i4] -> A[-1 + i2, i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_0[i0, i1 = 0, i2, i3, i4] -> A[i2, -1 + i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_1[i0, i1 = 1, i2, i3, i4] -> B[i2, i3, 1 + i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_1[i0, i1 = 1, i2, i3, i4] -> B[i2, 1 + i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_1[i0, i1 = 1, i2, i3, i4] -> B[1 + i2, i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_1[i0, i1 = 1, i2, i3, i4] -> B[i2, i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_1[i0, i1 = 1, i2, i3, i4] -> B[i2, i3, -1 + i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_1[i0, i1 = 1, i2, i3, i4] -> B[-1 + i2, i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N; S_1[i0, i1 = 1, i2, i3, i4] -> B[i2, -1 + i3, i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N }

#dep_raw:
[TSTEPS, _PB_N] -> { S_1[i0, i1 = 1, i2, i3, i4] -> S_0[i0', i1' = 0, i2', i3', i4'] : i0 > 0 and i2 > 0 and i3 > 0 and i4 > 0 and i0 < i0' <= TSTEPS and i2 <= i2' <= -2 + _PB_N and i3 <= i3' <= 1 + i2 + i3 - i2' and i3' <= -2 + _PB_N and i4 <= i4' <= 1 + i3 + i4 - i3' and i4' <= 1 + i2 + i4 - i2' and i4' <= -2 + _PB_N; S_1[i0, i1 = 1, i2, i3, i4] -> S_0[i0', i1' = 0, i2', i3', i4' = -1 + i2 + i3 + i4 - i2' - i3'] : i0 > 0 and i2 <= -2 + _PB_N and i3 <= -2 + _PB_N and i4 <= -2 + _PB_N and i0 < i0' <= TSTEPS and 0 < i2' <= i2 and i3' >= -1 + i2 + i3 - i2' and 0 < i3' <= i3 and i3' <= -2 + i2 + i3 + i4 - i2'; S_0[i0, i1 = 0, i2, i3, i4] -> S_1[i0', i1' = 1, i2', i3', i4'] : i0 > 0 and i2 > 0 and i3 > 0 and i4 > 0 and i0 <= i0' <= TSTEPS and i2 <= i2' <= -2 + _PB_N and i3 <= i3' <= 1 + i2 + i3 - i2' and i3' <= -2 + _PB_N and i4 <= i4' <= 1 + i3 + i4 - i3' and i4' <= 1 + i2 + i4 - i2' and i4' <= -2 + _PB_N; S_0[i0, i1 = 0, i2, i3, i4] -> S_1[i0', i1' = 1, i2', i3', i4' = -1 + i2 + i3 + i4 - i2' - i3'] : i0 > 0 and i2 <= -2 + _PB_N and i3 <= -2 + _PB_N and i4 <= -2 + _PB_N and i0 <= i0' <= TSTEPS and 0 < i2' <= i2 and i3' >= -1 + i2 + i3 - i2' and 0 < i3' <= i3 and i3' <= -2 + i2 + i3 + i4 - i2' }

#dep_waw:
[TSTEPS, _PB_N] -> { S_0[i0, i1 = 0, i2, i3, i4] -> S_0[i0', i1' = 0, i2' = i2, i3' = i3, i4' = i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N and i0' > i0 and 0 < i0' <= TSTEPS; S_1[i0, i1 = 1, i2, i3, i4] -> S_1[i0', i1' = 1, i2' = i2, i3' = i3, i4' = i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N and i0' > i0 and 0 < i0' <= TSTEPS }

#dep_war:
[TSTEPS, _PB_N] -> { S_1[i0, i1 = 1, i2, i3, i4] -> S_0[i0', i1' = 0, i2', i3', i4'] : i0 > 0 and i2 > 0 and i3 > 0 and i4 > 0 and i0 < i0' <= TSTEPS and i2 <= i2' <= -2 + _PB_N and i3 <= i3' <= 1 + i2 + i3 - i2' and i3' <= -2 + _PB_N and i4 <= i4' <= 1 + i3 + i4 - i3' and i4' <= 1 + i2 + i4 - i2' and i4' <= -2 + _PB_N; S_1[i0, i1 = 1, i2, i3, i4] -> S_0[i0', i1' = 0, i2', i3', i4' = -1 + i2 + i3 + i4 - i2' - i3'] : i0 > 0 and i2 <= -2 + _PB_N and i3 <= -2 + _PB_N and i4 <= -2 + _PB_N and i0 < i0' <= TSTEPS and 0 < i2' <= i2 and i3' >= -1 + i2 + i3 - i2' and 0 < i3' <= i3 and i3' <= -2 + i2 + i3 + i4 - i2'; S_0[i0, i1 = 0, i2, i3, i4] -> S_1[i0', i1' = 1, i2', i3', i4'] : i0 > 0 and i2 > 0 and i3 > 0 and i4 > 0 and i0 <= i0' <= TSTEPS and i2 <= i2' <= -2 + _PB_N and i3 <= i3' <= 1 + i2 + i3 - i2' and i3' <= -2 + _PB_N and i4 <= i4' <= 1 + i3 + i4 - i3' and i4' <= 1 + i2 + i4 - i2' and i4' <= -2 + _PB_N; S_0[i0, i1 = 0, i2, i3, i4] -> S_1[i0', i1' = 1, i2', i3', i4' = -1 + i2 + i3 + i4 - i2' - i3'] : i0 > 0 and i2 <= -2 + _PB_N and i3 <= -2 + _PB_N and i4 <= -2 + _PB_N and i0 <= i0' <= TSTEPS and 0 < i2' <= i2 and i3' >= -1 + i2 + i3 - i2' and 0 < i3' <= i3 and i3' <= -2 + i2 + i3 + i4 - i2' }

#relations:
[TSTEPS, _PB_N] -> { S_0[i0, i1 = 0, i2, i3, i4] -> S_0[i0', i1' = 0, i2' = i2, i3' = i3, i4' = i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N and i0' > i0 and 0 < i0' <= TSTEPS; S_0[i0, i1 = 0, i2, i3, i4] -> S_1[i0', i1' = 1, i2', i3', i4'] : i0 > 0 and i2 > 0 and i3 > 0 and i4 > 0 and i0 <= i0' <= TSTEPS and i2 <= i2' <= -2 + _PB_N and i3 <= i3' <= 1 + i2 + i3 - i2' and i3' <= -2 + _PB_N and i4 <= i4' <= 1 + i3 + i4 - i3' and i4' <= 1 + i2 + i4 - i2' and i4' <= -2 + _PB_N; S_0[i0, i1 = 0, i2, i3, i4] -> S_1[i0', i1' = 1, i2', i3', i4' = -1 + i2 + i3 + i4 - i2' - i3'] : i0 > 0 and i2 <= -2 + _PB_N and i3 <= -2 + _PB_N and i4 <= -2 + _PB_N and i0 <= i0' <= TSTEPS and 0 < i2' <= i2 and i3' >= -1 + i2 + i3 - i2' and 0 < i3' <= i3 and i3' <= -2 + i2 + i3 + i4 - i2'; S_1[i0, i1 = 1, i2, i3, i4] -> S_0[i0', i1' = 0, i2', i3', i4'] : i0 > 0 and i2 > 0 and i3 > 0 and i4 > 0 and i0 < i0' <= TSTEPS and i2 <= i2' <= -2 + _PB_N and i3 <= i3' <= 1 + i2 + i3 - i2' and i3' <= -2 + _PB_N and i4 <= i4' <= 1 + i3 + i4 - i3' and i4' <= 1 + i2 + i4 - i2' and i4' <= -2 + _PB_N; S_1[i0, i1 = 1, i2, i3, i4] -> S_0[i0', i1' = 0, i2', i3', i4' = -1 + i2 + i3 + i4 - i2' - i3'] : i0 > 0 and i2 <= -2 + _PB_N and i3 <= -2 + _PB_N and i4 <= -2 + _PB_N and i0 < i0' <= TSTEPS and 0 < i2' <= i2 and i3' >= -1 + i2 + i3 - i2' and 0 < i3' <= i3 and i3' <= -2 + i2 + i3 + i4 - i2'; S_1[i0, i1 = 1, i2, i3, i4] -> S_1[i0', i1' = 1, i2' = i2, i3' = i3, i4' = i4] : 0 < i0 <= TSTEPS and 0 < i2 <= -2 + _PB_N and 0 < i3 <= -2 + _PB_N and 0 < i4 <= -2 + _PB_N and i0' > i0 and 0 < i0' <= TSTEPS }

#delta:
{ [i0, i1, i2, i3, i4] : (i1 >= -1 and -2i0 < i1 <= 1 and i2 >= 0 and 0 <= i3 <= 1 - i2 and 0 <= i4 <= 1 - i2 and i4 <= 1 - i3) or (i2 <= 0 and i3 <= 0 and i4 >= -1 - i2 - i3 and -2i0 - i1 - i2 - i3 <= i4 <= -i1 - i2 - i3 and i4 <= 0 and i4 <= i1 - i2 - i3 and i4 < i0 - i2 - i3) }

#######################################################################

#######################################################################

#normalized loop (0):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 1, i1 = 1, i2 = 1, i3 = 0, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = 1, i2 = 0, i3 = 1, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = 1, i2 = 0, i3 = 0, i4 = 1] }

#distance vector set : { [i0 = 1, i1 = 1, i2 = 0, i3 = 0, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = 1, i2 = 0, i3 = 0, i4 = -1] }

#distance vector set : { [i0 = 1, i1 = 1, i2 = 0, i3 = -1, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = 1, i2 = -1, i3 = 0, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 1, i3 = 0, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0, i3 = 1, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0, i3 = 0, i4 = 1] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0, i3 = 0, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0, i3 = 0, i4 = -1] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0, i3 = -1, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = -1, i3 = 0, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = -1, i2 = 1, i3 = 0, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = -1, i2 = 0, i3 = 1, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = -1, i2 = 0, i3 = 0, i4 = 1] }

#distance vector set : { [i0 = 1, i1 = -1, i2 = 0, i3 = 0, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = -1, i2 = 0, i3 = 0, i4 = -1] }

#distance vector set : { [i0 = 1, i1 = -1, i2 = 0, i3 = -1, i4 = 0] }

#distance vector set : { [i0 = 1, i1 = -1, i2 = -1, i3 = 0, i4 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 1, i3 = 0, i4 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 1, i4 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = -1, i4 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -1, i3 = 0, i4 = 0] }

#delta:
{ [i0, i1, i2, i3, i4] : i1 >= -1 and -2i0 < i1 <= 1 and -1 + i2 <= i3 <= 1 - i2 and i3 <= 1 + i2 and i4 >= -1 + i2 and i4 >= -1 + i3 and -1 - i2 - i3 <= i4 <= 1 - i2 and i4 <= 1 - i3 and i4 <= 1 + i3 and i4 <= 1 + i2 }

#dim [i0]: is parameter, is positive

#dim [i1]: is order

#dim [i2]: is bounded

#dim [i3]: is bounded

#dim [i4]: is bounded

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  or a5 != 0  )  and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  or a5 != 0  )  and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  or a5 != 0  )  and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5] : false }

#hyperplane: { [a1, a2, a3, a4, a5] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  or a5 != 0  )  and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5] : false }

#hyperplane: { [a1, a2, a3, a4, a5] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  or a5 != 0  )  and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5] : false }

#hyperplane: { [a1, a2, a3, a4, a5] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a5 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  or a5 != 0  )  and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 1*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + -1*a4 + 0*a5 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + -1*a5 = 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5] : false }

#hyperplane: { [a1, a2, a3, a4, a5] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  or a5 != 0  )  and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 1, a2 = 0, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane: { [a1 = 1, a2 = 0, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  or a5 != 0  )  and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 } )

#result: { [d0 = 0, b0 = 4, c0 = -5, a1 = 2, a2 = 1, a3 = 1, a4 = 0, a5 = 0] }

#hyperplane: { [a1 = 2, a2 = 1, a3 = 1, a4 = 0, a5 = 0] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*2 = c1*1 and c2*1 = c1*0 and c2*1 = c1*0 and c2*0 = c1*0 and c2*0 = c1*0 } = {}

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  or a5 != 0  )  and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 } )

#result: { [d0 = 0, b0 = 4, c0 = -5, a1 = 2, a2 = 1, a3 = 0, a4 = 1, a5 = 0] }

#hyperplane: { [a1 = 2, a2 = 1, a3 = 0, a4 = 1, a5 = 0] }

#hyperplane check: { : exists c1, c2, c3 : ( c1!=0 or c2!=0 or c3!=0 ) and c3*2 = c1*1 + c2*2 and c3*1 = c1*0 + c2*1 and c3*0 = c1*0 + c2*1 and c3*1 = c1*0 + c2*0 and c3*0 = c1*0 + c2*0 } = {}

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a5 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  or a5 != 0  )  and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + -1*a4 + 0*a5 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 } )

#result: { [d0 = 0, b0 = 4, c0 = -5, a1 = 2, a2 = 1, a3 = 0, a4 = 0, a5 = 1] }

#hyperplane: { [a1 = 2, a2 = 1, a3 = 0, a4 = 0, a5 = 1] }

#hyperplane check: { : exists c1, c2, c3, c4 : ( c1!=0 or c2!=0 or c3!=0 or c4!=0 ) and c4*2 = c1*1 + c2*2 + c3*2 and c4*1 = c1*0 + c2*1 + c3*1 and c4*0 = c1*0 + c2*1 + c3*0 and c4*0 = c1*0 + c2*0 + c3*1 and c4*1 = c1*0 + c2*0 + c3*0 } = {}

#result: true

#create hyperplanes stop

#create spaces start

#part: [TSTEPS, _PB_N] -> { [i0, i1, i2, i3, i4] -> [  h0, h1, h2, h3, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : exists bh0 : 1 * i0 + 0 * i1 + 0 * i2 + 0 * i3 + 0 * i4 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#part: [TSTEPS, _PB_N] -> { [i0, i1, i2, i3, i4] -> [  h0, h1, h2, h3, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : exists bh1 : 2 * i0 + 1 * i1 + 1 * i2 + 0 * i3 + 0 * i4 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 } 

#part: [TSTEPS, _PB_N] -> { [i0, i1, i2, i3, i4] -> [  h0, h1, h2, h3, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : exists bh2 : 2 * i0 + 1 * i1 + 0 * i2 + 1 * i3 + 0 * i4 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1 } 

#part: [TSTEPS, _PB_N] -> { [i0, i1, i2, i3, i4] -> [  h0, h1, h2, h3, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : exists bh3 : 2 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 1 * i4 - bh3 = 0 and 16 * h3 <= bh3 <= 16 * (h3 + 1) - 1 } 

#spaces mapper: [TSTEPS, _PB_N] -> { [i0, i1, i2, i3, i4] -> [h0, h1, h2, h3, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : -15 + i0 <= 16h0 <= i0 and -15 + 2i0 + i1 + i2 <= 16h1 <= 2i0 + i1 + i2 and -15 + 2i0 + i1 + i3 <= 16h2 <= 2i0 + i1 + i3 and -15 + 2i0 + i1 + i4 <= 16h3 <= 2i0 + i1 + i4 }

#create spaces stop

#create tile scop start

#tile scop mapper: [TSTEPS, _PB_N] -> { S_1[i0, i1, i2, i3, i4] -> S_1[h0, h1, h2, h3, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : -15 + i0 <= 16h0 <= i0 and -15 + 2i0 + i1 + i2 <= 16h1 <= 2i0 + i1 + i2 and -15 + 2i0 + i1 + i3 <= 16h2 <= 2i0 + i1 + i3 and -15 + 2i0 + i1 + i4 <= 16h3 <= 2i0 + i1 + i4; S_0[i0, i1, i2, i3, i4] -> S_0[h0, h1, h2, h3, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : -15 + i0 <= 16h0 <= i0 and -15 + 2i0 + i1 + i2 <= 16h1 <= 2i0 + i1 + i2 and -15 + 2i0 + i1 + i3 <= 16h2 <= 2i0 + i1 + i3 and -15 + 2i0 + i1 + i4 <= 16h3 <= 2i0 + i1 + i4 }

#tile scop delta: { [h0, h1, h2, h3, ii0, ii1, ii2, ii3, ii4] : -15 + 16h0 <= ii0 <= 15 + 16h0 and ii2 >= -15 + 16h1 - 2ii0 - ii1 and ii3 >= -15 + 16h2 - 2ii0 - ii1 and ii4 >= -15 + 16h3 - 2ii0 - ii1 and ((ii1 >= -1 and -2ii0 < ii1 <= 1 and 0 <= ii2 <= 15 + 16h1 - 2ii0 - ii1 and 0 <= ii3 <= 1 - ii2 and ii3 <= 15 + 16h2 - 2ii0 - ii1 and 0 <= ii4 <= 1 - ii2 and ii4 <= 1 - ii3 and ii4 <= 15 + 16h3 - 2ii0 - ii1) or (-16 - 16h3 + 2ii0 + ii1 <= ii2 <= 0 and ii3 <= 0 and ii4 >= -1 - ii2 - ii3 and ii4 >= -17 - 16h3 + 2ii0 + ii1 - ii2 - 2ii3 and -16 - 16h2 + 2ii0 + ii1 - ii2 <= ii4 <= -ii1 - ii2 - ii3 and ii4 <= 0 and ii4 <= ii1 - ii2 - ii3 and ii4 <= -2 + 2ii0 + ii1 - ii2 - ii3 and ii4 <= 30 + 32h2 - 4ii0 - ii1 - ii2 - 3ii3 and ii4 <= 30 + 32h1 - 4ii0 - ii1 - 3ii2 - ii3 and 2ii4 >= -17 - 16h1 + 2ii0 + ii1 - ii2 - 2ii3 and 3ii4 <= 30 + 32h3 - 4ii0 - ii1 - ii2 - 3ii3)) }

#tile scop delta part: { [h0, h1, h2, h3, ii0, ii1, ii2, ii3, ii4] : -15 + 16h0 <= ii0 <= 15 + 16h0 and ii1 >= -1 and -2ii0 < ii1 <= 1 and ii2 >= -15 + 16h1 - 2ii0 - ii1 and 0 <= ii2 <= 15 + 16h1 - 2ii0 - ii1 and ii3 >= -15 + 16h2 - 2ii0 - ii1 and 0 <= ii3 <= 1 - ii2 and ii3 <= 15 + 16h2 - 2ii0 - ii1 and ii4 >= -15 + 16h3 - 2ii0 - ii1 and 0 <= ii4 <= 1 - ii2 and ii4 <= 1 - ii3 and ii4 <= 15 + 16h3 - 2ii0 - ii1 }

#tile scop delta part: { [h0, h1, h2, h3, ii0, ii1, ii2, ii3, ii4] : -15 + 16h0 <= ii0 <= 15 + 16h0 and ii2 >= -15 + 16h1 - 2ii0 - ii1 and -16 - 16h3 + 2ii0 + ii1 <= ii2 <= 0 and -15 + 16h2 - 2ii0 - ii1 <= ii3 <= 0 and ii4 >= -15 + 16h3 - 2ii0 - ii1 and ii4 >= -1 - ii2 - ii3 and ii4 >= -17 - 16h3 + 2ii0 + ii1 - ii2 - 2ii3 and -16 - 16h2 + 2ii0 + ii1 - ii2 <= ii4 <= -ii1 - ii2 - ii3 and ii4 <= 0 and ii4 <= ii1 - ii2 - ii3 and ii4 <= -2 + 2ii0 + ii1 - ii2 - ii3 and ii4 <= 30 + 32h2 - 4ii0 - ii1 - ii2 - 3ii3 and ii4 <= 30 + 32h1 - 4ii0 - ii1 - 3ii2 - ii3 and 2ii4 >= -17 - 16h1 + 2ii0 + ii1 - ii2 - 2ii3 and 3ii4 <= 30 + 32h3 - 4ii0 - ii1 - ii2 - 3ii3 }

#tile delta: { [h0, h1, h2, h3] : h0 >= 0 and h1 >= -2 + 2h0 and 0 <= h1 <= 2 + 2h0 and h2 >= -2 + 2h0 and h2 >= -1 + h1 and 0 <= h2 <= 1 + h1 and h2 <= 2 + 2h0 and h3 >= -2 + 2h0 and h3 >= -1 + h1 and h3 >= -1 + h2 and 0 < h3 <= 1 + h2 and h3 <= 1 + h1 and h3 <= 2 + 2h0; [h0, h1, h2 = 1, h3 = 0] : 0 <= h0 <= 1 and h1 >= -2 + 2h0 and 0 <= h1 <= 1 and h1 <= 2 + 2h0; [h0, h1 = 1, h2 = 0, h3 = 0] : 0 <= h0 <= 1; [h0 = 1, h1 = 0, h2 = 0, h3 = 0] }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 1, h1 = 4, h2 = 4, h3 = 4] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 4, h2 = 4, h3 = 3] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 4, h2 = 3, h3 = 4] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 4, h2 = 3, h3 = 3] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0, h2 = 1, h3 = 1] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0, h2 = 0, h3 = 1] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 2, h2 = 2, h3 = 2] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 2, h2 = 2, h3 = 1] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 2, h2 = 1, h3 = 2] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 2, h2 = 1, h3 = 1] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 1, h3 = 1] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 0, h3 = 1] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 1, h2 = 1, h3 = 0] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0, h2 = 1, h3 = 0] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 1, h2 = 1, h3 = 0] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 1, h3 = 0] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 1, h2 = 0, h3 = 0] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 1, h2 = 0, h3 = 0] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0, h2 = 0, h3 = 0] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, b2, b3, b4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and 1*a1 + 4*a2 + 4*a3 + 4*a4 > 0 and 1*a1 + 4*a2 + 3*a3 + 4*a4 > 0 and 1*a1 + 4*a2 + 4*a3 + 3*a4 > 0 and 1*a1 + 4*a2 + 3*a3 + 3*a4 > 0 and 0*a1 + 2*a2 + 2*a3 + 2*a4 > 0 and 0*a1 + 2*a2 + 1*a3 + 2*a4 > 0 and 0*a1 + 2*a2 + 2*a3 + 1*a4 > 0 and 0*a1 + 2*a2 + 1*a3 + 1*a4 > 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 > 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 > 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 > 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 > 0 and 1*a1 + 1*a2 + 1*a3 + 0*a4 > 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 > 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 > 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 > 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 > 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 > 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : exists c1, c2, c3, c4 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and c0 = c1 + c2 + c3 + c4 and a1 != 0 and a2 != 0 and a3 != 0 and a4 != 0} * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, b2, b3, b4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and 1*a1 + 4*a2 + 4*a3 + 4*a4 > 0 and 1*a1 + 4*a2 + 3*a3 + 4*a4 > 0 and 1*a1 + 4*a2 + 4*a3 + 3*a4 > 0 and 1*a1 + 4*a2 + 3*a3 + 3*a4 > 0 and 0*a1 + 2*a2 + 2*a3 + 2*a4 > 0 and 0*a1 + 2*a2 + 1*a3 + 2*a4 > 0 and 0*a1 + 2*a2 + 2*a3 + 1*a4 > 0 and 0*a1 + 2*a2 + 1*a3 + 1*a4 > 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 > 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 > 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 > 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 > 0 and 1*a1 + 1*a2 + 1*a3 + 0*a4 > 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 > 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 > 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 > 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 > 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 > 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 > 0 } )

#result: { [d0 = 0, b0 = 4, c0 = -4, a1 = 1, a2 = 1, a3 = 1, a4 = 1] }

#wafefront hyperplane: { [a1 = 1, a2 = 1, a3 = 1, a4 = 1] }

#calculate wafefront hyperplane stop

#create wafefront schedule start

#part: [TSTEPS, _PB_N] -> { S_0[i0, i1, i2, i3, i4] -> [0, w0, h0, h1, h2, h3, 0, tw0, i0, i1, i2, i3, i4] : exists  bw0, bh0, bh1, bh2, bh3 : 1 = 1 and 1 * i0 + 0 * i1 + 0 * i2 + 0 * i3 + 0 * i4 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 2 * i0 + 1 * i1 + 1 * i2 + 0 * i3 + 0 * i4 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 and 2 * i0 + 1 * i1 + 0 * i2 + 1 * i3 + 0 * i4 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1 and 2 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 1 * i4 - bh3 = 0 and 16 * h3 <= bh3 <= 16 * (h3 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 + 1 * bh2 + 1 * bh3 and w0 = 1 * h0 + 1 * h1 + 1 * h2 + 1 * h3 and tw0 = 0 } 

#part: [TSTEPS, _PB_N] -> { S_1[i0, i1, i2, i3, i4] -> [0, w0, h0, h1, h2, h3, 0, tw0, i0, i1, i2, i3, i4] : exists  bw0, bh0, bh1, bh2, bh3 : 1 = 1 and 1 * i0 + 0 * i1 + 0 * i2 + 0 * i3 + 0 * i4 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 2 * i0 + 1 * i1 + 1 * i2 + 0 * i3 + 0 * i4 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 and 2 * i0 + 1 * i1 + 0 * i2 + 1 * i3 + 0 * i4 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1 and 2 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 1 * i4 - bh3 = 0 and 16 * h3 <= bh3 <= 16 * (h3 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 + 1 * bh2 + 1 * bh3 and w0 = 1 * h0 + 1 * h1 + 1 * h2 + 1 * h3 and tw0 = 0 } 

#wafefront schedule: [TSTEPS, _PB_N] -> { S_0[i0, i1, i2, i3, i4] -> [0, w0, h0, h1, h2, h3 = w0 - h0 - h1 - h2, 0, tw0 = 0, i0, i1, i2, i3, i4] : -15 + i0 <= 16h0 <= i0 and -15 + 2i0 + i1 + i2 <= 16h1 <= 2i0 + i1 + i2 and 16h2 >= -15 + 2i0 + i1 + i3 and -2i0 - i1 - i4 + 16w0 - 16h0 - 16h1 <= 16h2 <= 15 - 2i0 - i1 - i4 + 16w0 - 16h0 - 16h1 and 16h2 <= 2i0 + i1 + i3; S_1[i0, i1, i2, i3, i4] -> [0, w0, h0, h1, h2, h3 = w0 - h0 - h1 - h2, 0, tw0 = 0, i0, i1, i2, i3, i4] : -15 + i0 <= 16h0 <= i0 and -15 + 2i0 + i1 + i2 <= 16h1 <= 2i0 + i1 + i2 and 16h2 >= -15 + 2i0 + i1 + i3 and -2i0 - i1 - i4 + 16w0 - 16h0 - 16h1 <= 16h2 <= 15 - 2i0 - i1 - i4 + 16w0 - 16h0 - 16h1 and 16h2 <= 2i0 + i1 + i3 }

#create wafefront schedule stop

#create code start

#wafefront code: [TSTEPS, _PB_N] -> { S_1[t, i, j, k] -> [0, w0, h0, h1, h2, h3 = w0 - h0 - h1 - h2, 0, tw0 = 0, t, 1, i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N and -15 + t <= 16h0 <= t and -14 + 2t + i <= 16h1 <= 1 + 2t + i and 16h2 >= -14 + 2t + j and -1 - 2t - k + 16w0 - 16h0 - 16h1 <= 16h2 <= 14 - 2t - k + 16w0 - 16h0 - 16h1 and 16h2 <= 1 + 2t + j; S_0[t, i, j, k] -> [0, w0, h0, h1, h2, h3 = w0 - h0 - h1 - h2, 0, tw0 = 0, t, 0, i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N and -15 + t <= 16h0 <= t and -15 + 2t + i <= 16h1 <= 2t + i and 16h2 >= -15 + 2t + j and -2t - k + 16w0 - 16h0 - 16h1 <= 16h2 <= 15 - 2t - k + 16w0 - 16h0 - 16h1 and 16h2 <= 2t + j }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#global schedule:
[TSTEPS, _PB_N] -> { S_1[t, i, j, k] -> [0, w0, h0, h1, h2, h3 = w0 - h0 - h1 - h2, 0, tw0 = 0, t, 1, i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N and -15 + t <= 16h0 <= t and -14 + 2t + i <= 16h1 <= 1 + 2t + i and 16h2 >= -14 + 2t + j and -1 - 2t - k + 16w0 - 16h0 - 16h1 <= 16h2 <= 14 - 2t - k + 16w0 - 16h0 - 16h1 and 16h2 <= 1 + 2t + j; S_0[t, i, j, k] -> [0, w0, h0, h1, h2, h3 = w0 - h0 - h1 - h2, 0, tw0 = 0, t, 0, i, j, k] : 0 < t <= TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and 0 < k <= -2 + _PB_N and -15 + t <= 16h0 <= t and -15 + 2t + i <= 16h1 <= 2t + i and 16h2 >= -15 + 2t + j and -2t - k + 16w0 - 16h0 - 16h1 <= 16h2 <= 15 - 2t - k + 16w0 - 16h0 - 16h1 and 16h2 <= 2t + j }

#######################################################################

#######################################################################

#Does global schedule respects oryginal loop RaW deps? -> True

#Does global schedule respects oryginal loop WaW deps? -> True

#Does global schedule respects oryginal loop WaR deps? -> True

#######################################################################
