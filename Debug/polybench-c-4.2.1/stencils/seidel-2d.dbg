
#######################################################################

#oryginal loop:

#schedule:
{ domain: "[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N }", child: { schedule: "[_PB_TSTEPS, _PB_N] -> L_0[{ S_0[t, i, j] -> [(t)] }]", child: { schedule: "[_PB_TSTEPS, _PB_N] -> L_1[{ S_0[t, i, j] -> [(i)] }]", child: { schedule: "[_PB_TSTEPS, _PB_N] -> L_2[{ S_0[t, i, j] -> [(j)] }]" } } } }

#domain:
[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N }

#schedule map:
[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] -> [t, i, j] }

#isl schedule:
{ domain: "[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N }", child: { schedule: "[_PB_TSTEPS, _PB_N] -> [{ S_0[t, i, j] -> [(t)] }, { S_0[t, i, j] -> [(t + i)] }, { S_0[t, i, j] -> [(2t + i + j)] }]", permutable: 1, coincident: [ 1, 1, 1 ] } }

#isl schedule map:
[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] -> [t, t + i, 2t + i + j] }

#writes:
[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] -> A[i, j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N }

#reads:
[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] -> A[1 + i, 1 + j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N; S_0[t, i, j] -> A[i, 1 + j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N; S_0[t, i, j] -> A[-1 + i, 1 + j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N; S_0[t, i, j] -> A[1 + i, j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N; S_0[t, i, j] -> A[i, j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N; S_0[t, i, j] -> A[-1 + i, j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N; S_0[t, i, j] -> A[1 + i, -1 + j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N; S_0[t, i, j] -> A[i, -1 + j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N; S_0[t, i, j] -> A[-1 + i, -1 + j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N }

#dep_raw:
[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] -> S_0[t', i', j'] : t >= 0 and i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and t < t' < _PB_TSTEPS and i' >= -1 + i and 0 < i' <= i and j' >= -1 + j and 0 < j' <= i + j - i' and j' <= -2 + _PB_N; S_0[t, i, j] -> S_0[t', i' = 1 + i, j'] : t >= 0 and 0 < i <= -3 + _PB_N and j <= -2 + _PB_N and t <= t' < _PB_TSTEPS and j' >= -1 + j and 0 < j' <= j; S_0[t, i, j] -> S_0[t', i', j' = 1 + j] : t >= 0 and i > 0 and 0 < j <= -3 + _PB_N and t <= t' < _PB_TSTEPS and i <= i' <= 1 + i and i' <= -2 + _PB_N }

#dep_waw:
[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] -> S_0[t', i' = i, j' = j] : t >= 0 and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and t < t' < _PB_TSTEPS }

#dep_war:
[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] -> S_0[t', i', j'] : t >= 0 and i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and t < t' < _PB_TSTEPS and i' >= -1 + i and 0 < i' <= i and j' >= -1 + j and 0 < j' <= i + j - i' and j' <= -2 + _PB_N; S_0[t, i, j] -> S_0[t', i' = 1 + i, j'] : t >= 0 and 0 < i <= -3 + _PB_N and j <= -2 + _PB_N and t <= t' < _PB_TSTEPS and j' >= -1 + j and 0 < j' <= j; S_0[t, i, j] -> S_0[t', i', j' = 1 + j] : t >= 0 and i > 0 and 0 < j <= -3 + _PB_N and t <= t' < _PB_TSTEPS and i <= i' <= 1 + i and i' <= -2 + _PB_N }

#relations:
[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] -> S_0[t', i', j'] : t >= 0 and j > 0 and t' < _PB_TSTEPS and i' >= -1 + i and j' <= -2 + _PB_N and ((i > 0 and i <= i' <= -2 + _PB_N and j' > t + j - t' and -i + j + i' <= j' <= 1 + j) or (i <= -2 + _PB_N and j <= -2 + _PB_N and t' > t and 0 < i' <= i and j' >= -1 + j and 0 < j' <= i + j - i')); S_0[t, i, j] -> S_0[t', i' = 1 + i, j'] : t >= 0 and 0 < i <= -3 + _PB_N and j <= -2 + _PB_N and t <= t' < _PB_TSTEPS and j' >= -1 + j and 0 < j' <= j }

#delta:
{ [t, i, j] : i >= -1 and ((t > 0 and i <= 0 and -1 <= j <= -i) or (i >= 0 and j >= i and -t < j <= 1)); [t, i = 1, j] : t >= 0 and -1 <= j <= 0 }

#######################################################################

#######################################################################

#norm schedule map:
[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] -> [t, i, j] }

#######################################################################

#######################################################################

#normalized loop (0):

#mapper:
[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] -> S_0[i0 = t, i1 = i, i2 = j] }

#domain:
[_PB_TSTEPS, _PB_N] -> { S_0[i0, i1, i2] : 0 <= i0 < _PB_TSTEPS and 0 < i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N }

#schedule map:
[_PB_TSTEPS, _PB_N] -> { S_0[i0, i1, i2] -> [i0, i1, i2] }

#writes:
[_PB_TSTEPS, _PB_N] -> { S_0[i0, i1, i2] -> A[i1, i2] : 0 <= i0 < _PB_TSTEPS and 0 < i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N }

#reads:
[_PB_TSTEPS, _PB_N] -> { S_0[i0, i1, i2] -> A[1 + i1, 1 + i2] : 0 <= i0 < _PB_TSTEPS and 0 < i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N; S_0[i0, i1, i2] -> A[i1, 1 + i2] : 0 <= i0 < _PB_TSTEPS and 0 < i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N; S_0[i0, i1, i2] -> A[-1 + i1, 1 + i2] : 0 <= i0 < _PB_TSTEPS and 0 < i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N; S_0[i0, i1, i2] -> A[1 + i1, i2] : 0 <= i0 < _PB_TSTEPS and 0 < i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N; S_0[i0, i1, i2] -> A[i1, i2] : 0 <= i0 < _PB_TSTEPS and 0 < i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N; S_0[i0, i1, i2] -> A[-1 + i1, i2] : 0 <= i0 < _PB_TSTEPS and 0 < i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N; S_0[i0, i1, i2] -> A[1 + i1, -1 + i2] : 0 <= i0 < _PB_TSTEPS and 0 < i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N; S_0[i0, i1, i2] -> A[i1, -1 + i2] : 0 <= i0 < _PB_TSTEPS and 0 < i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N; S_0[i0, i1, i2] -> A[-1 + i1, -1 + i2] : 0 <= i0 < _PB_TSTEPS and 0 < i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N }

#dep_raw:
[_PB_TSTEPS, _PB_N] -> { S_0[i0, i1, i2] -> S_0[i0', i1', i2'] : i0 >= 0 and i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N and i0 < i0' < _PB_TSTEPS and i1' >= -1 + i1 and 0 < i1' <= i1 and i2' >= -1 + i2 and 0 < i2' <= i1 + i2 - i1' and i2' <= -2 + _PB_N; S_0[i0, i1, i2] -> S_0[i0', i1' = 1 + i1, i2'] : i0 >= 0 and 0 < i1 <= -3 + _PB_N and i2 <= -2 + _PB_N and i0 <= i0' < _PB_TSTEPS and i2' >= -1 + i2 and 0 < i2' <= i2; S_0[i0, i1, i2] -> S_0[i0', i1', i2' = 1 + i2] : i0 >= 0 and i1 > 0 and 0 < i2 <= -3 + _PB_N and i0 <= i0' < _PB_TSTEPS and i1 <= i1' <= 1 + i1 and i1' <= -2 + _PB_N }

#dep_waw:
[_PB_TSTEPS, _PB_N] -> { S_0[i0, i1, i2] -> S_0[i0', i1' = i1, i2' = i2] : i0 >= 0 and 0 < i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N and i0 < i0' < _PB_TSTEPS }

#dep_war:
[_PB_TSTEPS, _PB_N] -> { S_0[i0, i1, i2] -> S_0[i0', i1', i2'] : i0 >= 0 and i1 <= -2 + _PB_N and 0 < i2 <= -2 + _PB_N and i0 < i0' < _PB_TSTEPS and i1' >= -1 + i1 and 0 < i1' <= i1 and i2' >= -1 + i2 and 0 < i2' <= i1 + i2 - i1' and i2' <= -2 + _PB_N; S_0[i0, i1, i2] -> S_0[i0', i1' = 1 + i1, i2'] : i0 >= 0 and 0 < i1 <= -3 + _PB_N and i2 <= -2 + _PB_N and i0 <= i0' < _PB_TSTEPS and i2' >= -1 + i2 and 0 < i2' <= i2; S_0[i0, i1, i2] -> S_0[i0', i1', i2' = 1 + i2] : i0 >= 0 and i1 > 0 and 0 < i2 <= -3 + _PB_N and i0 <= i0' < _PB_TSTEPS and i1 <= i1' <= 1 + i1 and i1' <= -2 + _PB_N }

#relations:
[_PB_TSTEPS, _PB_N] -> { S_0[i0, i1, i2] -> S_0[i0', i1', i2'] : i0 >= 0 and i2 > 0 and i0' < _PB_TSTEPS and i1' >= -1 + i1 and i2' <= -2 + _PB_N and ((i1 <= -2 + _PB_N and i2 <= -2 + _PB_N and i0' > i0 and 0 < i1' <= i1 and i2' >= -1 + i2 and 0 < i2' <= i1 + i2 - i1') or (i1 > 0 and i1 <= i1' <= -2 + _PB_N and i2' > i0 + i2 - i0' and -i1 + i2 + i1' <= i2' <= 1 + i2)); S_0[i0, i1, i2] -> S_0[i0', i1' = 1 + i1, i2'] : i0 >= 0 and 0 < i1 <= -3 + _PB_N and i2 <= -2 + _PB_N and i0 <= i0' < _PB_TSTEPS and i2' >= -1 + i2 and 0 < i2' <= i2 }

#delta:
{ [i0, i1, i2] : i1 >= -1 and ((i0 > 0 and i1 <= 0 and -1 <= i2 <= -i1) or (i1 >= 0 and i2 >= i1 and -i0 < i2 <= 1)); [i0, i1 = 1, i2] : i0 >= 0 and -1 <= i2 <= 0 }

#######################################################################

#######################################################################

#normalized loop (0):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 1, i1 = 1, i2 = 1] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 1] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1] }

#distance vector set : { [i0 = 2, i1 = 0, i2 = 0] }

#distance vector set : { [i0 = 2, i1 = 0, i2 = -1] }

#distance vector set : { [i0 = 2, i1 = -1, i2 = 1] }

#distance vector set : { [i0 = 2, i1 = -1, i2 = 0] }

#distance vector set : { [i0 = 2, i1 = -1, i2 = -1] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = -1] }

#distance vector set : { [i0 = 1, i1 = -1, i2 = 1] }

#distance vector set : { [i0 = 1, i1 = -1, i2 = 0] }

#distance vector set : { [i0 = 1, i1 = -1, i2 = -1] }

#distance vector set : { [i0 = 1, i1 = 1, i2 = 0] }

#distance vector set : { [i0 = 1, i1 = 1, i2 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -1] }

#delta:
{ [i0, i1, i2] : i1 >= -1 and ((i1 >= 0 and i2 >= i1 and -i0 < i2 <= 1) or (i0 > 0 and i1 <= 0 and -1 <= i2 <= -i1)); [i0, i1 = 1, i2] : i0 >= 0 and -1 <= i2 <= 0 }

#dim [i0]: is parameter, is positive

#dim [i1]: is bounded

#dim [i2]: is bounded

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 1*a1 + 1*a2 + 1*a3 >= 0 and 0*a1 + 1*a2 + 1*a3 >= 0 and 1*a1 + 0*a2 + 1*a3 >= 0 and 0*a1 + 0*a2 + 1*a3 >= 0 and 2*a1 + -1*a2 + 1*a3 >= 0 and 1*a1 + -1*a2 + 1*a3 >= 0 and 1*a1 + 1*a2 + 0*a3 >= 0 and 0*a1 + 1*a2 + 0*a3 >= 0 and 2*a1 + 0*a2 + 0*a3 >= 0 and 1*a1 + 0*a2 + 0*a3 >= 0 and 2*a1 + -1*a2 + 0*a3 >= 0 and 1*a1 + -1*a2 + 0*a3 >= 0 and 1*a1 + 1*a2 + -1*a3 >= 0 and 2*a1 + 0*a2 + -1*a3 >= 0 and 1*a1 + 0*a2 + -1*a3 >= 0 and 2*a1 + -1*a2 + -1*a3 >= 0 and 1*a1 + -1*a2 + -1*a3 >= 0 and 0*a1 + 1*a2 + -1*a3 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 1*a1 + 1*a2 + 1*a3 = 0 and 0*a1 + 1*a2 + 1*a3 = 0 and 1*a1 + 0*a2 + 1*a3 = 0 and 0*a1 + 0*a2 + 1*a3 = 0 and 2*a1 + -1*a2 + 1*a3 = 0 and 1*a1 + -1*a2 + 1*a3 = 0 and 1*a1 + 1*a2 + 0*a3 = 0 and 0*a1 + 1*a2 + 0*a3 = 0 and 2*a1 + 0*a2 + 0*a3 = 0 and 1*a1 + 0*a2 + 0*a3 = 0 and 2*a1 + -1*a2 + 0*a3 = 0 and 1*a1 + -1*a2 + 0*a3 = 0 and 1*a1 + 1*a2 + -1*a3 = 0 and 2*a1 + 0*a2 + -1*a3 = 0 and 1*a1 + 0*a2 + -1*a3 = 0 and 2*a1 + -1*a2 + -1*a3 = 0 and 1*a1 + -1*a2 + -1*a3 = 0 and 0*a1 + 1*a2 + -1*a3 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 1*a1 + 1*a2 + 1*a3 = 0 and 0*a1 + 1*a2 + 1*a3 = 0 and 1*a1 + 0*a2 + 1*a3 = 0 and 0*a1 + 0*a2 + 1*a3 = 0 and 2*a1 + -1*a2 + 1*a3 = 0 and 1*a1 + -1*a2 + 1*a3 = 0 and 1*a1 + 1*a2 + 0*a3 = 0 and 0*a1 + 1*a2 + 0*a3 = 0 and 2*a1 + 0*a2 + 0*a3 = 0 and 1*a1 + 0*a2 + 0*a3 = 0 and 2*a1 + -1*a2 + 0*a3 = 0 and 1*a1 + -1*a2 + 0*a3 = 0 and 1*a1 + 1*a2 + -1*a3 = 0 and 2*a1 + 0*a2 + -1*a3 = 0 and 1*a1 + 0*a2 + -1*a3 = 0 and 2*a1 + -1*a2 + -1*a3 = 0 and 1*a1 + -1*a2 + -1*a3 = 0 and 0*a1 + 1*a2 + -1*a3 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3] : false }

#hyperplane: { [a1, a2, a3] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 1*a1 + 1*a2 + 1*a3 = 0 and 0*a1 + 1*a2 + 1*a3 = 0 and 1*a1 + 0*a2 + 1*a3 = 0 and 0*a1 + 0*a2 + 1*a3 = 0 and 2*a1 + -1*a2 + 1*a3 = 0 and 1*a1 + -1*a2 + 1*a3 = 0 and 1*a1 + 1*a2 + 0*a3 = 0 and 0*a1 + 1*a2 + 0*a3 = 0 and 2*a1 + 0*a2 + 0*a3 = 0 and 1*a1 + 0*a2 + 0*a3 = 0 and 2*a1 + -1*a2 + 0*a3 = 0 and 1*a1 + -1*a2 + 0*a3 = 0 and 1*a1 + 1*a2 + -1*a3 = 0 and 2*a1 + 0*a2 + -1*a3 = 0 and 1*a1 + 0*a2 + -1*a3 = 0 and 2*a1 + -1*a2 + -1*a3 = 0 and 1*a1 + -1*a2 + -1*a3 = 0 and 0*a1 + 1*a2 + -1*a3 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3] : false }

#hyperplane: { [a1, a2, a3] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 1*a1 + 1*a2 + 1*a3 = 0 and 0*a1 + 1*a2 + 1*a3 = 0 and 1*a1 + 0*a2 + 1*a3 = 0 and 0*a1 + 0*a2 + 1*a3 = 0 and 2*a1 + -1*a2 + 1*a3 = 0 and 1*a1 + -1*a2 + 1*a3 = 0 and 1*a1 + 1*a2 + 0*a3 = 0 and 0*a1 + 1*a2 + 0*a3 = 0 and 2*a1 + 0*a2 + 0*a3 = 0 and 1*a1 + 0*a2 + 0*a3 = 0 and 2*a1 + -1*a2 + 0*a3 = 0 and 1*a1 + -1*a2 + 0*a3 = 0 and 1*a1 + 1*a2 + -1*a3 = 0 and 2*a1 + 0*a2 + -1*a3 = 0 and 1*a1 + 0*a2 + -1*a3 = 0 and 2*a1 + -1*a2 + -1*a3 = 0 and 1*a1 + -1*a2 + -1*a3 = 0 and 0*a1 + 1*a2 + -1*a3 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3] : false }

#hyperplane: { [a1, a2, a3] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 1*a1 + 1*a2 + 1*a3 >= 0 and 0*a1 + 1*a2 + 1*a3 >= 0 and 1*a1 + 0*a2 + 1*a3 >= 0 and 0*a1 + 0*a2 + 1*a3 >= 0 and 2*a1 + -1*a2 + 1*a3 >= 0 and 1*a1 + -1*a2 + 1*a3 >= 0 and 1*a1 + 1*a2 + 0*a3 >= 0 and 0*a1 + 1*a2 + 0*a3 >= 0 and 2*a1 + 0*a2 + 0*a3 >= 0 and 1*a1 + 0*a2 + 0*a3 >= 0 and 2*a1 + -1*a2 + 0*a3 >= 0 and 1*a1 + -1*a2 + 0*a3 >= 0 and 1*a1 + 1*a2 + -1*a3 >= 0 and 2*a1 + 0*a2 + -1*a3 >= 0 and 1*a1 + 0*a2 + -1*a3 >= 0 and 2*a1 + -1*a2 + -1*a3 >= 0 and 1*a1 + -1*a2 + -1*a3 >= 0 and 0*a1 + 1*a2 + -1*a3 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -3, a1 = 1, a2 = 0, a3 = 0] }

#hyperplane: { [a1 = 1, a2 = 0, a3 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 1*a1 + 1*a2 + 1*a3 >= 0 and 0*a1 + 1*a2 + 1*a3 >= 0 and 1*a1 + 0*a2 + 1*a3 >= 0 and 0*a1 + 0*a2 + 1*a3 >= 0 and 2*a1 + -1*a2 + 1*a3 >= 0 and 1*a1 + -1*a2 + 1*a3 >= 0 and 1*a1 + 1*a2 + 0*a3 >= 0 and 0*a1 + 1*a2 + 0*a3 >= 0 and 2*a1 + 0*a2 + 0*a3 >= 0 and 1*a1 + 0*a2 + 0*a3 >= 0 and 2*a1 + -1*a2 + 0*a3 >= 0 and 1*a1 + -1*a2 + 0*a3 >= 0 and 1*a1 + 1*a2 + -1*a3 >= 0 and 2*a1 + 0*a2 + -1*a3 >= 0 and 1*a1 + 0*a2 + -1*a3 >= 0 and 2*a1 + -1*a2 + -1*a3 >= 0 and 1*a1 + -1*a2 + -1*a3 >= 0 and 0*a1 + 1*a2 + -1*a3 >= 0 } )

#result: { [d0 = 0, b0 = 2, c0 = -3, a1 = 1, a2 = 1, a3 = 0] }

#hyperplane: { [a1 = 1, a2 = 1, a3 = 0] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*1 = c1*1 and c2*1 = c1*0 and c2*0 = c1*0 } = {}

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 1*a1 + 1*a2 + 1*a3 >= 0 and 0*a1 + 1*a2 + 1*a3 >= 0 and 1*a1 + 0*a2 + 1*a3 >= 0 and 0*a1 + 0*a2 + 1*a3 >= 0 and 2*a1 + -1*a2 + 1*a3 >= 0 and 1*a1 + -1*a2 + 1*a3 >= 0 and 1*a1 + 1*a2 + 0*a3 >= 0 and 0*a1 + 1*a2 + 0*a3 >= 0 and 2*a1 + 0*a2 + 0*a3 >= 0 and 1*a1 + 0*a2 + 0*a3 >= 0 and 2*a1 + -1*a2 + 0*a3 >= 0 and 1*a1 + -1*a2 + 0*a3 >= 0 and 1*a1 + 1*a2 + -1*a3 >= 0 and 2*a1 + 0*a2 + -1*a3 >= 0 and 1*a1 + 0*a2 + -1*a3 >= 0 and 2*a1 + -1*a2 + -1*a3 >= 0 and 1*a1 + -1*a2 + -1*a3 >= 0 and 0*a1 + 1*a2 + -1*a3 >= 0 } )

#result: { [d0 = 0, b0 = 4, c0 = -3, a1 = 2, a2 = 1, a3 = 1] }

#hyperplane: { [a1 = 2, a2 = 1, a3 = 1] }

#hyperplane check: { : exists c1, c2, c3 : ( c1!=0 or c2!=0 or c3!=0 ) and c3*2 = c1*1 + c2*1 and c3*1 = c1*0 + c2*1 and c3*1 = c1*0 + c2*0 } = {}

#result: true

#create hyperplanes stop

#create spaces start

#part: [_PB_TSTEPS, _PB_N] -> { [i0, i1, i2] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2] : exists bh0 : 1 * i0 + 0 * i1 + 0 * i2 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#part: [_PB_TSTEPS, _PB_N] -> { [i0, i1, i2] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2] : exists bh1 : 1 * i0 + 1 * i1 + 0 * i2 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 } 

#part: [_PB_TSTEPS, _PB_N] -> { [i0, i1, i2] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2] : exists bh2 : 2 * i0 + 1 * i1 + 1 * i2 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1 } 

#spaces mapper: [_PB_TSTEPS, _PB_N] -> { [i0, i1, i2] -> [h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2] : -15 + i0 <= 16h0 <= i0 and -15 + i0 + i1 <= 16h1 <= i0 + i1 and -15 + 2i0 + i1 + i2 <= 16h2 <= 2i0 + i1 + i2 }

#create spaces stop

#create tile scop start

#tile scop mapper: [_PB_TSTEPS, _PB_N] -> { S_0[i0, i1, i2] -> S_0[h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2] : -15 + i0 <= 16h0 <= i0 and -15 + i0 + i1 <= 16h1 <= i0 + i1 and -15 + 2i0 + i1 + i2 <= 16h2 <= 2i0 + i1 + i2 }

#tile scop delta: { [h0, h1, h2, ii0, ii1, ii2] : -15 + 16h0 <= ii0 <= 15 + 16h0 and -15 + 16h1 - ii0 <= ii1 <= 15 + 16h1 - ii0 and ii2 >= -15 + 16h2 - 2ii0 - ii1 and ((ii1 <= 1 and ii2 >= -ii1 and -3ii0 - 2ii1 < ii2 <= 1 and ii2 <= 15 + 16h2 - 2ii0 - ii1) or (ii0 > 0 and -1 <= ii1 <= 16 + 16h2 - 2ii0 and -1 <= ii2 < -ii1 and ii2 <= 16 + 16h2 - 2ii0)) }

#tile scop delta part: { [h0, h1, h2, ii0, ii1, ii2] : -15 + 16h0 <= ii0 <= 15 + 16h0 and -15 + 16h1 - ii0 <= ii1 <= 1 and ii1 <= 15 + 16h1 - ii0 and ii2 >= -15 + 16h2 - 2ii0 - ii1 and ii2 >= -ii1 and -3ii0 - 2ii1 < ii2 <= 1 and ii2 <= 15 + 16h2 - 2ii0 - ii1 }

#tile scop delta part: { [h0, h1, h2, ii0, ii1, ii2] : ii0 >= -15 + 16h0 and 0 < ii0 <= 15 + 16h0 and ii1 >= -15 + 16h1 - ii0 and -1 <= ii1 <= 16 + 16h2 - 2ii0 and ii1 <= 15 + 16h1 - ii0 and ii2 >= -15 + 16h2 - 2ii0 - ii1 and -1 <= ii2 < -ii1 and ii2 <= 16 + 16h2 - 2ii0 }

#tile delta: { [h0, h1, h2] : h0 >= 0 and h1 >= -1 + h0 and 0 <= h1 <= 1 + h0 and h2 >= -2 + 2h0 and h2 >= -2 + 2h1 and 0 < h2 <= 2 + 2h1 and h2 <= 2 + 2h0; [h0, h1 = 1, h2 = 0] : 0 <= h0 <= 1; [h0 = 1, h1 = 0, h2 = 0] }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 1, h1 = 2, h2 = 4] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 2, h2 = 2] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0, h2 = 2] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0, h2 = 1] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 1, h2 = 2] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 1, h2 = 1] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 2] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 1] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 1, h2 = 0] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 1, h2 = 0] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0, h2 = 0] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1, a2, a3] : exists b1, b2, b3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and 1*a1 + 2*a2 + 4*a3 > 0 and 1*a1 + 2*a2 + 2*a3 > 0 and 0*a1 + 1*a2 + 2*a3 > 0 and 1*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 1*a2 + 1*a3 > 0 and 1*a1 + 0*a2 + 1*a3 > 0 and 0*a1 + 0*a2 + 1*a3 > 0 and 1*a1 + 1*a2 + 0*a3 > 0 and 0*a1 + 1*a2 + 0*a3 > 0 and 1*a1 + 0*a2 + 0*a3 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : exists c1, c2, c3 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and c0 = c1 + c2 + c3 and a1 != 0 and a2 != 0 and a3 != 0} * {[d0, b0, c0, a1, a2, a3] : exists b1, b2, b3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and 1*a1 + 2*a2 + 4*a3 > 0 and 1*a1 + 2*a2 + 2*a3 > 0 and 0*a1 + 1*a2 + 2*a3 > 0 and 1*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 1*a2 + 1*a3 > 0 and 1*a1 + 0*a2 + 1*a3 > 0 and 0*a1 + 0*a2 + 1*a3 > 0 and 1*a1 + 1*a2 + 0*a3 > 0 and 0*a1 + 1*a2 + 0*a3 > 0 and 1*a1 + 0*a2 + 0*a3 > 0 } )

#result: { [d0 = 0, b0 = 3, c0 = -3, a1 = 1, a2 = 1, a3 = 1] }

#wafefront hyperplane: { [a1 = 1, a2 = 1, a3 = 1] }

#calculate wafefront hyperplane stop

#create wafefront schedule start

#part: [_PB_TSTEPS, _PB_N] -> { S_0[i0, i1, i2] -> [0, w0, h0, h1, h2, tw0, i0, i1, i2] : exists  bw0, bh0, bh1, bh2 : 1 = 1 and 1 * i0 + 0 * i1 + 0 * i2 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 1 * i0 + 1 * i1 + 0 * i2 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 and 2 * i0 + 1 * i1 + 1 * i2 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 + 1 * bh2 and w0 = 1 * h0 + 1 * h1 + 1 * h2 and tw0 = 0 } 

#wafefront schedule: [_PB_TSTEPS, _PB_N] -> { S_0[i0, i1, i2] -> [0, w0, h0, h1, h2 = w0 - h0 - h1, tw0 = 0, i0, i1, i2] : -15 + i0 <= 16h0 <= i0 and 16h1 >= -15 + i0 + i1 and -2i0 - i1 - i2 + 16w0 - 16h0 <= 16h1 <= 15 - 2i0 - i1 - i2 + 16w0 - 16h0 and 16h1 <= i0 + i1 }

#create wafefront schedule stop

#create code start

#wafefront code: [_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] -> [0, w0, h0, h1, h2 = w0 - h0 - h1, tw0 = 0, t, i, j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and -15 + t <= 16h0 <= t and 16h1 >= -15 + t + i and -2t - i - j + 16w0 - 16h0 <= 16h1 <= 15 - 2t - i - j + 16w0 - 16h0 and 16h1 <= t + i }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#global schedule:
[_PB_TSTEPS, _PB_N] -> { S_0[t, i, j] -> [0, w0, h0, h1, h2 = w0 - h0 - h1, tw0 = 0, t, i, j] : 0 <= t < _PB_TSTEPS and 0 < i <= -2 + _PB_N and 0 < j <= -2 + _PB_N and -15 + t <= 16h0 <= t and 16h1 >= -15 + t + i and -2t - i - j + 16w0 - 16h0 <= 16h1 <= 15 - 2t - i - j + 16w0 - 16h0 and 16h1 <= t + i }

#######################################################################

#######################################################################

#Does global schedule respects oryginal loop RaW deps? -> True

#Does global schedule respects oryginal loop WaW deps? -> True

#Does global schedule respects oryginal loop WaR deps? -> True

#######################################################################
