
#######################################################################

#oryginal loop:

#schedule:
{ domain: "[_PB_N] -> { S_6[k] : 0 < k < _PB_N; S_5[k, i] : k < _PB_N and 0 <= i < k; S_2[]; S_1[]; S_9[k] : 0 < k < _PB_N; S_0[]; S_8[k, i] : k < _PB_N and 0 <= i < k; S_3[k] : 0 < k < _PB_N; S_4[k] : 0 < k < _PB_N; S_7[k, i] : k < _PB_N and 0 <= i < k }", child: { sequence: [ { filter: "[_PB_N] -> { S_0[] }" }, { filter: "[_PB_N] -> { S_1[] }" }, { filter: "[_PB_N] -> { S_2[] }" }, { filter: "[_PB_N] -> { S_6[k]; S_5[k, i]; S_9[k]; S_3[k]; S_8[k, i]; S_4[k]; S_7[k, i] }", child: { schedule: "[_PB_N] -> L_0[{ S_6[k] -> [(k)]; S_5[k, i] -> [(k)]; S_9[k] -> [(k)]; S_3[k] -> [(k)]; S_8[k, i] -> [(k)]; S_4[k] -> [(k)]; S_7[k, i] -> [(k)] }]", child: { sequence: [ { filter: "[_PB_N] -> { S_3[k] }" }, { filter: "[_PB_N] -> { S_4[k] }" }, { filter: "[_PB_N] -> { S_5[k, i] }", child: { schedule: "[_PB_N] -> L_1[{ S_5[k, i] -> [(i)] }]" } }, { filter: "[_PB_N] -> { S_6[k] }" }, { filter: "[_PB_N] -> { S_7[k, i] }", child: { schedule: "[_PB_N] -> L_2[{ S_7[k, i] -> [(i)] }]" } }, { filter: "[_PB_N] -> { S_8[k, i] }", child: { schedule: "[_PB_N] -> L_3[{ S_8[k, i] -> [(i)] }]" } }, { filter: "[_PB_N] -> { S_9[k] }" } ] } } } ] } }

#domain:
[_PB_N] -> { S_6[k] : 0 < k < _PB_N; S_5[k, i] : k < _PB_N and 0 <= i < k; S_2[]; S_1[]; S_9[k] : 0 < k < _PB_N; S_0[]; S_8[k, i] : k < _PB_N and 0 <= i < k; S_3[k] : 0 < k < _PB_N; S_4[k] : 0 < k < _PB_N; S_7[k, i] : k < _PB_N and 0 <= i < k }

#schedule map:
[_PB_N] -> { S_8[k, i] -> [3, k, 5, i]; S_5[k, i] -> [3, k, 2, i]; S_3[k] -> [3, k, 0, 0]; S_1[] -> [1, 0, 0, 0]; S_0[] -> [0, 0, 0, 0]; S_4[k] -> [3, k, 1, 0]; S_6[k] -> [3, k, 3, 0]; S_7[k, i] -> [3, k, 4, i]; S_9[k] -> [3, k, 6, 0]; S_2[] -> [2, 0, 0, 0] }

#isl schedule:
{ domain: "[_PB_N] -> { S_6[k] : 0 < k < _PB_N; S_5[k, i] : k < _PB_N and 0 <= i < k; S_2[]; S_1[]; S_9[k] : 0 < k < _PB_N; S_0[]; S_8[k, i] : k < _PB_N and 0 <= i < k; S_3[k] : 0 < k < _PB_N; S_4[k] : 0 < k < _PB_N; S_7[k, i] : k < _PB_N and 0 <= i < k }", child: { schedule: "[_PB_N] -> [{ S_6[k] -> [(k)]; S_5[k, i] -> [(k)]; S_2[] -> [(0)]; S_1[] -> [(0)]; S_9[k] -> [(k)]; S_0[] -> [(0)]; S_8[k, i] -> [(k)]; S_3[k] -> [(k)]; S_4[k] -> [(k)]; S_7[k, i] -> [(k)] }]", permutable: 1, coincident: [ 1 ], child: { set: [ { filter: "[_PB_N] -> { S_6[k]; S_5[k, i]; S_9[k]; S_3[k]; S_8[k, i]; S_4[k]; S_7[k, i] }", child: { sequence: [ { filter: "[_PB_N] -> { S_3[k] }" }, { filter: "[_PB_N] -> { S_6[k]; S_5[k, i]; S_4[k]; S_7[k, i] }", child: { schedule: "[_PB_N] -> [{ S_6[k] -> [(_PB_N)]; S_5[k, i] -> [(i)]; S_4[k] -> [(0)]; S_7[k, i] -> [(_PB_N + i)] }]", permutable: 1, coincident: [ 1 ], child: { set: [ { filter: "[_PB_N] -> { S_6[k]; S_7[k, i] }", child: { sequence: [ { filter: "[_PB_N] -> { S_6[k] }" }, { filter: "[_PB_N] -> { S_7[k, i] }" } ] } }, { filter: "[_PB_N] -> { S_5[k, i]; S_4[k] }", child: { sequence: [ { filter: "[_PB_N] -> { S_4[k] }" }, { filter: "[_PB_N] -> { S_5[k, i] }" } ] } } ] } } }, { filter: "[_PB_N] -> { S_8[k, i] }", child: { schedule: "[_PB_N] -> [{ S_8[k, i] -> [(i)] }]", permutable: 1, coincident: [ 1 ] } }, { filter: "[_PB_N] -> { S_9[k] }" } ] } }, { filter: "[_PB_N] -> { S_0[] }" }, { filter: "[_PB_N] -> { S_1[] }" }, { filter: "[_PB_N] -> { S_2[] }" } ] } } }

#isl schedule map:
[_PB_N] -> { S_3[k] -> [k, 0, 0, 0, 0, 0]; S_4[k] -> [k, 0, 1, 0, 1, 0]; S_0[] -> [0, 1, 0, 0, 0, 0]; S_1[] -> [0, 2, 0, 0, 0, 0]; S_7[k, i] -> [k, 0, 1, _PB_N + i, 0, 1]; S_2[] -> [0, 3, 0, 0, 0, 0]; S_6[k] -> [k, 0, 1, _PB_N, 0, 0]; S_5[k, i] -> [k, 0, 1, i, 1, 1]; S_8[k, i] -> [k, 0, 2, i, 0, 0]; S_9[k] -> [k, 0, 3, 0, 0, 0] }

#writes:
[_PB_N] -> { S_1[] -> beta[]; S_9[k] -> y[k] : 0 < k < _PB_N; S_0[] -> y[0]; S_6[k] -> alpha[] : 0 < k < _PB_N; S_5[k, i] -> sum[] : k < _PB_N and 0 <= i < k; S_7[k, i] -> z[i] : k < _PB_N and 0 <= i < k; S_8[k, i] -> y[i] : k < _PB_N and 0 <= i < k; S_2[] -> alpha[]; S_3[k] -> beta[] : 0 < k < _PB_N; S_4[k] -> sum[] : 0 < k < _PB_N }

#reads:
[_PB_N] -> { S_5[k, i] -> y[i] : k < _PB_N and 0 <= i < k; S_9[k] -> alpha[] : 0 < k < _PB_N; S_7[k, i] -> alpha[] : k < _PB_N and 0 <= i < k; S_2[] -> r[0]; S_6[k] -> r[k] : 0 < k < _PB_N; S_5[k, i] -> r[-1 + k - i] : k < _PB_N and 0 <= i < k; S_7[k, i] -> y[i] : k < _PB_N and 0 <= i < k; S_7[k, i] -> y[-1 + k - i] : k < _PB_N and 0 <= i < k; S_0[] -> r[0]; S_8[k, i] -> z[i] : k < _PB_N and 0 <= i < k; S_5[k, i] -> sum[] : k < _PB_N and 0 <= i < k; S_6[k] -> sum[] : 0 < k < _PB_N; S_6[k] -> beta[] : 0 < k < _PB_N; S_3[k] -> alpha[] : 0 < k < _PB_N; S_3[k] -> beta[] : 0 < k < _PB_N }

#dep_raw:
[_PB_N] -> { S_3[k] -> S_3[k'] : k > 0 and k < k' < _PB_N; S_6[k] -> S_9[k'] : k > 0 and k <= k' < _PB_N; S_1[] -> S_6[k] : 0 < k < _PB_N; S_6[k] -> S_3[k'] : k > 0 and k < k' < _PB_N; S_8[k, i] -> S_7[k', i' = i] : 0 <= i < k and k < k' < _PB_N; S_8[k, i] -> S_7[k', i' = -1 - i + k'] : 0 <= i < k and k < k' < _PB_N; S_7[k, i] -> S_8[k', i' = i] : 0 <= i < k and k <= k' < _PB_N; S_0[] -> S_5[k, i = 0] : 0 < k < _PB_N; S_8[k, i] -> S_5[k', i' = i] : 0 <= i < k and k < k' < _PB_N; S_4[k] -> S_5[k', i] : k > 0 and k <= k' < _PB_N and 0 <= i < k'; S_1[] -> S_3[k] : 0 < k < _PB_N; S_9[k] -> S_7[k', i = k] : k > 0 and k < k' < _PB_N; S_9[k] -> S_7[k', i = -1 - k + k'] : k > 0 and k < k' < _PB_N; S_2[] -> S_3[k] : 0 < k < _PB_N; S_5[k, i] -> S_5[k', i'] : 0 <= i < k and k < k' < _PB_N and 0 <= i' < k'; S_5[k, i] -> S_5[k' = k, i'] : k < _PB_N and i >= 0 and i < i' < k; S_2[] -> S_9[k] : 0 < k < _PB_N; S_4[k] -> S_6[k'] : k > 0 and k <= k' < _PB_N; S_5[k, i] -> S_6[k'] : 0 <= i < k and k <= k' < _PB_N; S_6[k] -> S_7[k', i] : k > 0 and k <= k' < _PB_N and 0 <= i < k'; S_2[] -> S_7[k, i] : k < _PB_N and 0 <= i < k; S_0[] -> S_7[k, i = 0] : 0 < k < _PB_N; S_0[] -> S_7[k, i = -1 + k] : 0 < k < _PB_N; S_3[k] -> S_6[k'] : k > 0 and k <= k' < _PB_N; S_9[k] -> S_5[k', i = k] : k > 0 and k < k' < _PB_N }

#dep_waw:
[_PB_N] -> { S_9[k] -> S_8[k', i = k] : k > 0 and k < k' < _PB_N; S_3[k] -> S_3[k'] : k > 0 and k < k' < _PB_N; S_4[k] -> S_5[k', i] : k > 0 and k <= k' < _PB_N and 0 <= i < k'; S_5[k, i] -> S_4[k'] : 0 <= i < k and k < k' < _PB_N; S_1[] -> S_3[k] : 0 < k < _PB_N; S_6[k] -> S_6[k'] : k > 0 and k < k' < _PB_N; S_5[k, i] -> S_5[k', i'] : 0 <= i < k and k < k' < _PB_N and 0 <= i' < k'; S_5[k, i] -> S_5[k' = k, i'] : k < _PB_N and i >= 0 and i < i' < k; S_2[] -> S_6[k] : 0 < k < _PB_N; S_0[] -> S_8[k, i = 0] : 0 < k < _PB_N; S_8[k, i] -> S_8[k', i' = i] : 0 <= i < k and k < k' < _PB_N; S_7[k, i] -> S_7[k', i' = i] : 0 <= i < k and k < k' < _PB_N; S_4[k] -> S_4[k'] : k > 0 and k < k' < _PB_N }

#dep_war:
[_PB_N] -> { S_3[k] -> S_3[k'] : k > 0 and k < k' < _PB_N; S_6[k] -> S_3[k'] : k > 0 and k < k' < _PB_N; S_8[k, i] -> S_7[k', i' = i] : 0 <= i < k and k < k' < _PB_N; S_7[k, i] -> S_8[k', i' = i] : 0 <= i < k and k <= k' < _PB_N; S_7[k, i] -> S_8[k', i' = -1 + k - i] : 0 <= i < k and k <= k' < _PB_N; S_9[k] -> S_6[k'] : k > 0 and k < k' < _PB_N; S_5[k, i] -> S_4[k'] : 0 <= i < k and k < k' < _PB_N; S_5[k, i] -> S_5[k', i'] : 0 <= i < k and k < k' < _PB_N and 0 <= i' < k'; S_5[k, i] -> S_5[k' = k, i'] : k < _PB_N and i >= 0 and i < i' < k; S_6[k] -> S_5[k', i] : k > 0 and k < k' < _PB_N and 0 <= i < k'; S_6[k] -> S_4[k'] : k > 0 and k < k' < _PB_N; S_5[k, i] -> S_8[k', i' = i] : 0 <= i < k and k <= k' < _PB_N; S_3[k] -> S_6[k'] : k > 0 and k <= k' < _PB_N; S_7[k, i] -> S_6[k'] : 0 <= i < k and k < k' < _PB_N }

#relations:
[_PB_N] -> { S_9[k] -> S_6[k'] : k > 0 and k < k' < _PB_N; S_0[] -> S_7[k, i = 0] : 0 < k < _PB_N; S_0[] -> S_7[k, i = -1 + k] : 0 < k < _PB_N; S_8[k, i] -> S_8[k', i' = i] : 0 <= i < k and k < k' < _PB_N; S_4[k] -> S_6[k'] : k > 0 and k <= k' < _PB_N; S_9[k] -> S_5[k', i = k] : k > 0 and k < k' < _PB_N; S_6[k] -> S_6[k'] : k > 0 and k < k' < _PB_N; S_6[k] -> S_9[k'] : k > 0 and k <= k' < _PB_N; S_9[k] -> S_7[k', i = k] : k > 0 and k < k' < _PB_N; S_9[k] -> S_7[k', i = -1 - k + k'] : k > 0 and k < k' < _PB_N; S_5[k, i] -> S_4[k'] : 0 <= i < k and k < k' < _PB_N; S_3[k] -> S_6[k'] : k > 0 and k <= k' < _PB_N; S_5[k, i] -> S_8[k', i' = i] : 0 <= i < k and k <= k' < _PB_N; S_1[] -> S_6[k] : 0 < k < _PB_N; S_4[k] -> S_5[k', i] : k > 0 and k <= k' < _PB_N and 0 <= i < k'; S_7[k, i] -> S_6[k'] : 0 <= i < k and k < k' < _PB_N; S_2[] -> S_6[k] : 0 < k < _PB_N; S_6[k] -> S_3[k'] : k > 0 and k < k' < _PB_N; S_6[k] -> S_7[k', i] : k > 0 and k <= k' < _PB_N and 0 <= i < k'; S_2[] -> S_3[k] : 0 < k < _PB_N; S_2[] -> S_9[k] : 0 < k < _PB_N; S_9[k] -> S_8[k', i = k] : k > 0 and k < k' < _PB_N; S_3[k] -> S_3[k'] : k > 0 and k < k' < _PB_N; S_5[k, i] -> S_6[k'] : 0 <= i < k and k <= k' < _PB_N; S_6[k] -> S_5[k', i] : k > 0 and k < k' < _PB_N and 0 <= i < k'; S_6[k] -> S_4[k'] : k > 0 and k < k' < _PB_N; S_7[k, i] -> S_8[k', i' = i] : 0 <= i < k and k <= k' < _PB_N; S_7[k, i] -> S_8[k', i' = -1 + k - i] : 0 <= i < k and k <= k' < _PB_N; S_1[] -> S_3[k] : 0 < k < _PB_N; S_8[k, i] -> S_5[k', i' = i] : 0 <= i < k and k < k' < _PB_N; S_0[] -> S_8[k, i = 0] : 0 < k < _PB_N; S_8[k, i] -> S_7[k', i' = i] : 0 <= i < k and k < k' < _PB_N; S_8[k, i] -> S_7[k', i' = -1 - i + k'] : 0 <= i < k and k < k' < _PB_N; S_2[] -> S_7[k, i] : k < _PB_N and 0 <= i < k; S_0[] -> S_5[k, i = 0] : 0 < k < _PB_N; S_5[k, i] -> S_5[k', i'] : 0 <= i < k and k < k' < _PB_N and 0 <= i' < k'; S_5[k, i] -> S_5[k' = k, i'] : k < _PB_N and i >= 0 and i < i' < k; S_4[k] -> S_4[k'] : k > 0 and k < k' < _PB_N; S_7[k, i] -> S_7[k', i' = i] : 0 <= i < k and k < k' < _PB_N }

#delta:
{ [k] : k >= 0; [k, i] : k >= 0 }

#######################################################################

#######################################################################

#norm schedule map:
[_PB_N] -> { S_4[k] -> [3, k, 1, 0]; S_9[k] -> [3, k, 6, 0]; S_6[k] -> [3, k, 3, 0]; S_2[] -> [2, 0, 0, 0]; S_8[k, i] -> [3, k, 5, i]; S_5[k, i] -> [3, k, 2, i]; S_3[k] -> [3, k, 0, 0]; S_7[k, i] -> [3, k, 4, i]; S_0[] -> [0, 0, 0, 0]; S_1[] -> [1, 0, 0, 0] }

#######################################################################

#######################################################################

#normalized loop (0):

#mapper:
[_PB_N] -> { S_0[] -> S_0[i0 = 0, i1 = 0, i2 = 0, i3 = 0] }

#domain:
[_PB_N] -> { S_0[i0 = 0, i1 = 0, i2 = 0, i3 = 0] }

#schedule map:
[_PB_N] -> { S_0[i0 = 0, i1 = 0, i2 = 0, i3 = 0] -> [0, 0, 0, 0] }

#writes:
[_PB_N] -> { S_0[i0 = 0, i1 = 0, i2 = 0, i3 = 0] -> y[0] }

#reads:
[_PB_N] -> { S_0[i0 = 0, i1 = 0, i2 = 0, i3 = 0] -> r[0] }

#dep_raw:
[_PB_N] -> {  }

#dep_waw:
[_PB_N] -> {  }

#dep_war:
[_PB_N] -> {  }

#relations:
[_PB_N] -> {  }

#delta:
[_PB_N] -> {  }

#######################################################################

#######################################################################

#normalized loop (1):

#mapper:
[_PB_N] -> { S_1[] -> S_1[i0 = 1, i1 = 0, i2 = 0, i3 = 0] }

#domain:
[_PB_N] -> { S_1[i0 = 1, i1 = 0, i2 = 0, i3 = 0] }

#schedule map:
[_PB_N] -> { S_1[i0 = 1, i1 = 0, i2 = 0, i3 = 0] -> [1, 0, 0, 0] }

#writes:
[_PB_N] -> { S_1[i0 = 1, i1 = 0, i2 = 0, i3 = 0] -> beta[] }

#reads:
[_PB_N] -> {  }

#dep_raw:
[_PB_N] -> {  }

#dep_waw:
[_PB_N] -> {  }

#dep_war:
[_PB_N] -> {  }

#relations:
[_PB_N] -> {  }

#delta:
[_PB_N] -> {  }

#######################################################################

#######################################################################

#normalized loop (2):

#mapper:
[_PB_N] -> { S_2[] -> S_2[i0 = 2, i1 = 0, i2 = 0, i3 = 0] }

#domain:
[_PB_N] -> { S_2[i0 = 2, i1 = 0, i2 = 0, i3 = 0] }

#schedule map:
[_PB_N] -> { S_2[i0 = 2, i1 = 0, i2 = 0, i3 = 0] -> [2, 0, 0, 0] }

#writes:
[_PB_N] -> { S_2[i0 = 2, i1 = 0, i2 = 0, i3 = 0] -> alpha[] }

#reads:
[_PB_N] -> { S_2[i0 = 2, i1 = 0, i2 = 0, i3 = 0] -> r[0] }

#dep_raw:
[_PB_N] -> {  }

#dep_waw:
[_PB_N] -> {  }

#dep_war:
[_PB_N] -> {  }

#relations:
[_PB_N] -> {  }

#delta:
[_PB_N] -> {  }

#######################################################################

#######################################################################

#normalized loop (3):

#mapper:
[_PB_N] -> { S_9[k] -> S_9[i0 = 3, i1 = k, i2 = 6, i3 = k]; S_5[k, i] -> S_5[i0 = 3, i1 = k, i2 = 2, i3 = i]; S_6[k] -> S_6[i0 = 3, i1 = k, i2 = 3, i3 = k]; S_7[k, i] -> S_7[i0 = 3, i1 = k, i2 = 4, i3 = i]; S_3[k] -> S_3[i0 = 3, i1 = k, i2 = 0, i3 = 0]; S_8[k, i] -> S_8[i0 = 3, i1 = k, i2 = 5, i3 = i]; S_4[k] -> S_4[i0 = 3, i1 = k, i2 = 1, i3 = 0] }

#domain:
[_PB_N] -> { S_6[i0 = 3, i1, i2 = 3, i3 = i1] : 0 < i1 < _PB_N; S_7[i0 = 3, i1, i2 = 4, i3] : i1 < _PB_N and 0 <= i3 < i1; S_5[i0 = 3, i1, i2 = 2, i3] : i1 < _PB_N and 0 <= i3 < i1; S_8[i0 = 3, i1, i2 = 5, i3] : i1 < _PB_N and 0 <= i3 < i1; S_4[i0 = 3, i1, i2 = 1, i3 = 0] : 0 < i1 < _PB_N; S_9[i0 = 3, i1, i2 = 6, i3 = i1] : 0 < i1 < _PB_N; S_3[i0 = 3, i1, i2 = 0, i3 = 0] : 0 < i1 < _PB_N }

#schedule map:
[_PB_N] -> { S_5[i0 = 3, i1, i2 = 2, i3] -> [3, i1, 2, i3]; S_3[i0 = 3, i1, i2 = 0, i3 = 0] -> [3, i1, 0, 0]; S_7[i0 = 3, i1, i2 = 4, i3] -> [3, i1, 4, i3]; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> [3, i1, 3, 0]; S_8[i0 = 3, i1, i2 = 5, i3] -> [3, i1, 5, i3]; S_4[i0 = 3, i1, i2 = 1, i3 = 0] -> [3, i1, 1, 0]; S_9[i0 = 3, i1, i2 = 6, i3 = i1] -> [3, i1, 6, 0] }

#writes:
[_PB_N] -> { S_4[i0 = 3, i1, i2 = 1, i3 = 0] -> sum[] : 0 < i1 < _PB_N; S_9[i0 = 3, i1, i2 = 6, i3 = i1] -> y[i1] : 0 < i1 < _PB_N; S_7[i0 = 3, i1, i2 = 4, i3] -> z[i3] : i1 < _PB_N and 0 <= i3 < i1; S_5[i0 = 3, i1, i2 = 2, i3] -> sum[] : i1 < _PB_N and 0 <= i3 < i1; S_3[i0 = 3, i1, i2 = 0, i3 = 0] -> beta[] : 0 < i1 < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> alpha[] : 0 < i1 < _PB_N; S_8[i0 = 3, i1, i2 = 5, i3] -> y[i3] : i1 < _PB_N and 0 <= i3 < i1 }

#reads:
[_PB_N] -> { S_5[i0 = 3, i1, i2 = 2, i3] -> r[-1 + i1 - i3] : i1 < _PB_N and 0 <= i3 < i1; S_3[i0 = 3, i1, i2 = 0, i3 = 0] -> alpha[] : 0 < i1 < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> beta[] : 0 < i1 < _PB_N; S_5[i0 = 3, i1, i2 = 2, i3] -> sum[] : i1 < _PB_N and 0 <= i3 < i1; S_7[i0 = 3, i1, i2 = 4, i3] -> alpha[] : i1 < _PB_N and 0 <= i3 < i1; S_5[i0 = 3, i1, i2 = 2, i3] -> y[i3] : i1 < _PB_N and 0 <= i3 < i1; S_3[i0 = 3, i1, i2 = 0, i3 = 0] -> beta[] : 0 < i1 < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> r[i1] : 0 < i1 < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> sum[] : 0 < i1 < _PB_N; S_8[i0 = 3, i1, i2 = 5, i3] -> z[i3] : i1 < _PB_N and 0 <= i3 < i1; S_9[i0 = 3, i1, i2 = 6, i3 = i1] -> alpha[] : 0 < i1 < _PB_N; S_7[i0 = 3, i1, i2 = 4, i3] -> y[i3] : i1 < _PB_N and 0 <= i3 < i1; S_7[i0 = 3, i1, i2 = 4, i3] -> y[-1 + i1 - i3] : i1 < _PB_N and 0 <= i3 < i1 }

#dep_raw:
[_PB_N] -> { S_7[i0 = 3, i1, i2 = 4, i3] -> S_8[i0' = 3, i1', i2' = 5, i3' = i3] : 0 <= i3 < i1 and i1 <= i1' < _PB_N; S_4[i0 = 3, i1, i2 = 1, i3 = 0] -> S_5[i0' = 3, i1', i2' = 2, i3'] : i1 > 0 and i1 <= i1' < _PB_N and 0 <= i3' < i1'; S_9[i0 = 3, i1, i2 = 6, i3 = i1] -> S_5[i0' = 3, i1', i2' = 2, i3' = i1] : i1 > 0 and i1 < i1' < _PB_N; S_4[i0 = 3, i1, i2 = 1, i3 = 0] -> S_6[i0' = 3, i1', i2' = 3, i3' = i1'] : i1 > 0 and i1 <= i1' < _PB_N; S_3[i0 = 3, i1, i2 = 0, i3 = 0] -> S_6[i0' = 3, i1', i2' = 3, i3' = i1'] : i1 > 0 and i1 <= i1' < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> S_7[i0' = 3, i1', i2' = 4, i3'] : i1 > 0 and i1 <= i1' < _PB_N and 0 <= i3' < i1'; S_3[i0 = 3, i1, i2 = 0, i3 = 0] -> S_3[i0' = 3, i1', i2' = 0, i3' = 0] : i1 > 0 and i1 < i1' < _PB_N; S_9[i0 = 3, i1, i2 = 6, i3 = i1] -> S_7[i0' = 3, i1', i2' = 4, i3' = i1] : i1 > 0 and i1 < i1' < _PB_N; S_9[i0 = 3, i1, i2 = 6, i3 = i1] -> S_7[i0' = 3, i1', i2' = 4, i3' = -1 - i1 + i1'] : i1 > 0 and i1 < i1' < _PB_N; S_5[i0 = 3, i1, i2 = 2, i3] -> S_6[i0' = 3, i1', i2' = 3, i3' = i1'] : 0 <= i3 < i1 and i1 <= i1' < _PB_N; S_5[i0 = 3, i1, i2 = 2, i3] -> S_5[i0' = 3, i1', i2' = 2, i3'] : 0 <= i3 < i1 and i1 < i1' < _PB_N and 0 <= i3' < i1'; S_5[i0 = 3, i1, i2 = 2, i3] -> S_5[i0' = 3, i1' = i1, i2' = 2, i3'] : i1 < _PB_N and i3 >= 0 and i3 < i3' < i1; S_8[i0 = 3, i1, i2 = 5, i3] -> S_5[i0' = 3, i1', i2' = 2, i3' = i3] : i1 < _PB_N and 0 <= i3 < i1 and i1' > i1 and i3 < i1' < _PB_N; S_8[i0 = 3, i1, i2 = 5, i3] -> S_7[i0' = 3, i1', i2' = 4, i3' = i3] : 0 <= i3 < i1 and i1 < i1' < _PB_N; S_8[i0 = 3, i1, i2 = 5, i3] -> S_7[i0' = 3, i1', i2' = 4, i3' = -1 - i3 + i1'] : 0 <= i3 < i1 and i1 < i1' < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> S_3[i0' = 3, i1', i2' = 0, i3' = 0] : i1 > 0 and i1 < i1' < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> S_9[i0' = 3, i1', i2' = 6, i3' = i1'] : i1 > 0 and i1 <= i1' < _PB_N }

#dep_waw:
[_PB_N] -> { S_5[i0 = 3, i1, i2 = 2, i3] -> S_5[i0' = 3, i1', i2' = 2, i3'] : 0 <= i3 < i1 and i1 < i1' < _PB_N and 0 <= i3' < i1'; S_5[i0 = 3, i1, i2 = 2, i3] -> S_5[i0' = 3, i1' = i1, i2' = 2, i3'] : i1 < _PB_N and i3 >= 0 and i3 < i3' < i1; S_3[i0 = 3, i1, i2 = 0, i3 = 0] -> S_3[i0' = 3, i1', i2' = 0, i3' = 0] : i1 > 0 and i1 < i1' < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> S_6[i0' = 3, i1', i2' = 3, i3' = i1'] : 0 < i1 < _PB_N and i1' > i1 and 0 < i1' < _PB_N; S_4[i0 = 3, i1, i2 = 1, i3 = 0] -> S_4[i0' = 3, i1', i2' = 1, i3' = 0] : 0 < i1 < _PB_N and i1' > i1 and 0 < i1' < _PB_N; S_8[i0 = 3, i1, i2 = 5, i3] -> S_8[i0' = 3, i1', i2' = 5, i3' = i3] : i1 < _PB_N and 0 <= i3 < i1 and i1' > i1 and i3 < i1' < _PB_N; S_9[i0 = 3, i1, i2 = 6, i3 = i1] -> S_8[i0' = 3, i1', i2' = 5, i3' = i1] : i1 > 0 and i1 < i1' < _PB_N; S_4[i0 = 3, i1, i2 = 1, i3 = 0] -> S_5[i0' = 3, i1', i2' = 2, i3'] : i1 > 0 and i1 <= i1' < _PB_N and 0 <= i3' < i1'; S_7[i0 = 3, i1, i2 = 4, i3] -> S_7[i0' = 3, i1', i2' = 4, i3' = i3] : i1 < _PB_N and 0 <= i3 < i1 and i1' > i1 and i3 < i1' < _PB_N; S_5[i0 = 3, i1, i2 = 2, i3] -> S_4[i0' = 3, i1', i2' = 1, i3' = 0] : 0 <= i3 < i1 and i1 < i1' < _PB_N }

#dep_war:
[_PB_N] -> { S_7[i0 = 3, i1, i2 = 4, i3] -> S_8[i0' = 3, i1', i2' = 5, i3' = i3] : 0 <= i3 < i1 and i1 <= i1' < _PB_N; S_7[i0 = 3, i1, i2 = 4, i3] -> S_8[i0' = 3, i1', i2' = 5, i3' = -1 + i1 - i3] : 0 <= i3 < i1 and i1 <= i1' < _PB_N; S_3[i0 = 3, i1, i2 = 0, i3 = 0] -> S_6[i0' = 3, i1', i2' = 3, i3' = i1'] : i1 > 0 and i1 <= i1' < _PB_N; S_7[i0 = 3, i1, i2 = 4, i3] -> S_6[i0' = 3, i1', i2' = 3, i3' = i1'] : i1 < _PB_N and 0 <= i3 < i1 and i1' > i1 and 0 < i1' < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> S_5[i0' = 3, i1', i2' = 2, i3'] : 0 < i1 < _PB_N and i1 < i1' < _PB_N and 0 <= i3' < i1'; S_3[i0 = 3, i1, i2 = 0, i3 = 0] -> S_3[i0' = 3, i1', i2' = 0, i3' = 0] : i1 > 0 and i1 < i1' < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> S_4[i0' = 3, i1', i2' = 1, i3' = 0] : 0 < i1 < _PB_N and i1' > i1 and 0 < i1' < _PB_N; S_8[i0 = 3, i1, i2 = 5, i3] -> S_7[i0' = 3, i1', i2' = 4, i3' = i3] : 0 <= i3 < i1 and i1 < i1' < _PB_N; S_5[i0 = 3, i1, i2 = 2, i3] -> S_5[i0' = 3, i1', i2' = 2, i3'] : 0 <= i3 < i1 and i1 < i1' < _PB_N and 0 <= i3' < i1'; S_5[i0 = 3, i1, i2 = 2, i3] -> S_5[i0' = 3, i1' = i1, i2' = 2, i3'] : i1 < _PB_N and i3 >= 0 and i3 < i3' < i1; S_5[i0 = 3, i1, i2 = 2, i3] -> S_8[i0' = 3, i1', i2' = 5, i3' = i3] : 0 <= i3 < i1 and i1 <= i1' < _PB_N; S_5[i0 = 3, i1, i2 = 2, i3] -> S_4[i0' = 3, i1', i2' = 1, i3' = 0] : 0 <= i3 < i1 and i1 < i1' < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> S_3[i0' = 3, i1', i2' = 0, i3' = 0] : i1 > 0 and i1 < i1' < _PB_N; S_9[i0 = 3, i1, i2 = 6, i3 = i1] -> S_6[i0' = 3, i1', i2' = 3, i3' = i1'] : 0 < i1 < _PB_N and i1' > i1 and 0 < i1' < _PB_N }

#relations:
[_PB_N] -> { S_9[i0 = 3, i1, i2 = 6, i3 = i1] -> S_6[i0' = 3, i1', i2' = 3, i3' = i1'] : 0 < i1 < _PB_N and i1' > i1 and 0 < i1' < _PB_N; S_7[i0 = 3, i1, i2 = 4, i3] -> S_7[i0' = 3, i1', i2' = 4, i3' = i3] : i1 < _PB_N and 0 <= i3 < i1 and i1' > i1 and i3 < i1' < _PB_N; S_5[i0 = 3, i1, i2 = 2, i3] -> S_8[i0' = 3, i1', i2' = 5, i3' = i3] : 0 <= i3 < i1 and i1 <= i1' < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> S_4[i0' = 3, i1', i2' = 1, i3' = 0] : 0 < i1 < _PB_N and i1' > i1 and 0 < i1' < _PB_N; S_4[i0 = 3, i1, i2 = 1, i3 = 0] -> S_4[i0' = 3, i1', i2' = 1, i3' = 0] : 0 < i1 < _PB_N and i1' > i1 and 0 < i1' < _PB_N; S_8[i0 = 3, i1, i2 = 5, i3] -> S_5[i0' = 3, i1', i2' = 2, i3' = i3] : i1 < _PB_N and 0 <= i3 < i1 and i1' > i1 and i3 < i1' < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> S_7[i0' = 3, i1', i2' = 4, i3'] : i1 > 0 and i1 <= i1' < _PB_N and 0 <= i3' < i1'; S_3[i0 = 3, i1, i2 = 0, i3 = 0] -> S_6[i0' = 3, i1', i2' = 3, i3' = i1'] : i1 > 0 and i1 <= i1' < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> S_3[i0' = 3, i1', i2' = 0, i3' = 0] : i1 > 0 and i1 < i1' < _PB_N; S_7[i0 = 3, i1, i2 = 4, i3] -> S_8[i0' = 3, i1', i2' = 5, i3' = i3] : 0 <= i3 < i1 and i1 <= i1' < _PB_N; S_7[i0 = 3, i1, i2 = 4, i3] -> S_8[i0' = 3, i1', i2' = 5, i3' = -1 + i1 - i3] : 0 <= i3 < i1 and i1 <= i1' < _PB_N; S_9[i0 = 3, i1, i2 = 6, i3 = i1] -> S_8[i0' = 3, i1', i2' = 5, i3' = i1] : i1 > 0 and i1 < i1' < _PB_N; S_5[i0 = 3, i1, i2 = 2, i3] -> S_6[i0' = 3, i1', i2' = 3, i3' = i1'] : 0 <= i3 < i1 and i1 <= i1' < _PB_N; S_5[i0 = 3, i1, i2 = 2, i3] -> S_4[i0' = 3, i1', i2' = 1, i3' = 0] : 0 <= i3 < i1 and i1 < i1' < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> S_9[i0' = 3, i1', i2' = 6, i3' = i1'] : i1 > 0 and i1 <= i1' < _PB_N; S_8[i0 = 3, i1, i2 = 5, i3] -> S_7[i0' = 3, i1', i2' = 4, i3' = i3] : 0 <= i3 < i1 and i1 < i1' < _PB_N; S_8[i0 = 3, i1, i2 = 5, i3] -> S_7[i0' = 3, i1', i2' = 4, i3' = -1 - i3 + i1'] : 0 <= i3 < i1 and i1 < i1' < _PB_N; S_3[i0 = 3, i1, i2 = 0, i3 = 0] -> S_3[i0' = 3, i1', i2' = 0, i3' = 0] : i1 > 0 and i1 < i1' < _PB_N; S_4[i0 = 3, i1, i2 = 1, i3 = 0] -> S_6[i0' = 3, i1', i2' = 3, i3' = i1'] : i1 > 0 and i1 <= i1' < _PB_N; S_7[i0 = 3, i1, i2 = 4, i3] -> S_6[i0' = 3, i1', i2' = 3, i3' = i1'] : i1 < _PB_N and 0 <= i3 < i1 and i1' > i1 and 0 < i1' < _PB_N; S_9[i0 = 3, i1, i2 = 6, i3 = i1] -> S_5[i0' = 3, i1', i2' = 2, i3' = i1] : i1 > 0 and i1 < i1' < _PB_N; S_9[i0 = 3, i1, i2 = 6, i3 = i1] -> S_7[i0' = 3, i1', i2' = 4, i3' = i1] : i1 > 0 and i1 < i1' < _PB_N; S_9[i0 = 3, i1, i2 = 6, i3 = i1] -> S_7[i0' = 3, i1', i2' = 4, i3' = -1 - i1 + i1'] : i1 > 0 and i1 < i1' < _PB_N; S_4[i0 = 3, i1, i2 = 1, i3 = 0] -> S_5[i0' = 3, i1', i2' = 2, i3'] : i1 > 0 and i1 <= i1' < _PB_N and 0 <= i3' < i1'; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> S_6[i0' = 3, i1', i2' = 3, i3' = i1'] : 0 < i1 < _PB_N and i1' > i1 and 0 < i1' < _PB_N; S_8[i0 = 3, i1, i2 = 5, i3] -> S_8[i0' = 3, i1', i2' = 5, i3' = i3] : i1 < _PB_N and 0 <= i3 < i1 and i1' > i1 and i3 < i1' < _PB_N; S_6[i0 = 3, i1, i2 = 3, i3 = i1] -> S_5[i0' = 3, i1', i2' = 2, i3'] : 0 < i1 < _PB_N and i1 < i1' < _PB_N and 0 <= i3' < i1'; S_5[i0 = 3, i1, i2 = 2, i3] -> S_5[i0' = 3, i1', i2' = 2, i3'] : 0 <= i3 < i1 and i1 < i1' < _PB_N and 0 <= i3' < i1'; S_5[i0 = 3, i1, i2 = 2, i3] -> S_5[i0' = 3, i1' = i1, i2' = 2, i3'] : i1 < _PB_N and i3 >= 0 and i3 < i3' < i1 }

#delta:
{ [i0 = 0, i1, i2, i3] : -3 <= i2 <= 3 and ((i2 >= 0 and -i1 < i2 <= 1) or (i1 > 0 and -2 <= i2 < 0 and i3 <= i1 + i2) or (i1 > 0 and i2 <= -2 and i3 < 0) or (i1 >= 0 and i2 >= 2 and i3 >= 3 + i1 - i2)); [i0 = 0, i1, i2 = -1, i3] : i1 > 0; [i0 = 0, i1, i2 = -3, i3 = i1] : i1 > 0; [i0 = 0, i1, i2 = 3, i3 = 0] : i1 >= 0; [i0 = 0, i1, i2, i3 = 0] : -4 <= i2 <= 1 and ((i2 >= -1 and i2 > -3i1) or (i1 > 0 and i2 <= 0)); [i0 = 0, i1 = 0, i2 = 0, i3] : i3 > 0 }

#######################################################################

#######################################################################

#normalized loop (0):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#delta:
[_PB_N] -> {  }

#dim [i0]: is order

#dim [i1]: is order

#dim [i2]: is order

#dim [i3]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and ( 1 = 0  )  }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and ( 1 = 0  )  }

#create tile equations stop

#create hyperplanes start

#create hyperplanes stop

#create wafefront schedule start

#part: [_PB_N] -> { S_0[i0, i1, i2, i3] -> [0, w0, 0, 0, 0, 0, tw0, i0, i1, i2, i3] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [_PB_N] -> { S_0[i0, i1, i2, i3] -> [0, w0 = 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3] }

#create wafefront schedule stop

#create code start

#wafefront code: [_PB_N] -> { S_0[] -> [0, w0 = 0, 0, 0, 0, 0, tw0 = 0, 0, 0, 0, 0] }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#normalized loop (1):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#delta:
[_PB_N] -> {  }

#dim [i0]: is order

#dim [i1]: is order

#dim [i2]: is order

#dim [i3]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and ( 1 = 0  )  }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and ( 1 = 0  )  }

#create tile equations stop

#create hyperplanes start

#create hyperplanes stop

#create wafefront schedule start

#part: [_PB_N] -> { S_1[i0, i1, i2, i3] -> [1, w0, 0, 0, 0, 0, tw0, i0, i1, i2, i3] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [_PB_N] -> { S_1[i0, i1, i2, i3] -> [1, w0 = 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3] }

#create wafefront schedule stop

#create code start

#wafefront code: [_PB_N] -> { S_1[] -> [1, w0 = 0, 0, 0, 0, 0, tw0 = 0, 1, 0, 0, 0] }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#normalized loop (2):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#delta:
[_PB_N] -> {  }

#dim [i0]: is order

#dim [i1]: is order

#dim [i2]: is order

#dim [i3]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and ( 1 = 0  )  }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and ( 1 = 0  )  }

#create tile equations stop

#create hyperplanes start

#create hyperplanes stop

#create wafefront schedule start

#part: [_PB_N] -> { S_2[i0, i1, i2, i3] -> [2, w0, 0, 0, 0, 0, tw0, i0, i1, i2, i3] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [_PB_N] -> { S_2[i0, i1, i2, i3] -> [2, w0 = 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3] }

#create wafefront schedule stop

#create code start

#wafefront code: [_PB_N] -> { S_2[] -> [2, w0 = 0, 0, 0, 0, 0, tw0 = 0, 2, 0, 0, 0] }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#normalized loop (3):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 0, i1 = 1, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -1, i3 = 1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -1, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -1, i3 = -1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -2, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -2, i3 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -1, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -1, i3 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -2, i3 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -2, i3 = -2] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -2, i3 = -1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -2, i3 = -2] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -3, i3 = -1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -3, i3 = -2] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -2, i3 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -2, i3 = -2] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -3, i3 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -3, i3 = -2] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 3, i3 = 2] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 3, i3 = 1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 2, i3 = 3] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 2, i3 = 2] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 3, i3 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 3, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 2, i3 = 2] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 2, i3 = 1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -1, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -1, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -4, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -4, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -1, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -3, i3 = 2] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -3, i3 = 1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 3, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 3, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1] }

#delta:
{ [i0 = 0, i1, i2, i3] : -3 <= i2 <= 3 and ((i2 >= 0 and -i1 < i2 <= 1) or (i1 > 0 and -2 <= i2 < 0 and i3 <= i1 + i2) or (i1 > 0 and i2 <= -2 and i3 < 0) or (i1 >= 0 and i2 >= 2 and i3 >= 3 + i1 - i2)); [i0 = 0, i1, i2 = -1, i3] : i1 > 0; [i0 = 0, i1, i2 = -3, i3 = i1] : i1 > 0; [i0 = 0, i1, i2 = 3, i3 = 0] : i1 >= 0; [i0 = 0, i1, i2, i3 = 0] : -4 <= i2 <= 1 and ((i1 > 0 and i2 <= 0) or (i2 >= -1 and i2 > -3i1)); [i0 = 0, i1 = 0, i2 = 0, i3] : i3 > 0 }

#dim [i0]: is order

#dim [i1]: is parameter, is positive

#dim [i2]: is order

#dim [i3]: is parameter, is negative, is positive

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a2 >= 0  and a4 <= 0  and a4 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  )  and 0*a1 + 1*a2 + 2*a3 + 3*a4 >= 0 and 0*a1 + 1*a2 + 3*a3 + 2*a4 >= 0 and 0*a1 + 1*a2 + 2*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 2*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 >= 0 and 0*a1 + 2*a2 + -3*a3 + 2*a4 >= 0 and 0*a1 + 1*a2 + 3*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 3*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 >= 0 and 0*a1 + 1*a2 + -3*a3 + 1*a4 >= 0 and 0*a1 + 1*a2 + 3*a3 + 0*a4 >= 0 and 0*a1 + 0*a2 + 3*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -2*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -4*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + -4*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 >= 0 and 0*a1 + 2*a2 + -2*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + -2*a3 + -1*a4 >= 0 and 0*a1 + 2*a2 + -3*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + -3*a3 + -1*a4 >= 0 and 0*a1 + 2*a2 + -2*a3 + -2*a4 >= 0 and 0*a1 + 1*a2 + -2*a3 + -2*a4 >= 0 and 0*a1 + 2*a2 + -3*a3 + -2*a4 >= 0 and 0*a1 + 1*a2 + -3*a3 + -2*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a2 >= 0  and a4 <= 0  and a4 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  )  and 0*a1 + 1*a2 + 2*a3 + 3*a4 = 0 and 0*a1 + 1*a2 + 3*a3 + 2*a4 = 0 and 0*a1 + 1*a2 + 2*a3 + 2*a4 = 0 and 0*a1 + 0*a2 + 2*a3 + 2*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 = 0 and 0*a1 + 2*a2 + -3*a3 + 2*a4 = 0 and 0*a1 + 1*a2 + 3*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 3*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 2*a3 + 1*a4 = 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 = 0 and 0*a1 + 1*a2 + -3*a3 + 1*a4 = 0 and 0*a1 + 1*a2 + 3*a3 + 0*a4 = 0 and 0*a1 + 0*a2 + 3*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -2*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -4*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + -4*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 = 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 = 0 and 0*a1 + 2*a2 + -2*a3 + -1*a4 = 0 and 0*a1 + 1*a2 + -2*a3 + -1*a4 = 0 and 0*a1 + 2*a2 + -3*a3 + -1*a4 = 0 and 0*a1 + 1*a2 + -3*a3 + -1*a4 = 0 and 0*a1 + 2*a2 + -2*a3 + -2*a4 = 0 and 0*a1 + 1*a2 + -2*a3 + -2*a4 = 0 and 0*a1 + 2*a2 + -3*a3 + -2*a4 = 0 and 0*a1 + 1*a2 + -3*a3 + -2*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a2 >= 0  and a4 <= 0  and a4 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  )  and 0*a1 + 1*a2 + 2*a3 + 3*a4 = 0 and 0*a1 + 1*a2 + 3*a3 + 2*a4 = 0 and 0*a1 + 1*a2 + 2*a3 + 2*a4 = 0 and 0*a1 + 0*a2 + 2*a3 + 2*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 = 0 and 0*a1 + 2*a2 + -3*a3 + 2*a4 = 0 and 0*a1 + 1*a2 + 3*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 3*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 2*a3 + 1*a4 = 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 = 0 and 0*a1 + 1*a2 + -3*a3 + 1*a4 = 0 and 0*a1 + 1*a2 + 3*a3 + 0*a4 = 0 and 0*a1 + 0*a2 + 3*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -2*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -4*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + -4*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 = 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 = 0 and 0*a1 + 2*a2 + -2*a3 + -1*a4 = 0 and 0*a1 + 1*a2 + -2*a3 + -1*a4 = 0 and 0*a1 + 2*a2 + -3*a3 + -1*a4 = 0 and 0*a1 + 1*a2 + -3*a3 + -1*a4 = 0 and 0*a1 + 2*a2 + -2*a3 + -2*a4 = 0 and 0*a1 + 1*a2 + -2*a3 + -2*a4 = 0 and 0*a1 + 2*a2 + -3*a3 + -2*a4 = 0 and 0*a1 + 1*a2 + -3*a3 + -2*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4] : false }

#hyperplane: { [a1, a2, a3, a4] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a2 >= 0  and a4 <= 0  and a4 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  )  and 0*a1 + 1*a2 + 2*a3 + 3*a4 = 0 and 0*a1 + 1*a2 + 3*a3 + 2*a4 = 0 and 0*a1 + 1*a2 + 2*a3 + 2*a4 = 0 and 0*a1 + 0*a2 + 2*a3 + 2*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 = 0 and 0*a1 + 2*a2 + -3*a3 + 2*a4 = 0 and 0*a1 + 1*a2 + 3*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 3*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 2*a3 + 1*a4 = 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 = 0 and 0*a1 + 1*a2 + -3*a3 + 1*a4 = 0 and 0*a1 + 1*a2 + 3*a3 + 0*a4 = 0 and 0*a1 + 0*a2 + 3*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -2*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -4*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + -4*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 = 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 = 0 and 0*a1 + 2*a2 + -2*a3 + -1*a4 = 0 and 0*a1 + 1*a2 + -2*a3 + -1*a4 = 0 and 0*a1 + 2*a2 + -3*a3 + -1*a4 = 0 and 0*a1 + 1*a2 + -3*a3 + -1*a4 = 0 and 0*a1 + 2*a2 + -2*a3 + -2*a4 = 0 and 0*a1 + 1*a2 + -2*a3 + -2*a4 = 0 and 0*a1 + 2*a2 + -3*a3 + -2*a4 = 0 and 0*a1 + 1*a2 + -3*a3 + -2*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4] : false }

#hyperplane: { [a1, a2, a3, a4] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a2 >= 0  and a4 <= 0  and a4 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  )  and 0*a1 + 1*a2 + 2*a3 + 3*a4 >= 0 and 0*a1 + 1*a2 + 3*a3 + 2*a4 >= 0 and 0*a1 + 1*a2 + 2*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 2*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 >= 0 and 0*a1 + 2*a2 + -3*a3 + 2*a4 >= 0 and 0*a1 + 1*a2 + 3*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 3*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 >= 0 and 0*a1 + 1*a2 + -3*a3 + 1*a4 >= 0 and 0*a1 + 1*a2 + 3*a3 + 0*a4 >= 0 and 0*a1 + 0*a2 + 3*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -2*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -4*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + -4*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 >= 0 and 0*a1 + 2*a2 + -2*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + -2*a3 + -1*a4 >= 0 and 0*a1 + 2*a2 + -3*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + -3*a3 + -1*a4 >= 0 and 0*a1 + 2*a2 + -2*a3 + -2*a4 >= 0 and 0*a1 + 1*a2 + -2*a3 + -2*a4 >= 0 and 0*a1 + 2*a2 + -3*a3 + -2*a4 >= 0 and 0*a1 + 1*a2 + -3*a3 + -2*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -4, a1 = 0, a2 = 1, a3 = 0, a4 = 0] }

#hyperplane: { [a1 = 0, a2 = 1, a3 = 0, a4 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a2 >= 0  and a4 <= 0  and a4 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  )  and 0*a1 + 1*a2 + 2*a3 + 3*a4 >= 0 and 0*a1 + 1*a2 + 3*a3 + 2*a4 >= 0 and 0*a1 + 1*a2 + 2*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 2*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 >= 0 and 0*a1 + 2*a2 + -3*a3 + 2*a4 >= 0 and 0*a1 + 1*a2 + 3*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 3*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 >= 0 and 0*a1 + 1*a2 + -3*a3 + 1*a4 >= 0 and 0*a1 + 1*a2 + 3*a3 + 0*a4 >= 0 and 0*a1 + 0*a2 + 3*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + 1*a3 + 0*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -2*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -4*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + -4*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 >= 0 and 0*a1 + 2*a2 + -2*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + -2*a3 + -1*a4 >= 0 and 0*a1 + 2*a2 + -3*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + -3*a3 + -1*a4 >= 0 and 0*a1 + 2*a2 + -2*a3 + -2*a4 >= 0 and 0*a1 + 1*a2 + -2*a3 + -2*a4 >= 0 and 0*a1 + 2*a2 + -3*a3 + -2*a4 >= 0 and 0*a1 + 1*a2 + -3*a3 + -2*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4] : false }

#hyperplane: { [a1, a2, a3, a4] : false }

#hyperplane check: hyperplane is empty 

#result: false

#create hyperplanes stop

#create spaces start

#part: [_PB_N] -> { [i0, i1, i2, i3] -> [  h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : exists bh0 : 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#spaces mapper: [_PB_N] -> { [i0, i1, i2, i3] -> [h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i1 <= 16h0 <= i1 }

#create spaces stop

#create tile scop start

#tile scop mapper: [_PB_N] -> { S_6[i0, i1, i2, i3] -> S_6[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i1 <= 16h0 <= i1; S_7[i0, i1, i2, i3] -> S_7[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i1 <= 16h0 <= i1; S_9[i0, i1, i2, i3] -> S_9[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i1 <= 16h0 <= i1; S_5[i0, i1, i2, i3] -> S_5[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i1 <= 16h0 <= i1; S_3[i0, i1, i2, i3] -> S_3[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i1 <= 16h0 <= i1; S_8[i0, i1, i2, i3] -> S_8[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i1 <= 16h0 <= i1; S_4[i0, i1, i2, i3] -> S_4[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i1 <= 16h0 <= i1 }

#tile scop delta: { [h0, ii0 = 0, ii1, ii2, ii3] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0 and -3 <= ii2 <= 3 and ((ii1 > 0 and -2 <= ii2 < 0 and ii3 <= ii1 + ii2) or (ii1 > 0 and ii2 <= -2 and ii3 < 0) or (ii2 >= 2 and ii3 > ii1)); [h0, ii0 = 0, ii1, ii2 = -1, ii3] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3] : ii3 > 0; [h0, ii0 = 0, ii1, ii2 = 1, ii3] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0; [h0, ii0 = 0, ii1, ii2 = 3, ii3 = ii1] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0; [h0, ii0 = 0, ii1, ii2 = -3, ii3 = ii1] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0; [h0, ii0 = 0, ii1, ii2, ii3 = 0] : -15 + 16h0 <= ii1 <= 15 + 16h0 and -4 <= ii2 <= 1 and ((ii2 >= -1 and ii2 > -3ii1) or (ii1 > 0 and ii2 <= 0)); [h0, ii0 = 0, ii1, ii2 = 3, ii3 = 0] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0; [h0, ii0 = 0, ii1, ii2 = 0, ii3] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2, ii3 = 0] : -15 + 16h0 <= ii1 <= 15 + 16h0 and ii2 >= -1 and -3ii1 < ii2 <= 1 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3] : ii3 > 0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2, ii3 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and -4 <= ii2 <= 0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = -1, ii3] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii3 > ii1 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = -3, ii3 = ii1] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 3, ii3 = 0] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 1, ii3] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = -1, ii3] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 1, ii3] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0 and ii3 < ii1 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2, ii3] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and -2 <= ii2 < 0 and ii3 <= ii1 + ii2 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 1, ii3] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0 and ii3 >= 0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 3, ii3 = ii1] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2, ii3] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0 and 2 <= ii2 <= 3 and ii3 > ii1 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2, ii3] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and -3 <= ii2 <= -2 and ii3 < 0 }

#tile delta: { [h0] : h0 > 0 }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 2] }

#tile relatiions distance vector set: { [h0 = 1] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and 2*a1 > 0 and 1*a1 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1] : exists c1 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and c0 = c1 and a1 != 0} * {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and 2*a1 > 0 and 1*a1 > 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -1, a1 = 1] }

#wafefront hyperplane: { [a1 = 1] }

#calculate wafefront hyperplane stop

#create wafefront schedule start

#part: [_PB_N] -> { S_5[i0, i1, i2, i3] -> [3, w0, 0, 0, 0, 0, tw0, i0, i1, i2, i3] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [_PB_N] -> { S_3[i0, i1, i2, i3] -> [3, w0, 0, 0, 0, 0, tw0, i0, i1, i2, i3] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [_PB_N] -> { S_7[i0, i1, i2, i3] -> [3, w0, 0, 0, 0, 0, tw0, i0, i1, i2, i3] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [_PB_N] -> { S_6[i0, i1, i2, i3] -> [3, w0, 0, 0, 0, 0, tw0, i0, i1, i2, i3] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [_PB_N] -> { S_8[i0, i1, i2, i3] -> [3, w0, 0, 0, 0, 0, tw0, i0, i1, i2, i3] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [_PB_N] -> { S_4[i0, i1, i2, i3] -> [3, w0, 0, 0, 0, 0, tw0, i0, i1, i2, i3] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [_PB_N] -> { S_9[i0, i1, i2, i3] -> [3, w0, 0, 0, 0, 0, tw0, i0, i1, i2, i3] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [_PB_N] -> { S_7[i0, i1, i2, i3] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3]; S_5[i0, i1, i2, i3] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3]; S_9[i0, i1, i2, i3] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3]; S_4[i0, i1, i2, i3] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3]; S_8[i0, i1, i2, i3] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3]; S_3[i0, i1, i2, i3] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3]; S_6[i0, i1, i2, i3] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3] }

#create wafefront schedule stop

#create code start

#wafefront code: [_PB_N] -> { S_4[k] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 1, 0] : 0 < k < _PB_N; S_6[k] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 3, k] : 0 < k < _PB_N; S_7[k, i] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 4, i] : k < _PB_N and 0 <= i < k; S_9[k] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 6, k] : 0 < k < _PB_N; S_5[k, i] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 2, i] : k < _PB_N and 0 <= i < k; S_8[k, i] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 5, i] : k < _PB_N and 0 <= i < k; S_3[k] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 0, 0] : 0 < k < _PB_N }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#global schedule:
[_PB_N] -> { S_7[k, i] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 4, i] : k < _PB_N and 0 <= i < k; S_3[k] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 0, 0] : 0 < k < _PB_N; S_0[] -> [0, w0 = 0, 0, 0, 0, 0, tw0 = 0, 0, 0, 0, 0]; S_1[] -> [1, w0 = 0, 0, 0, 0, 0, tw0 = 0, 1, 0, 0, 0]; S_9[k] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 6, k] : 0 < k < _PB_N; S_4[k] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 1, 0] : 0 < k < _PB_N; S_2[] -> [2, w0 = 0, 0, 0, 0, 0, tw0 = 0, 2, 0, 0, 0]; S_5[k, i] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 2, i] : k < _PB_N and 0 <= i < k; S_8[k, i] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 5, i] : k < _PB_N and 0 <= i < k; S_6[k] -> [3, w0 = 0, 0, 0, 0, 0, tw0 = 0, 3, k, 3, k] : 0 < k < _PB_N }

#######################################################################

#######################################################################

#Does global schedule respects oryginal loop RaW deps? -> True

#Does global schedule respects oryginal loop WaW deps? -> True

#Does global schedule respects oryginal loop WaR deps? -> True

#######################################################################
