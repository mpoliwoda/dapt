
//dapt code:
#define min(x,y)    ((x) < (y) ? (x) : (y))
#define max(x,y)    ((x) > (y) ? (x) : (y))
#define floord(n,d) (((n)<0) ? -((-(n)+(d)-1)/(d)) : (n)/(d))

for (int w0 = 0; w0 <= floord(3 * _PB_N - 4, 16); w0 += 1) {
  #pragma omp parallel for
  for (int h0 = max(0, floord(-_PB_N + 16 * w0, 32) + 1); h0 <= min((_PB_N - 1) / 16, w0 / 2); h0 += 1) {
    for (int h1 = -h0 + (w0 + h0 + 1) / 2; h1 <= min(h0, (_PB_N - 2) / 16); h1 += 1) {
      if (_PB_N + 8 * h0 >= 8 * w0 + 3) {
        if (3 * h0 >= w0 + 1 && h1 == h0) {
          for (int i2 = 16 * h0; i2 <= min(_PB_N - 1, 16 * h0 + 15); i2 += 1) {
            for (int i4 = 16 * w0 - 32 * h0; i4 <= 16 * w0 - 32 * h0 + 15; i4 += 1) {
              A[16 * h0][i2] -= (A[16 * h0][i4] * A[i4][i2]);
            }
          }
        }
        for (int i0 = max(16 * h0, 16 * h1 + 1); i0 <= min(_PB_N - 1, 16 * h0 + 15); i0 += 1) {
          for (int i2 = 16 * h1; i2 <= min(16 * h1 + 15, i0 - 1); i2 += 1) {
            for (int i4 = 16 * w0 - 16 * h0 - 16 * h1; i4 <= min(16 * w0 - 16 * h0 - 16 * h1 + 15, i2 - 1); i4 += 1) {
              A[i0][i2] -= (A[i0][i4] * A[i4][i2]);
            }
            if (h0 + 2 * h1 == w0) {
              A[i0][i2] /= A[i2][i2];
            }
          }
          if (h1 == h0) {
            for (int i2 = i0; i2 <= min(_PB_N - 1, 16 * h0 + 15); i2 += 1) {
              for (int i4 = 16 * w0 - 32 * h0; i4 <= min(16 * w0 - 32 * h0 + 15, i0 - 1); i4 += 1) {
                A[i0][i2] -= (A[i0][i4] * A[i4][i2]);
              }
            }
          }
        }
      } else {
        A[_PB_N - 1][_PB_N - 2] /= A[_PB_N - 2][_PB_N - 2];
        A[_PB_N - 1][_PB_N - 1] -= (A[_PB_N - 1][_PB_N - 2] * A[_PB_N - 2][_PB_N - 1]);
      }
    }
    if (16 * h0 + 1 == _PB_N) {
      for (int i4 = -2 * _PB_N + 16 * w0 + 2; i4 <= -2 * _PB_N + 16 * w0 + 17; i4 += 1) {
        A[_PB_N - 1][_PB_N - 1] -= (A[_PB_N - 1][i4] * A[i4][_PB_N - 1]);
      }
    }
    for (int h1 = max(w0 - 2 * h0, h0 + 1); h1 <= min(w0 - h0, (_PB_N - 1) / 16); h1 += 1) {
      for (int i0 = max(16 * h0, 16 * w0 - 16 * h0 - 16 * h1 + 1); i0 <= 16 * h0 + 15; i0 += 1) {
        for (int i2 = 16 * h1; i2 <= min(_PB_N - 1, 16 * h1 + 15); i2 += 1) {
          for (int i4 = 16 * w0 - 16 * h0 - 16 * h1; i4 <= min(16 * w0 - 16 * h0 - 16 * h1 + 15, i0 - 1); i4 += 1) {
            A[i0][i2] -= (A[i0][i4] * A[i4][i2]);
          }
        }
      }
    }
  }
  #pragma omp parallel for
  for (int h0 = w0 / 2 + 1; h0 <= min(w0 + 1, (_PB_N - 1) / 16); h0 += 1) {
    for (int h1 = -h0 + (w0 + h0 + 1) / 2; h1 <= w0 - h0; h1 += 1) {
      for (int i0 = 16 * h0; i0 <= min(_PB_N - 1, 16 * h0 + 15); i0 += 1) {
        if (h0 + 2 * h1 >= w0 + 1) {
          for (int i2 = 16 * h1; i2 <= 16 * h1 + 15; i2 += 1) {
            for (int i4 = 16 * w0 - 16 * h0 - 16 * h1; i4 <= 16 * w0 - 16 * h0 - 16 * h1 + 15; i4 += 1) {
              A[i0][i2] -= (A[i0][i4] * A[i4][i2]);
            }
          }
        } else {
          for (int i2 = 8 * w0 - 8 * h0; i2 <= 8 * w0 - 8 * h0 + 15; i2 += 1) {
            for (int i4 = 8 * w0 - 8 * h0; i4 < i2; i4 += 1) {
              A[i0][i2] -= (A[i0][i4] * A[i4][i2]);
            }
            A[i0][i2] /= A[i2][i2];
          }
        }
      }
    }
  }
}
