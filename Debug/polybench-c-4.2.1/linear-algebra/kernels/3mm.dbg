
#######################################################################

#oryginal loop:

#schedule:
{ domain: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_4[i, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NL; S_2[i, j] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL; S_0[i, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ; S_1[i, j, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK; S_3[i, j, k] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM; S_5[i, j, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and 0 <= k < _PB_NJ }", child: { sequence: [ { filter: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i, j]; S_1[i, j, k] }", child: { schedule: "[_PB_NI, _PB_NJ, _PB_NK] -> L_0[{ S_1[i, j, k] -> [(i)]; S_0[i, j] -> [(i)] }]", child: { schedule: "[_PB_NI, _PB_NJ, _PB_NK] -> L_1[{ S_1[i, j, k] -> [(j)]; S_0[i, j] -> [(j)] }]", child: { sequence: [ { filter: "[_PB_NI, _PB_NJ, _PB_NK] -> { S_0[i, j] }" }, { filter: "[_PB_NI, _PB_NJ, _PB_NK] -> { S_1[i, j, k] }", child: { schedule: "[_PB_NI, _PB_NJ, _PB_NK] -> L_2[{ S_1[i, j, k] -> [(k)] }]" } } ] } } } }, { filter: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_2[i, j]; S_3[i, j, k] }", child: { schedule: "[_PB_NJ, _PB_NL, _PB_NM] -> L_3[{ S_2[i, j] -> [(i)]; S_3[i, j, k] -> [(i)] }]", child: { schedule: "[_PB_NJ, _PB_NL, _PB_NM] -> L_4[{ S_2[i, j] -> [(j)]; S_3[i, j, k] -> [(j)] }]", child: { sequence: [ { filter: "[_PB_NJ, _PB_NL, _PB_NM] -> { S_2[i, j] }" }, { filter: "[_PB_NJ, _PB_NL, _PB_NM] -> { S_3[i, j, k] }", child: { schedule: "[_PB_NJ, _PB_NL, _PB_NM] -> L_5[{ S_3[i, j, k] -> [(k)] }]" } } ] } } } }, { filter: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_4[i, j]; S_5[i, j, k] }", child: { schedule: "[_PB_NI, _PB_NL, _PB_NJ] -> L_6[{ S_5[i, j, k] -> [(i)]; S_4[i, j] -> [(i)] }]", child: { schedule: "[_PB_NI, _PB_NL, _PB_NJ] -> L_7[{ S_5[i, j, k] -> [(j)]; S_4[i, j] -> [(j)] }]", child: { sequence: [ { filter: "[_PB_NI, _PB_NL, _PB_NJ] -> { S_4[i, j] }" }, { filter: "[_PB_NI, _PB_NL, _PB_NJ] -> { S_5[i, j, k] }", child: { schedule: "[_PB_NI, _PB_NL, _PB_NJ] -> L_8[{ S_5[i, j, k] -> [(k)] }]" } } ] } } } } ] } }

#domain:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_4[i, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NL; S_2[i, j] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL; S_0[i, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ; S_1[i, j, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK; S_3[i, j, k] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM; S_5[i, j, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and 0 <= k < _PB_NJ }

#schedule map:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i, j] -> [0, i, j, 0, 0]; S_5[i, j, k] -> [2, i, j, 1, k]; S_4[i, j] -> [2, i, j, 0, 0]; S_1[i, j, k] -> [0, i, j, 1, k]; S_3[i, j, k] -> [1, i, j, 1, k]; S_2[i, j] -> [1, i, j, 0, 0] }

#isl schedule:
{ domain: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_4[i, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NL; S_2[i, j] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL; S_0[i, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ; S_1[i, j, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK; S_3[i, j, k] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM; S_5[i, j, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and 0 <= k < _PB_NJ }", child: { sequence: [ { filter: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_4[i, j] }", child: { schedule: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> [{ S_4[i, j] -> [(i)] }, { S_4[i, j] -> [(j)] }]", permutable: 1, coincident: [ 1, 1 ] } }, { filter: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_2[i, j]; S_0[i, j]; S_1[i, j, k]; S_3[i, j, k]; S_5[i, j, k] }", child: { schedule: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> [{ S_2[i, j] -> [(i)]; S_0[i, j] -> [(j)]; S_1[i, j, k] -> [(j)]; S_3[i, j, k] -> [(i)]; S_5[i, j, k] -> [(k)] }]", permutable: 1, coincident: [ 1 ], child: { sequence: [ { filter: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_2[i, j]; S_3[i, j, k] }", child: { schedule: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> [{ S_2[i, j] -> [(j)]; S_3[i, j, k] -> [(j)] }, { S_2[i, j] -> [(0)]; S_3[i, j, k] -> [(k)] }]", permutable: 1, coincident: [ 1, 1 ], child: { sequence: [ { filter: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_2[i, j] }" }, { filter: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_3[i, j, k] }" } ] } } }, { filter: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i, j]; S_1[i, j, k]; S_5[i, j, k] }", child: { schedule: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> [{ S_0[i, j] -> [(i)]; S_1[i, j, k] -> [(i)]; S_5[i, j, k] -> [(i)] }]", permutable: 1, coincident: [ 1 ], child: { sequence: [ { filter: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i, j]; S_1[i, j, k] }", child: { schedule: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> [{ S_0[i, j] -> [(0)]; S_1[i, j, k] -> [(k)] }]", permutable: 1, coincident: [ 1 ], child: { sequence: [ { filter: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i, j] }" }, { filter: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_1[i, j, k] }" } ] } } }, { filter: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_5[i, j, k] }", child: { schedule: "[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> [{ S_5[i, j, k] -> [(j)] }]", permutable: 1, coincident: [ 1 ] } } ] } } } ] } } } ] } }

#isl schedule map:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i, j] -> [1, j, 1, i, 0, 0, 0]; S_1[i, j, k] -> [1, j, 1, i, 0, k, 1]; S_2[i, j] -> [1, i, 0, j, 0, 0, 0]; S_5[i, j, k] -> [1, k, 1, i, 1, j, 0]; S_4[i, j] -> [0, i, j, 0, 0, 0, 0]; S_3[i, j, k] -> [1, i, 0, j, k, 1, 0] }

#writes:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i, j] -> E[i, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ; S_1[i, j, k] -> E[i, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK; S_5[i, j, k] -> G[i, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and 0 <= k < _PB_NJ; S_3[i, j, k] -> F[i, j] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM; S_2[i, j] -> F[i, j] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL; S_4[i, j] -> G[i, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NL }

#reads:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_1[i, j, k] -> A[i, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK; S_1[i, j, k] -> E[i, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK; S_1[i, j, k] -> B[k, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK; S_3[i, j, k] -> C[i, k] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM; S_5[i, j, k] -> G[i, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and 0 <= k < _PB_NJ; S_3[i, j, k] -> D[k, j] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM; S_3[i, j, k] -> F[i, j] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM; S_5[i, j, k] -> E[i, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and 0 <= k < _PB_NJ; S_5[i, j, k] -> F[k, j] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and 0 <= k < _PB_NJ }

#dep_raw:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_4[i, j] -> S_5[i' = i, j' = j, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and 0 <= k < _PB_NJ; S_2[i, j] -> S_5[i', j' = j, k = i] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= i' < _PB_NI; S_2[i, j] -> S_3[i' = i, j' = j, k] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM; S_5[i, j, k] -> S_5[i' = i, j' = j, k'] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and k >= 0 and k < k' < _PB_NJ; S_1[i, j, k] -> S_5[i' = i, j', k' = j] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK and 0 <= j' < _PB_NL; S_3[i, j, k] -> S_3[i' = i, j' = j, k'] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and k >= 0 and k < k' < _PB_NM; S_1[i, j, k] -> S_1[i' = i, j' = j, k'] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and k >= 0 and k < k' < _PB_NK; S_0[i, j] -> S_1[i' = i, j' = j, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK; S_0[i, j] -> S_5[i' = i, j', k = j] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= j' < _PB_NL; S_3[i, j, k] -> S_5[i', j' = j, k' = i] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM and 0 <= i' < _PB_NI }

#dep_waw:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_2[i, j] -> S_3[i' = i, j' = j, k] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM; S_3[i, j, k] -> S_3[i' = i, j' = j, k'] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and k >= 0 and k < k' < _PB_NM; S_0[i, j] -> S_1[i' = i, j' = j, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK; S_5[i, j, k] -> S_5[i' = i, j' = j, k'] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and k >= 0 and k < k' < _PB_NJ; S_4[i, j] -> S_5[i' = i, j' = j, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and 0 <= k < _PB_NJ; S_1[i, j, k] -> S_1[i' = i, j' = j, k'] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and k >= 0 and k < k' < _PB_NK }

#dep_war:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_5[i, j, k] -> S_5[i' = i, j' = j, k'] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and k >= 0 and k < k' < _PB_NJ; S_3[i, j, k] -> S_3[i' = i, j' = j, k'] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and k >= 0 and k < k' < _PB_NM; S_1[i, j, k] -> S_1[i' = i, j' = j, k'] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and k >= 0 and k < k' < _PB_NK }

#relations:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_2[i, j] -> S_3[i' = i, j' = j, k] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM; S_3[i, j, k] -> S_3[i' = i, j' = j, k'] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and k >= 0 and k < k' < _PB_NM; S_2[i, j] -> S_5[i', j' = j, k = i] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= i' < _PB_NI; S_3[i, j, k] -> S_5[i', j' = j, k' = i] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM and 0 <= i' < _PB_NI; S_1[i, j, k] -> S_5[i' = i, j', k' = j] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK and 0 <= j' < _PB_NL; S_0[i, j] -> S_5[i' = i, j', k = j] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= j' < _PB_NL; S_0[i, j] -> S_1[i' = i, j' = j, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK; S_5[i, j, k] -> S_5[i' = i, j' = j, k'] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and k >= 0 and k < k' < _PB_NJ; S_4[i, j] -> S_5[i' = i, j' = j, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and 0 <= k < _PB_NJ; S_1[i, j, k] -> S_1[i' = i, j' = j, k'] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and k >= 0 and k < k' < _PB_NK }

#delta:
{ [i, j = 0, k]; [i = 0, j, k] }

#######################################################################

#######################################################################

#norm schedule map:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_3[i, j, k] -> [1, i, j, 1, k]; S_4[i, j] -> [2, i, j, 0, 0]; S_2[i, j] -> [1, i, j, 0, 0]; S_1[i, j, k] -> [0, i, j, 1, k]; S_0[i, j] -> [0, i, j, 0, 0]; S_5[i, j, k] -> [2, i, j, 1, k] }

#######################################################################

#######################################################################

#normalized loop (0):

#mapper:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_1[i, j, k] -> S_1[i0 = 0, i1 = i, i2 = j, i3 = 1, i4 = k]; S_0[i, j] -> S_0[i0 = 0, i1 = i, i2 = j, i3 = 0, i4 = 0] }

#domain:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_1[i0 = 0, i1, i2, i3 = 1, i4] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ and 0 <= i4 < _PB_NK; S_0[i0 = 0, i1, i2, i3 = 0, i4 = 0] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ }

#schedule map:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_1[i0 = 0, i1, i2, i3 = 1, i4] -> [0, i1, i2, 1, i4]; S_0[i0 = 0, i1, i2, i3 = 0, i4 = 0] -> [0, i1, i2, 0, 0] }

#writes:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i0 = 0, i1, i2, i3 = 0, i4 = 0] -> E[i1, i2] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ; S_1[i0 = 0, i1, i2, i3 = 1, i4] -> E[i1, i2] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ and 0 <= i4 < _PB_NK }

#reads:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_1[i0 = 0, i1, i2, i3 = 1, i4] -> A[i1, i4] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ and 0 <= i4 < _PB_NK; S_1[i0 = 0, i1, i2, i3 = 1, i4] -> E[i1, i2] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ and 0 <= i4 < _PB_NK; S_1[i0 = 0, i1, i2, i3 = 1, i4] -> B[i4, i2] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ and 0 <= i4 < _PB_NK }

#dep_raw:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i0 = 0, i1, i2, i3 = 0, i4 = 0] -> S_1[i0' = 0, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ and 0 <= i4' < _PB_NK; S_1[i0 = 0, i1, i2, i3 = 1, i4] -> S_1[i0' = 0, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ and i4 >= 0 and i4 < i4' < _PB_NK }

#dep_waw:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i0 = 0, i1, i2, i3 = 0, i4 = 0] -> S_1[i0' = 0, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ and 0 <= i4' < _PB_NK; S_1[i0 = 0, i1, i2, i3 = 1, i4] -> S_1[i0' = 0, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ and i4 >= 0 and i4 < i4' < _PB_NK }

#dep_war:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_1[i0 = 0, i1, i2, i3 = 1, i4] -> S_1[i0' = 0, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ and i4 >= 0 and i4 < i4' < _PB_NK }

#relations:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i0 = 0, i1, i2, i3 = 0, i4 = 0] -> S_1[i0' = 0, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ and 0 <= i4' < _PB_NK; S_1[i0 = 0, i1, i2, i3 = 1, i4] -> S_1[i0' = 0, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NJ and i4 >= 0 and i4 < i4' < _PB_NK }

#delta:
{ [i0 = 0, i1 = 0, i2 = 0, i3, i4] : 0 <= i3 <= 1 and i4 > -i3 }

#######################################################################

#######################################################################

#normalized loop (1):

#mapper:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_2[i, j] -> S_2[i0 = 1, i1 = i, i2 = j, i3 = 0, i4 = 0]; S_3[i, j, k] -> S_3[i0 = 1, i1 = i, i2 = j, i3 = 1, i4 = k] }

#domain:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_2[i0 = 1, i1, i2, i3 = 0, i4 = 0] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL; S_3[i0 = 1, i1, i2, i3 = 1, i4] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL and 0 <= i4 < _PB_NM }

#schedule map:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_3[i0 = 1, i1, i2, i3 = 1, i4] -> [1, i1, i2, 1, i4]; S_2[i0 = 1, i1, i2, i3 = 0, i4 = 0] -> [1, i1, i2, 0, 0] }

#writes:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_3[i0 = 1, i1, i2, i3 = 1, i4] -> F[i1, i2] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL and 0 <= i4 < _PB_NM; S_2[i0 = 1, i1, i2, i3 = 0, i4 = 0] -> F[i1, i2] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL }

#reads:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_3[i0 = 1, i1, i2, i3 = 1, i4] -> F[i1, i2] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL and 0 <= i4 < _PB_NM; S_3[i0 = 1, i1, i2, i3 = 1, i4] -> D[i4, i2] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL and 0 <= i4 < _PB_NM; S_3[i0 = 1, i1, i2, i3 = 1, i4] -> C[i1, i4] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL and 0 <= i4 < _PB_NM }

#dep_raw:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_3[i0 = 1, i1, i2, i3 = 1, i4] -> S_3[i0' = 1, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL and i4 >= 0 and i4 < i4' < _PB_NM; S_2[i0 = 1, i1, i2, i3 = 0, i4 = 0] -> S_3[i0' = 1, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL and 0 <= i4' < _PB_NM }

#dep_waw:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_3[i0 = 1, i1, i2, i3 = 1, i4] -> S_3[i0' = 1, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL and i4 >= 0 and i4 < i4' < _PB_NM; S_2[i0 = 1, i1, i2, i3 = 0, i4 = 0] -> S_3[i0' = 1, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL and 0 <= i4' < _PB_NM }

#dep_war:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_3[i0 = 1, i1, i2, i3 = 1, i4] -> S_3[i0' = 1, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL and i4 >= 0 and i4 < i4' < _PB_NM }

#relations:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_2[i0 = 1, i1, i2, i3 = 0, i4 = 0] -> S_3[i0' = 1, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL and 0 <= i4' < _PB_NM; S_3[i0 = 1, i1, i2, i3 = 1, i4] -> S_3[i0' = 1, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NJ and 0 <= i2 < _PB_NL and i4 >= 0 and i4 < i4' < _PB_NM }

#delta:
{ [i0 = 0, i1 = 0, i2 = 0, i3, i4] : 0 <= i3 <= 1 and i4 > -i3 }

#######################################################################

#######################################################################

#normalized loop (2):

#mapper:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_5[i, j, k] -> S_5[i0 = 2, i1 = i, i2 = j, i3 = 1, i4 = k]; S_4[i, j] -> S_4[i0 = 2, i1 = i, i2 = j, i3 = 0, i4 = 0] }

#domain:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_5[i0 = 2, i1, i2, i3 = 1, i4] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL and 0 <= i4 < _PB_NJ; S_4[i0 = 2, i1, i2, i3 = 0, i4 = 0] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL }

#schedule map:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_4[i0 = 2, i1, i2, i3 = 0, i4 = 0] -> [2, i1, i2, 0, 0]; S_5[i0 = 2, i1, i2, i3 = 1, i4] -> [2, i1, i2, 1, i4] }

#writes:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_5[i0 = 2, i1, i2, i3 = 1, i4] -> G[i1, i2] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL and 0 <= i4 < _PB_NJ; S_4[i0 = 2, i1, i2, i3 = 0, i4 = 0] -> G[i1, i2] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL }

#reads:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_5[i0 = 2, i1, i2, i3 = 1, i4] -> G[i1, i2] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL and 0 <= i4 < _PB_NJ; S_5[i0 = 2, i1, i2, i3 = 1, i4] -> E[i1, i4] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL and 0 <= i4 < _PB_NJ; S_5[i0 = 2, i1, i2, i3 = 1, i4] -> F[i4, i2] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL and 0 <= i4 < _PB_NJ }

#dep_raw:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_4[i0 = 2, i1, i2, i3 = 0, i4 = 0] -> S_5[i0' = 2, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL and 0 <= i4' < _PB_NJ; S_5[i0 = 2, i1, i2, i3 = 1, i4] -> S_5[i0' = 2, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL and i4 >= 0 and i4 < i4' < _PB_NJ }

#dep_waw:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_5[i0 = 2, i1, i2, i3 = 1, i4] -> S_5[i0' = 2, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL and i4 >= 0 and i4 < i4' < _PB_NJ; S_4[i0 = 2, i1, i2, i3 = 0, i4 = 0] -> S_5[i0' = 2, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL and 0 <= i4' < _PB_NJ }

#dep_war:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_5[i0 = 2, i1, i2, i3 = 1, i4] -> S_5[i0' = 2, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL and i4 >= 0 and i4 < i4' < _PB_NJ }

#relations:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_5[i0 = 2, i1, i2, i3 = 1, i4] -> S_5[i0' = 2, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL and i4 >= 0 and i4 < i4' < _PB_NJ; S_4[i0 = 2, i1, i2, i3 = 0, i4 = 0] -> S_5[i0' = 2, i1' = i1, i2' = i2, i3' = 1, i4'] : 0 <= i1 < _PB_NI and 0 <= i2 < _PB_NL and 0 <= i4' < _PB_NJ }

#delta:
{ [i0 = 0, i1 = 0, i2 = 0, i3, i4] : 0 <= i3 <= 1 and i4 > -i3 }

#######################################################################

#######################################################################

#normalized loop (0):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 2] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 1] }

#delta:
{ [i0 = 0, i1 = 0, i2 = 0, i3, i4] : 0 <= i3 <= 1 and i4 > -i3 }

#dim [i0]: is order

#dim [i1]: is bounded

#dim [i2]: is bounded

#dim [i3]: is order

#dim [i4]: is parameter, is positive

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 = 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane: { [a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane: { [a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*0 = c1*0 and c2*1 = c1*1 and c2*0 = c1*0 and c2*0 = c1*0 and c2*0 = c1*0 } = {}

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 0, a3 = 1, a4 = 0, a5 = 0] }

#hyperplane: { [a1 = 0, a2 = 0, a3 = 1, a4 = 0, a5 = 0] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*0 = c1*0 and c2*0 = c1*1 and c2*1 = c1*0 and c2*0 = c1*0 and c2*0 = c1*0 } = {}

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a5 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 0, a3 = 0, a4 = 0, a5 = 1] }

#hyperplane: { [a1 = 0, a2 = 0, a3 = 0, a4 = 0, a5 = 1] }

#hyperplane check: { : exists c1, c2, c3 : ( c1!=0 or c2!=0 or c3!=0 ) and c3*0 = c1*0 + c2*0 and c3*0 = c1*1 + c2*0 and c3*0 = c1*0 + c2*1 and c3*0 = c1*0 + c2*0 and c3*1 = c1*0 + c2*0 } = {}

#result: true

#create hyperplanes stop

#create spaces start

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { [i0, i1, i2, i3, i4] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : exists bh0 : 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 0 * i4 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { [i0, i1, i2, i3, i4] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : exists bh1 : 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 + 0 * i4 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 } 

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { [i0, i1, i2, i3, i4] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : exists bh2 : 0 * i0 + 0 * i1 + 0 * i2 + 0 * i3 + 1 * i4 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1 } 

#spaces mapper: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { [i0, i1, i2, i3, i4] -> [h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4 }

#create spaces stop

#create tile scop start

#tile scop mapper: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i0, i1, i2, i3, i4] -> S_0[h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4; S_1[i0, i1, i2, i3, i4] -> S_1[h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4 }

#tile scop delta: { [h0 = 0, h1 = 0, h2, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4] : 0 <= ii3 <= 1 and ii4 >= -15 + 16h2 + 15ii3 and -ii3 < ii4 <= 15 + 16h2 }

#tile scop delta part: { [h0 = 0, h1 = 0, h2, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4] : 0 <= ii3 <= 1 and ii4 >= -15 + 16h2 + 15ii3 and -ii3 < ii4 <= 15 + 16h2 }

#tile delta: { [h0 = 0, h1 = 0, h2] : h2 > 0 }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 2] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 1] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1, a2, a3] : exists b1, b2, b3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and 0*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 0*a2 + 1*a3 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : exists c1, c2, c3 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and c0 = c1 + c2 + c3 and a1 != 0 and a2 != 0 and a3 != 0} * {[d0, b0, c0, a1, a2, a3] : exists b1, b2, b3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and 0*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 0*a2 + 1*a3 > 0 } )

#result: { [d0 = 0, b0 = 3, c0 = -3, a1 = 1, a2 = 1, a3 = 1] }

#wafefront hyperplane: { [a1 = 1, a2 = 1, a3 = 1] }

#calculate wafefront hyperplane stop

#create parallel free schedule start

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_1[i0, i1, i2, i3, i4] -> [0, w0, h0, h1, h2, 0, 0, tw0, i0, i1, i2, i3, i4] : exists  bw0, bh0, bh1, bh2 : 1 = 1 and 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 0 * i4 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 + 0 * i4 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 and 0 * i0 + 0 * i1 + 0 * i2 + 0 * i3 + 1 * i4 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 + 1 * bh2 and tw0 = 0 and w0 = 0 } 

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i0, i1, i2, i3, i4] -> [0, w0, h0, h1, h2, 0, 0, tw0, i0, i1, i2, i3, i4] : exists  bw0, bh0, bh1, bh2 : 1 = 1 and 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 0 * i4 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 + 0 * i4 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 and 0 * i0 + 0 * i1 + 0 * i2 + 0 * i3 + 1 * i4 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 + 1 * bh2 and tw0 = 0 and w0 = 0 } 

#parallel free schedule: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_0[i0, i1, i2, i3, i4] -> [0, w0 = 0, h0, h1, h2, 0, 0, tw0 = 0, i0, i1, i2, i3, i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4; S_1[i0, i1, i2, i3, i4] -> [0, w0 = 0, h0, h1, h2, 0, 0, tw0 = 0, i0, i1, i2, i3, i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4 }

#create parallel free schedule stop

#create code start

#wafefront code: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_1[i, j, k] -> [0, w0 = 0, h0, h1, h2, 0, 0, tw0 = 0, 0, i, j, 1, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j and -15 + k <= 16h2 <= k; S_0[i, j] -> [0, w0 = 0, h0, h1, h2 = 0, 0, 0, tw0 = 0, 0, i, j, 0, 0] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#normalized loop (1):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 2] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 1] }

#delta:
{ [i0 = 0, i1 = 0, i2 = 0, i3, i4] : 0 <= i3 <= 1 and i4 > -i3 }

#dim [i0]: is order

#dim [i1]: is bounded

#dim [i2]: is bounded

#dim [i3]: is order

#dim [i4]: is parameter, is positive

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 = 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane: { [a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane: { [a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*0 = c1*0 and c2*1 = c1*1 and c2*0 = c1*0 and c2*0 = c1*0 and c2*0 = c1*0 } = {}

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 0, a3 = 1, a4 = 0, a5 = 0] }

#hyperplane: { [a1 = 0, a2 = 0, a3 = 1, a4 = 0, a5 = 0] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*0 = c1*0 and c2*0 = c1*1 and c2*1 = c1*0 and c2*0 = c1*0 and c2*0 = c1*0 } = {}

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a5 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 0, a3 = 0, a4 = 0, a5 = 1] }

#hyperplane: { [a1 = 0, a2 = 0, a3 = 0, a4 = 0, a5 = 1] }

#hyperplane check: { : exists c1, c2, c3 : ( c1!=0 or c2!=0 or c3!=0 ) and c3*0 = c1*0 + c2*0 and c3*0 = c1*1 + c2*0 and c3*0 = c1*0 + c2*1 and c3*0 = c1*0 + c2*0 and c3*1 = c1*0 + c2*0 } = {}

#result: true

#create hyperplanes stop

#create spaces start

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { [i0, i1, i2, i3, i4] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : exists bh0 : 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 0 * i4 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { [i0, i1, i2, i3, i4] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : exists bh1 : 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 + 0 * i4 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 } 

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { [i0, i1, i2, i3, i4] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : exists bh2 : 0 * i0 + 0 * i1 + 0 * i2 + 0 * i3 + 1 * i4 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1 } 

#spaces mapper: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { [i0, i1, i2, i3, i4] -> [h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4 }

#create spaces stop

#create tile scop start

#tile scop mapper: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_3[i0, i1, i2, i3, i4] -> S_3[h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4; S_2[i0, i1, i2, i3, i4] -> S_2[h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4 }

#tile scop delta: { [h0 = 0, h1 = 0, h2, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4] : 0 <= ii3 <= 1 and ii4 >= -15 + 16h2 + 15ii3 and -ii3 < ii4 <= 15 + 16h2 }

#tile scop delta part: { [h0 = 0, h1 = 0, h2, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4] : 0 <= ii3 <= 1 and ii4 >= -15 + 16h2 + 15ii3 and -ii3 < ii4 <= 15 + 16h2 }

#tile delta: { [h0 = 0, h1 = 0, h2] : h2 > 0 }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 2] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 1] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1, a2, a3] : exists b1, b2, b3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and 0*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 0*a2 + 1*a3 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : exists c1, c2, c3 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and c0 = c1 + c2 + c3 and a1 != 0 and a2 != 0 and a3 != 0} * {[d0, b0, c0, a1, a2, a3] : exists b1, b2, b3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and 0*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 0*a2 + 1*a3 > 0 } )

#result: { [d0 = 0, b0 = 3, c0 = -3, a1 = 1, a2 = 1, a3 = 1] }

#wafefront hyperplane: { [a1 = 1, a2 = 1, a3 = 1] }

#calculate wafefront hyperplane stop

#create parallel free schedule start

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_3[i0, i1, i2, i3, i4] -> [1, w0, h0, h1, h2, 0, 0, tw0, i0, i1, i2, i3, i4] : exists  bw0, bh0, bh1, bh2 : 1 = 1 and 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 0 * i4 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 + 0 * i4 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 and 0 * i0 + 0 * i1 + 0 * i2 + 0 * i3 + 1 * i4 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 + 1 * bh2 and tw0 = 0 and w0 = 0 } 

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_2[i0, i1, i2, i3, i4] -> [1, w0, h0, h1, h2, 0, 0, tw0, i0, i1, i2, i3, i4] : exists  bw0, bh0, bh1, bh2 : 1 = 1 and 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 0 * i4 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 + 0 * i4 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 and 0 * i0 + 0 * i1 + 0 * i2 + 0 * i3 + 1 * i4 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 + 1 * bh2 and tw0 = 0 and w0 = 0 } 

#parallel free schedule: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_3[i0, i1, i2, i3, i4] -> [1, w0 = 0, h0, h1, h2, 0, 0, tw0 = 0, i0, i1, i2, i3, i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4; S_2[i0, i1, i2, i3, i4] -> [1, w0 = 0, h0, h1, h2, 0, 0, tw0 = 0, i0, i1, i2, i3, i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4 }

#create parallel free schedule stop

#create code start

#wafefront code: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_3[i, j, k] -> [1, w0 = 0, h0, h1, h2, 0, 0, tw0 = 0, 1, i, j, 1, k] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j and -15 + k <= 16h2 <= k; S_2[i, j] -> [1, w0 = 0, h0, h1, h2 = 0, 0, 0, tw0 = 0, 1, i, j, 0, 0] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#normalized loop (2):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 2] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 1] }

#delta:
{ [i0 = 0, i1 = 0, i2 = 0, i3, i4] : 0 <= i3 <= 1 and i4 > -i3 }

#dim [i0]: is order

#dim [i1]: is bounded

#dim [i2]: is bounded

#dim [i3]: is order

#dim [i4]: is parameter, is positive

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 = 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane: { [a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane: { [a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*0 = c1*0 and c2*1 = c1*1 and c2*0 = c1*0 and c2*0 = c1*0 and c2*0 = c1*0 } = {}

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 0, a3 = 1, a4 = 0, a5 = 0] }

#hyperplane: { [a1 = 0, a2 = 0, a3 = 1, a4 = 0, a5 = 0] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*0 = c1*0 and c2*0 = c1*1 and c2*1 = c1*0 and c2*0 = c1*0 and c2*0 = c1*0 } = {}

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a5 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a5 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  or a5 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 0, a3 = 0, a4 = 0, a5 = 1] }

#hyperplane: { [a1 = 0, a2 = 0, a3 = 0, a4 = 0, a5 = 1] }

#hyperplane check: { : exists c1, c2, c3 : ( c1!=0 or c2!=0 or c3!=0 ) and c3*0 = c1*0 + c2*0 and c3*0 = c1*1 + c2*0 and c3*0 = c1*0 + c2*1 and c3*0 = c1*0 + c2*0 and c3*1 = c1*0 + c2*0 } = {}

#result: true

#create hyperplanes stop

#create spaces start

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { [i0, i1, i2, i3, i4] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : exists bh0 : 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 0 * i4 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { [i0, i1, i2, i3, i4] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : exists bh1 : 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 + 0 * i4 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 } 

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { [i0, i1, i2, i3, i4] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : exists bh2 : 0 * i0 + 0 * i1 + 0 * i2 + 0 * i3 + 1 * i4 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1 } 

#spaces mapper: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { [i0, i1, i2, i3, i4] -> [h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4 }

#create spaces stop

#create tile scop start

#tile scop mapper: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_5[i0, i1, i2, i3, i4] -> S_5[h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4; S_4[i0, i1, i2, i3, i4] -> S_4[h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4 }

#tile scop delta: { [h0 = 0, h1 = 0, h2, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4] : 0 <= ii3 <= 1 and ii4 >= -15 + 16h2 + 15ii3 and -ii3 < ii4 <= 15 + 16h2 }

#tile scop delta part: { [h0 = 0, h1 = 0, h2, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4] : 0 <= ii3 <= 1 and ii4 >= -15 + 16h2 + 15ii3 and -ii3 < ii4 <= 15 + 16h2 }

#tile delta: { [h0 = 0, h1 = 0, h2] : h2 > 0 }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 2] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 1] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1, a2, a3] : exists b1, b2, b3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and 0*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 0*a2 + 1*a3 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : exists c1, c2, c3 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and c0 = c1 + c2 + c3 and a1 != 0 and a2 != 0 and a3 != 0} * {[d0, b0, c0, a1, a2, a3] : exists b1, b2, b3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and 0*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 0*a2 + 1*a3 > 0 } )

#result: { [d0 = 0, b0 = 3, c0 = -3, a1 = 1, a2 = 1, a3 = 1] }

#wafefront hyperplane: { [a1 = 1, a2 = 1, a3 = 1] }

#calculate wafefront hyperplane stop

#create parallel free schedule start

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_4[i0, i1, i2, i3, i4] -> [2, w0, h0, h1, h2, 0, 0, tw0, i0, i1, i2, i3, i4] : exists  bw0, bh0, bh1, bh2 : 1 = 1 and 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 0 * i4 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 + 0 * i4 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 and 0 * i0 + 0 * i1 + 0 * i2 + 0 * i3 + 1 * i4 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 + 1 * bh2 and tw0 = 0 and w0 = 0 } 

#part: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_5[i0, i1, i2, i3, i4] -> [2, w0, h0, h1, h2, 0, 0, tw0, i0, i1, i2, i3, i4] : exists  bw0, bh0, bh1, bh2 : 1 = 1 and 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 0 * i4 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 + 0 * i4 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 and 0 * i0 + 0 * i1 + 0 * i2 + 0 * i3 + 1 * i4 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 + 1 * bh2 and tw0 = 0 and w0 = 0 } 

#parallel free schedule: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_5[i0, i1, i2, i3, i4] -> [2, w0 = 0, h0, h1, h2, 0, 0, tw0 = 0, i0, i1, i2, i3, i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4; S_4[i0, i1, i2, i3, i4] -> [2, w0 = 0, h0, h1, h2, 0, 0, tw0 = 0, i0, i1, i2, i3, i4] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 and -15 + i4 <= 16h2 <= i4 }

#create parallel free schedule stop

#create code start

#wafefront code: [_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_4[i, j] -> [2, w0 = 0, h0, h1, h2 = 0, 0, 0, tw0 = 0, 2, i, j, 0, 0] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j; S_5[i, j, k] -> [2, w0 = 0, h0, h1, h2, 0, 0, tw0 = 0, 2, i, j, 1, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and 0 <= k < _PB_NJ and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j and -15 + k <= 16h2 <= k }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#global schedule:
[_PB_NI, _PB_NL, _PB_NJ, _PB_NM, _PB_NK] -> { S_1[i, j, k] -> [0, w0 = 0, h0, h1, h2, 0, 0, tw0 = 0, 0, i, j, 1, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and 0 <= k < _PB_NK and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j and -15 + k <= 16h2 <= k; S_3[i, j, k] -> [1, w0 = 0, h0, h1, h2, 0, 0, tw0 = 0, 1, i, j, 1, k] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and 0 <= k < _PB_NM and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j and -15 + k <= 16h2 <= k; S_2[i, j] -> [1, w0 = 0, h0, h1, h2 = 0, 0, 0, tw0 = 0, 1, i, j, 0, 0] : 0 <= i < _PB_NJ and 0 <= j < _PB_NL and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j; S_0[i, j] -> [0, w0 = 0, h0, h1, h2 = 0, 0, 0, tw0 = 0, 0, i, j, 0, 0] : 0 <= i < _PB_NI and 0 <= j < _PB_NJ and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j; S_4[i, j] -> [2, w0 = 0, h0, h1, h2 = 0, 0, 0, tw0 = 0, 2, i, j, 0, 0] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j; S_5[i, j, k] -> [2, w0 = 0, h0, h1, h2, 0, 0, tw0 = 0, 2, i, j, 1, k] : 0 <= i < _PB_NI and 0 <= j < _PB_NL and 0 <= k < _PB_NJ and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j and -15 + k <= 16h2 <= k }

#######################################################################

#######################################################################

#Does global schedule respects oryginal loop RaW deps? -> True

#Does global schedule respects oryginal loop WaW deps? -> True

#Does global schedule respects oryginal loop WaR deps? -> True

#######################################################################
