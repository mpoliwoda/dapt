
#######################################################################

#oryginal loop:

#schedule:
{ domain: "[_PB_N] -> { S_0[k, i, j] : 0 <= k < _PB_N and 0 <= i < _PB_N and 0 <= j < _PB_N }", child: { schedule: "[_PB_N] -> L_0[{ S_0[k, i, j] -> [(k)] }]", child: { schedule: "[_PB_N] -> L_1[{ S_0[k, i, j] -> [(i)] }]", child: { schedule: "[_PB_N] -> L_2[{ S_0[k, i, j] -> [(j)] }]" } } } }

#domain:
[_PB_N] -> { S_0[k, i, j] : 0 <= k < _PB_N and 0 <= i < _PB_N and 0 <= j < _PB_N }

#schedule map:
[_PB_N] -> { S_0[k, i, j] -> [k, i, j] }

#isl schedule:
{ domain: "[_PB_N] -> { S_0[k, i, j] : 0 <= k < _PB_N and 0 <= i < _PB_N and 0 <= j < _PB_N }", child: { schedule: "[_PB_N] -> [{ S_0[k, i, j] -> [(k)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[_PB_N] -> [{ S_0[k, i, j] -> [(i)] }, { S_0[k, i, j] -> [(j)] }]", permutable: 1, coincident: [ 1, 1 ] } } }

#isl schedule map:
[_PB_N] -> { S_0[k, i, j] -> [k, i, j] }

#writes:
[_PB_N] -> { S_0[k, i, j] -> path[i, j] : 0 <= k < _PB_N and 0 <= i < _PB_N and 0 <= j < _PB_N }

#reads:
[_PB_N] -> { S_0[k, i, j] -> path[i, k] : 0 <= k < _PB_N and 0 <= i < _PB_N and 0 <= j < _PB_N; S_0[k, i, j] -> path[k, j] : 0 <= k < _PB_N and 0 <= i < _PB_N and 0 <= j < _PB_N; S_0[k, i, j] -> path[i, j] : 0 <= k < _PB_N and 0 <= i < _PB_N and 0 <= j < _PB_N }

#dep_raw:
[_PB_N] -> { S_0[k, i, j] -> S_0[k' = j, i' = i, j'] : k >= 0 and 0 <= i < _PB_N and k < j < _PB_N and 0 <= j' < _PB_N; S_0[k, i, j] -> S_0[k', i' = i, j' = j] : k >= 0 and 0 <= i < _PB_N and 0 <= j < _PB_N and k < k' < _PB_N; S_0[k, i, j] -> S_0[k' = i, i', j' = j] : k >= 0 and k < i < _PB_N and 0 <= j < _PB_N and 0 <= i' < _PB_N; S_0[k, i, j = k] -> S_0[k' = k, i' = i, j'] : k >= 0 and 0 <= i < _PB_N and k < j' < _PB_N; S_0[k, i = k, j] -> S_0[k' = k, i', j' = j] : k >= 0 and 0 <= j < _PB_N and k < i' < _PB_N }

#dep_waw:
[_PB_N] -> { S_0[k, i, j] -> S_0[k', i' = i, j' = j] : k >= 0 and 0 <= i < _PB_N and 0 <= j < _PB_N and k < k' < _PB_N }

#dep_war:
[_PB_N] -> { S_0[k, i, j] -> S_0[k', i' = i, j' = k] : k >= 0 and 0 <= i < _PB_N and 0 <= j < _PB_N and k < k' < _PB_N; S_0[k, i, j] -> S_0[k', i' = k, j' = j] : k >= 0 and 0 <= i < _PB_N and 0 <= j < _PB_N and k < k' < _PB_N; S_0[k, i, j] -> S_0[k', i' = i, j' = j] : k >= 0 and 0 <= i < _PB_N and 0 <= j < _PB_N and k < k' < _PB_N; S_0[k, i, j] -> S_0[k' = k, i' = i, j' = k] : k < _PB_N and 0 <= i < _PB_N and 0 <= j < k; S_0[k, i, j] -> S_0[k' = k, i' = k, j' = j] : k < _PB_N and 0 <= i < k and 0 <= j < _PB_N }

#relations:
[_PB_N] -> { S_0[k, i, j] -> S_0[k', i' = i, j' = k] : k >= 0 and 0 <= i < _PB_N and 0 <= j < _PB_N and k < k' < _PB_N; S_0[k, i, j] -> S_0[k' = j, i' = i, j'] : k >= 0 and 0 <= i < _PB_N and k < j < _PB_N and 0 <= j' < _PB_N; S_0[k, i, j] -> S_0[k', i' = k, j' = j] : k >= 0 and 0 <= i < _PB_N and 0 <= j < _PB_N and k < k' < _PB_N; S_0[k, i, j] -> S_0[k', i' = i, j' = j] : k >= 0 and 0 <= i < _PB_N and 0 <= j < _PB_N and k < k' < _PB_N; S_0[k, i, j] -> S_0[k' = i, i', j' = j] : k >= 0 and k < i < _PB_N and 0 <= j < _PB_N and 0 <= i' < _PB_N; S_0[k, i, j] -> S_0[k' = k, i' = i, j' = k] : k < _PB_N and 0 <= i < _PB_N and 0 <= j < k; S_0[k, i, j = k] -> S_0[k' = k, i' = i, j'] : k >= 0 and 0 <= i < _PB_N and k < j' < _PB_N; S_0[k, i, j] -> S_0[k' = k, i' = k, j' = j] : k < _PB_N and 0 <= i < k and 0 <= j < _PB_N; S_0[k, i = k, j] -> S_0[k' = k, i', j' = j] : k >= 0 and 0 <= j < _PB_N and k < i' < _PB_N }

#delta:
{ [k, i, j = 0] : k > 0; [k, i = 0, j] : k > 0; [k = 0, i, j = 0] : i > 0; [k = 0, i = 0, j] : j > 0 }

#######################################################################

#######################################################################

#norm schedule map:
[_PB_N] -> { S_0[k, i, j] -> [k, i, j] }

#######################################################################

#######################################################################

#normalized loop (0):

#mapper:
[_PB_N] -> { S_0[k, i, j] -> S_0[i0 = k, i1 = i, i2 = j] }

#domain:
[_PB_N] -> { S_0[i0, i1, i2] : 0 <= i0 < _PB_N and 0 <= i1 < _PB_N and 0 <= i2 < _PB_N }

#schedule map:
[_PB_N] -> { S_0[i0, i1, i2] -> [i0, i1, i2] }

#writes:
[_PB_N] -> { S_0[i0, i1, i2] -> path[i1, i2] : 0 <= i0 < _PB_N and 0 <= i1 < _PB_N and 0 <= i2 < _PB_N }

#reads:
[_PB_N] -> { S_0[i0, i1, i2] -> path[i1, i0] : 0 <= i0 < _PB_N and 0 <= i1 < _PB_N and 0 <= i2 < _PB_N; S_0[i0, i1, i2] -> path[i0, i2] : 0 <= i0 < _PB_N and 0 <= i1 < _PB_N and 0 <= i2 < _PB_N; S_0[i0, i1, i2] -> path[i1, i2] : 0 <= i0 < _PB_N and 0 <= i1 < _PB_N and 0 <= i2 < _PB_N }

#dep_raw:
[_PB_N] -> { S_0[i0, i1, i2] -> S_0[i0' = i2, i1' = i1, i2'] : i0 >= 0 and 0 <= i1 < _PB_N and i0 < i2 < _PB_N and 0 <= i2' < _PB_N; S_0[i0, i1, i2] -> S_0[i0', i1' = i1, i2' = i2] : i0 >= 0 and 0 <= i1 < _PB_N and 0 <= i2 < _PB_N and i0 < i0' < _PB_N; S_0[i0, i1, i2] -> S_0[i0' = i1, i1', i2' = i2] : i0 >= 0 and i0 < i1 < _PB_N and 0 <= i2 < _PB_N and 0 <= i1' < _PB_N; S_0[i0, i1, i2 = i0] -> S_0[i0' = i0, i1' = i1, i2'] : i0 >= 0 and 0 <= i1 < _PB_N and i0 < i2' < _PB_N; S_0[i0, i1 = i0, i2] -> S_0[i0' = i0, i1', i2' = i2] : i0 >= 0 and 0 <= i2 < _PB_N and i0 < i1' < _PB_N }

#dep_waw:
[_PB_N] -> { S_0[i0, i1, i2] -> S_0[i0', i1' = i1, i2' = i2] : i0 >= 0 and 0 <= i1 < _PB_N and 0 <= i2 < _PB_N and i0 < i0' < _PB_N }

#dep_war:
[_PB_N] -> { S_0[i0, i1, i2] -> S_0[i0', i1' = i1, i2' = i0] : i0 >= 0 and 0 <= i1 < _PB_N and 0 <= i2 < _PB_N and i0 < i0' < _PB_N; S_0[i0, i1, i2] -> S_0[i0', i1' = i0, i2' = i2] : i0 >= 0 and 0 <= i1 < _PB_N and 0 <= i2 < _PB_N and i0 < i0' < _PB_N; S_0[i0, i1, i2] -> S_0[i0', i1' = i1, i2' = i2] : i0 >= 0 and 0 <= i1 < _PB_N and 0 <= i2 < _PB_N and i0 < i0' < _PB_N; S_0[i0, i1, i2] -> S_0[i0' = i0, i1' = i1, i2' = i0] : i0 < _PB_N and 0 <= i1 < _PB_N and 0 <= i2 < i0; S_0[i0, i1, i2] -> S_0[i0' = i0, i1' = i0, i2' = i2] : i0 < _PB_N and 0 <= i1 < i0 and 0 <= i2 < _PB_N }

#relations:
[_PB_N] -> { S_0[i0, i1, i2] -> S_0[i0', i1' = i1, i2' = i0] : i0 >= 0 and 0 <= i1 < _PB_N and 0 <= i2 < _PB_N and i0 < i0' < _PB_N; S_0[i0, i1, i2] -> S_0[i0' = i2, i1' = i1, i2'] : i0 >= 0 and 0 <= i1 < _PB_N and i0 < i2 < _PB_N and 0 <= i2' < _PB_N; S_0[i0, i1, i2] -> S_0[i0', i1' = i0, i2' = i2] : i0 >= 0 and 0 <= i1 < _PB_N and 0 <= i2 < _PB_N and i0 < i0' < _PB_N; S_0[i0, i1, i2] -> S_0[i0', i1' = i1, i2' = i2] : i0 >= 0 and 0 <= i1 < _PB_N and 0 <= i2 < _PB_N and i0 < i0' < _PB_N; S_0[i0, i1, i2] -> S_0[i0' = i1, i1', i2' = i2] : i0 >= 0 and i0 < i1 < _PB_N and 0 <= i2 < _PB_N and 0 <= i1' < _PB_N; S_0[i0, i1, i2] -> S_0[i0' = i0, i1' = i1, i2' = i0] : i0 < _PB_N and 0 <= i1 < _PB_N and 0 <= i2 < i0; S_0[i0, i1, i2 = i0] -> S_0[i0' = i0, i1' = i1, i2'] : i0 >= 0 and 0 <= i1 < _PB_N and i0 < i2' < _PB_N; S_0[i0, i1, i2] -> S_0[i0' = i0, i1' = i0, i2' = i2] : i0 < _PB_N and 0 <= i1 < i0 and 0 <= i2 < _PB_N; S_0[i0, i1 = i0, i2] -> S_0[i0' = i0, i1', i2' = i2] : i0 >= 0 and 0 <= i2 < _PB_N and i0 < i1' < _PB_N }

#delta:
{ [i0, i1, i2 = 0] : i0 > 0; [i0, i1 = 0, i2] : i0 > 0; [i0 = 0, i1, i2 = 0] : i1 > 0; [i0 = 0, i1 = 0, i2] : i2 > 0 }

#######################################################################

#######################################################################

#normalized loop (0):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 2, i1 = 0, i2 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0] }

#distance vector set : { [i0 = 2, i1 = 0, i2 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 2] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1] }

#delta:
{ [i0, i1, i2 = 0] : i0 > 0; [i0, i1 = 0, i2] : i0 > 0; [i0 = 0, i1, i2 = 0] : i1 > 0; [i0 = 0, i1 = 0, i2] : i2 > 0 }

#dim [i0]: is parameter, is positive

#dim [i1]: is parameter, is negative, is positive

#dim [i2]: is parameter, is negative, is positive

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and a2 <= 0  and a2 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 >= 0 and 0*a1 + 2*a2 + 0*a3 >= 0 and 0*a1 + 1*a2 + 0*a3 >= 0 and 2*a1 + 0*a2 + 0*a3 >= 0 and 1*a1 + 0*a2 + 0*a3 >= 0 and 0*a1 + 0*a2 + 1*a3 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and a2 <= 0  and a2 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 = 0 and 0*a1 + 2*a2 + 0*a3 = 0 and 0*a1 + 1*a2 + 0*a3 = 0 and 2*a1 + 0*a2 + 0*a3 = 0 and 1*a1 + 0*a2 + 0*a3 = 0 and 0*a1 + 0*a2 + 1*a3 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and a2 <= 0  and a2 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 = 0 and 0*a1 + 2*a2 + 0*a3 = 0 and 0*a1 + 1*a2 + 0*a3 = 0 and 2*a1 + 0*a2 + 0*a3 = 0 and 1*a1 + 0*a2 + 0*a3 = 0 and 0*a1 + 0*a2 + 1*a3 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3] : false }

#hyperplane: { [a1, a2, a3] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and a2 <= 0  and a2 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 = 0 and 0*a1 + 2*a2 + 0*a3 = 0 and 0*a1 + 1*a2 + 0*a3 = 0 and 2*a1 + 0*a2 + 0*a3 = 0 and 1*a1 + 0*a2 + 0*a3 = 0 and 0*a1 + 0*a2 + 1*a3 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3] : false }

#hyperplane: { [a1, a2, a3] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and a2 <= 0  and a2 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 = 0 and 0*a1 + 2*a2 + 0*a3 = 0 and 0*a1 + 1*a2 + 0*a3 = 0 and 2*a1 + 0*a2 + 0*a3 = 0 and 1*a1 + 0*a2 + 0*a3 = 0 and 0*a1 + 0*a2 + 1*a3 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3] : false }

#hyperplane: { [a1, a2, a3] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and a2 <= 0  and a2 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 >= 0 and 0*a1 + 2*a2 + 0*a3 >= 0 and 0*a1 + 1*a2 + 0*a3 >= 0 and 2*a1 + 0*a2 + 0*a3 >= 0 and 1*a1 + 0*a2 + 0*a3 >= 0 and 0*a1 + 0*a2 + 1*a3 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -3, a1 = 1, a2 = 0, a3 = 0] }

#hyperplane: { [a1 = 1, a2 = 0, a3 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and a2 <= 0  and a2 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 >= 0 and 0*a1 + 2*a2 + 0*a3 >= 0 and 0*a1 + 1*a2 + 0*a3 >= 0 and 2*a1 + 0*a2 + 0*a3 >= 0 and 1*a1 + 0*a2 + 0*a3 >= 0 and 0*a1 + 0*a2 + 1*a3 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3] : false }

#hyperplane: { [a1, a2, a3] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 >= 0  and a2 <= 0  and a2 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 >= 0 and 0*a1 + 2*a2 + 0*a3 >= 0 and 0*a1 + 1*a2 + 0*a3 >= 0 and 2*a1 + 0*a2 + 0*a3 >= 0 and 1*a1 + 0*a2 + 0*a3 >= 0 and 0*a1 + 0*a2 + 1*a3 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3] : false }

#hyperplane: { [a1, a2, a3] : false }

#hyperplane check: hyperplane is empty 

#result: false

#create hyperplanes stop

#create spaces start

#part: [_PB_N] -> { [i0, i1, i2] -> [  h0, ii0 = i0, ii1 = i1, ii2 = i2] : exists bh0 : 1 * i0 + 0 * i1 + 0 * i2 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#spaces mapper: [_PB_N] -> { [i0, i1, i2] -> [h0, ii0 = i0, ii1 = i1, ii2 = i2] : -15 + i0 <= 16h0 <= i0 }

#create spaces stop

#create tile scop start

#tile scop mapper: [_PB_N] -> { S_0[i0, i1, i2] -> S_0[h0, ii0 = i0, ii1 = i1, ii2 = i2] : -15 + i0 <= 16h0 <= i0 }

#tile scop delta: { [h0, ii0, ii1, ii2 = 0] : ii0 >= -15 + 16h0 and 0 < ii0 <= 15 + 16h0; [h0, ii0, ii1 = 0, ii2] : ii0 >= -15 + 16h0 and 0 < ii0 <= 15 + 16h0; [h0 = 0, ii0 = 0, ii1, ii2 = 0] : ii1 > 0; [h0 = 0, ii0 = 0, ii1 = 0, ii2] : ii2 > 0 }

#tile scop delta part: { [h0, ii0, ii1 = 0, ii2] : ii0 >= -15 + 16h0 and 0 < ii0 <= 15 + 16h0 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1, ii2 = 0] : ii1 > 0 }

#tile scop delta part: { [h0, ii0, ii1, ii2 = 0] : ii0 >= -15 + 16h0 and 0 < ii0 <= 15 + 16h0 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2] : ii2 > 0 }

#tile delta: { [h0] : h0 > 0 }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 2] }

#tile relatiions distance vector set: { [h0 = 1] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and 2*a1 > 0 and 1*a1 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1] : exists c1 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and c0 = c1 and a1 != 0} * {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and 2*a1 > 0 and 1*a1 > 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -1, a1 = 1] }

#wafefront hyperplane: { [a1 = 1] }

#calculate wafefront hyperplane stop

#######################################################################

#continue search for hyperplanes

#######################################################################

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 2] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1] }

#delta:
{ [i0 = 0, i1, i2 = 0] : i1 > 0; [i0 = 0, i1 = 0, i2] : i2 > 0 }

#dim [i0]: is wavefront order

#dim [i1]: is parameter, is positive

#dim [i2]: is parameter, is positive

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 = 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 >= 0 and 0*a1 + 2*a2 + 0*a3 >= 0 and 0*a1 + 1*a2 + 0*a3 >= 0 and 0*a1 + 0*a2 + 1*a3 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 = 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 = 0 and 0*a1 + 2*a2 + 0*a3 = 0 and 0*a1 + 1*a2 + 0*a3 = 0 and 0*a1 + 0*a2 + 1*a3 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 = 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 = 0 and 0*a1 + 2*a2 + 0*a3 = 0 and 0*a1 + 1*a2 + 0*a3 = 0 and 0*a1 + 0*a2 + 1*a3 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3] : false }

#hyperplane: { [a1, a2, a3] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 = 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 = 0 and 0*a1 + 2*a2 + 0*a3 = 0 and 0*a1 + 1*a2 + 0*a3 = 0 and 0*a1 + 0*a2 + 1*a3 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3] : false }

#hyperplane: { [a1, a2, a3] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 = 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 >= 0 and 0*a1 + 2*a2 + 0*a3 >= 0 and 0*a1 + 1*a2 + 0*a3 >= 0 and 0*a1 + 0*a2 + 1*a3 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -3, a1 = 0, a2 = 1, a3 = 0] }

#hyperplane: { [a1 = 0, a2 = 1, a3 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and a1 = 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a2 != 0  or a3 != 0  )  and 0*a1 + 0*a2 + 2*a3 >= 0 and 0*a1 + 2*a2 + 0*a3 >= 0 and 0*a1 + 1*a2 + 0*a3 >= 0 and 0*a1 + 0*a2 + 1*a3 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -3, a1 = 0, a2 = 0, a3 = 1] }

#hyperplane: { [a1 = 0, a2 = 0, a3 = 1] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*0 = c1*0 and c2*0 = c1*1 and c2*1 = c1*0 } = {}

#result: true

#create hyperplanes stop

#create spaces start

#part: [_PB_N] -> { [i0, i1, i2] -> [  ii0 = i0, h0, h1, ii1 = i1, ii2 = i2] : exists bh0 : 0 * i0 + 1 * i1 + 0 * i2 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#part: [_PB_N] -> { [i0, i1, i2] -> [  ii0 = i0, h0, h1, ii1 = i1, ii2 = i2] : exists bh1 : 0 * i0 + 0 * i1 + 1 * i2 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 } 

#spaces mapper: [_PB_N] -> { [i0, i1, i2] -> [ii0 = i0, h0, h1, ii1 = i1, ii2 = i2] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 }

#create spaces stop

#create tile scop start

#tile scop mapper: [_PB_N] -> { S_0[i0, i1, i2] -> S_0[ii0 = i0, h0, h1, ii1 = i1, ii2 = i2] : -15 + i1 <= 16h0 <= i1 and -15 + i2 <= 16h1 <= i2 }

#tile scop delta: { [ii0, h0, h1 = 0, ii1, ii2 = 0] : ii0 > 0 and -15 + 16h0 <= ii1 <= 15 + 16h0; [ii0, h0 = 0, h1, ii1 = 0, ii2] : ii0 > 0 and -15 + 16h1 <= ii2 <= 15 + 16h1; [ii0 = 0, h0, h1 = 0, ii1, ii2 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0; [ii0 = 0, h0 = 0, h1, ii1 = 0, ii2] : ii2 >= -15 + 16h1 and 0 < ii2 <= 15 + 16h1 }

#tile scop delta part: { [ii0, h0, h1, ii1, ii2] : false }

#tile scop delta part: { [ii0 = 0, h0, h1 = 0, ii1, ii2 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 }

#tile scop delta part: { [ii0, h0, h1, ii1, ii2] : false }

#tile scop delta part: { [ii0 = 0, h0 = 0, h1, ii1 = 0, ii2] : ii2 >= -15 + 16h1 and 0 < ii2 <= 15 + 16h1 }

#tile delta: { [h0, h1 = 0] : h0 > 0; [h0 = 0, h1] : h1 > 0 }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 2, h1 = 0] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 2] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 1] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1, a2] : exists b1, b2 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and b0 > 0 and b0 = b1 + b2 and 0*a1 + 2*a2 > 0 and 2*a1 + 0*a2 > 0 and 1*a1 + 0*a2 > 0 and 0*a1 + 1*a2 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1, a2] : exists c1, c2 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and c0 = c1 + c2 and a1 != 0 and a2 != 0} * {[d0, b0, c0, a1, a2] : exists b1, b2 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and b0 > 0 and b0 = b1 + b2 and 0*a1 + 2*a2 > 0 and 2*a1 + 0*a2 > 0 and 1*a1 + 0*a2 > 0 and 0*a1 + 1*a2 > 0 } )

#result: { [d0 = 0, b0 = 2, c0 = -2, a1 = 1, a2 = 1] }

#wafefront hyperplane: { [a1 = 1, a2 = 1] }

#calculate wafefront hyperplane stop

#create wafefront schedule start

#part: [_PB_N] -> { S_0[i0, i1, i2] -> [0, i0, w0, h0, h1, 0, tw0, i1, i2] : exists  bw0, bh0, bh1 : 1 = 1 and 0 * i0 + 1 * i1 + 0 * i2 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 0 * i0 + 0 * i1 + 1 * i2 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 and w0 = 1 * h0 + 1 * h1 and tw0 = 0 } 

#wafefront schedule: [_PB_N] -> { S_0[i0, i1, i2] -> [0, i0, w0, h0, h1 = w0 - h0, 0, tw0 = 0, i1, i2] : 16h0 >= -15 + i1 and -i2 + 16w0 <= 16h0 <= 15 - i2 + 16w0 and 16h0 <= i1 }

#create wafefront schedule stop

#create code start

#wafefront code: [_PB_N] -> { S_0[k, i, j] -> [0, k, w0, h0, h1 = w0 - h0, 0, tw0 = 0, i, j] : 0 <= k < _PB_N and 0 <= i < _PB_N and 0 <= j < _PB_N and 16h0 >= -15 + i and -j + 16w0 <= 16h0 <= 15 - j + 16w0 and 16h0 <= i }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#global schedule:
[_PB_N] -> { S_0[k, i, j] -> [0, k, w0, h0, h1 = w0 - h0, 0, tw0 = 0, i, j] : 0 <= k < _PB_N and 0 <= i < _PB_N and 0 <= j < _PB_N and 16h0 >= -15 + i and -j + 16w0 <= 16h0 <= 15 - j + 16w0 and 16h0 <= i }

#######################################################################

#######################################################################

#Does global schedule respects oryginal loop RaW deps? -> True

#Does global schedule respects oryginal loop WaW deps? -> True

#Does global schedule respects oryginal loop WaR deps? -> True

#######################################################################
