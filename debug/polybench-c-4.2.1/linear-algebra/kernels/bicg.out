
//dapt code:
#define min(x,y)    ((x) < (y) ? (x) : (y))
#define max(x,y)    ((x) > (y) ? (x) : (y))
#define floord(n,d) (((n)<0) ? -((-(n)+(d)-1)/(d)) : (n)/(d))

#pragma omp parallel for
for (int ph0 = 0; ph0 <= floord(_PB_M - 1, 16); ph0 += 1) {
  for (int i1 = 16 * ph0; i1 <= min(_PB_M - 1, 16 * ph0 + 15); i1 += 1) {
    s[i1] = 0;
  }
}
{
  for (int w0 = 0; w0 <= floord(_PB_N + _PB_M - 2, 16); w0 += 1) {
    #pragma omp parallel for
    for (int h0 = max(0, w0 + floord(-_PB_M, 16) + 1); h0 <= min(w0, floord(_PB_N - 1, 16)); h0 += 1) {
      for (int i1 = 16 * h0; i1 <= min(_PB_N - 1, 16 * h0 + 15); i1 += 1) {
        if (h0 == w0) {
          q[i1] = SCALAR_VAL(0.0);
        }
        for (int i3 = 16 * w0 - 16 * h0; i3 <= min(_PB_M - 1, 16 * w0 - 16 * h0 + 15); i3 += 1) {
          s[i3] = (s[i3] + (r[i1] * A[i1][i3]));
          q[i1] = (q[i1] + (A[i1][i3] * p[i3]));
        }
      }
    }
  }
  if (_PB_M <= 0) {
    for (int w0 = 0; w0 <= floord(_PB_N - 1, 16); w0 += 1) {
      for (int i1 = 16 * w0; i1 <= min(_PB_N - 1, 16 * w0 + 15); i1 += 1) {
        q[i1] = SCALAR_VAL(0.0);
      }
    }
  }
}
