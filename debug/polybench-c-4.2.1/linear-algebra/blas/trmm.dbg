
#######################################################################

#oryginal loop:

#schedule:
{ domain: "[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] : i >= 0 and 0 <= j < _PB_N and i < k < _PB_M; S_1[i, j] : 0 <= i < _PB_M and 0 <= j < _PB_N }", child: { schedule: "[_PB_M, _PB_N] -> L_0[{ S_1[i, j] -> [(i)]; S_0[i, j, k] -> [(i)] }]", child: { schedule: "[_PB_M, _PB_N] -> L_1[{ S_1[i, j] -> [(j)]; S_0[i, j, k] -> [(j)] }]", child: { sequence: [ { filter: "[_PB_M, _PB_N] -> { S_0[i, j, k] }", child: { schedule: "[_PB_M, _PB_N] -> L_2[{ S_0[i, j, k] -> [(k)] }]" } }, { filter: "[_PB_M, _PB_N] -> { S_1[i, j] }" } ] } } } }

#domain:
[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] : i >= 0 and 0 <= j < _PB_N and i < k < _PB_M; S_1[i, j] : 0 <= i < _PB_M and 0 <= j < _PB_N }

#schedule map:
[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] -> [i, j, 0, k]; S_1[i, j] -> [i, j, 1, 0] }

#isl schedule:
{ domain: "[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] : i >= 0 and 0 <= j < _PB_N and i < k < _PB_M; S_1[i, j] : 0 <= i < _PB_M and 0 <= j < _PB_N }", child: { sequence: [ { filter: "[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] }", child: { schedule: "[_PB_M, _PB_N, alpha] -> [{ S_0[i, j, k] -> [(j)] }, { S_0[i, j, k] -> [(i)] }, { S_0[i, j, k] -> [(k)] }]", permutable: 1, coincident: [ 1, 1, 1 ] } }, { filter: "[_PB_M, _PB_N, alpha] -> { S_1[i, j] }", child: { schedule: "[_PB_M, _PB_N, alpha] -> [{ S_1[i, j] -> [(i)] }, { S_1[i, j] -> [(j)] }]", permutable: 1, coincident: [ 1, 1 ] } } ] } }

#isl schedule map:
[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] -> [0, j, i, k]; S_1[i, j] -> [1, i, j, 0] }

#writes:
[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] -> B[i, j] : i >= 0 and 0 <= j < _PB_N and i < k < _PB_M; S_1[i, j] -> B[i, j] : 0 <= i < _PB_M and 0 <= j < _PB_N }

#reads:
[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] -> B[i, j] : i >= 0 and 0 <= j < _PB_N and i < k < _PB_M; S_0[i, j, k] -> B[k, j] : i >= 0 and 0 <= j < _PB_N and k > i and 0 <= k < _PB_M; S_1[i, j] -> B[i, j] : 0 <= i < _PB_M and 0 <= j < _PB_N; S_0[i, j, k] -> A[k, i] : i >= 0 and 0 <= j < _PB_N and k > i and 0 <= k < _PB_M }

#dep_raw:
[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] -> S_1[i' = i, j' = j] : i >= 0 and 0 <= j < _PB_N and i < k < _PB_M; S_0[i, j, k] -> S_0[i' = i, j' = j, k'] : i >= 0 and 0 <= j < _PB_N and k > i and k < k' < _PB_M }

#dep_waw:
[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] -> S_1[i' = i, j' = j] : i >= 0 and 0 <= j < _PB_N and i < k < _PB_M; S_0[i, j, k] -> S_0[i' = i, j' = j, k'] : i >= 0 and 0 <= j < _PB_N and k > i and k < k' < _PB_M }

#dep_war:
[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] -> S_1[i' = i, j' = j] : i >= 0 and 0 <= j < _PB_N and i < k < _PB_M; S_0[i, j, k] -> S_1[i' = k, j' = j] : i >= 0 and 0 <= j < _PB_N and i < k < _PB_M; S_0[i, j, k] -> S_0[i' = i, j' = j, k'] : i >= 0 and 0 <= j < _PB_N and k > i and k < k' < _PB_M; S_0[i, j, k] -> S_0[i' = k, j' = j, k'] : i >= 0 and 0 <= j < _PB_N and k > i and k < k' < _PB_M }

#relations:
[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] -> S_1[i' = i, j' = j] : i >= 0 and 0 <= j < _PB_N and i < k < _PB_M; S_0[i, j, k] -> S_1[i' = k, j' = j] : i >= 0 and 0 <= j < _PB_N and i < k < _PB_M; S_0[i, j, k] -> S_0[i' = i, j' = j, k'] : i >= 0 and 0 <= j < _PB_N and k > i and k < k' < _PB_M; S_0[i, j, k] -> S_0[i' = k, j' = j, k'] : i >= 0 and 0 <= j < _PB_N and k > i and k < k' < _PB_M }

#delta:
{ [i, j = 0, k] : i >= 0 and k > 0 }

#######################################################################

#######################################################################

#norm schedule map:
[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] -> [i, j, 0, k]; S_1[i, j] -> [i, j, 1, 0] }

#######################################################################

#######################################################################

#normalized loop (0):

#mapper:
[_PB_M, _PB_N, alpha] -> { S_0[i, j, k] -> S_0[i0 = i, i1 = j, i2 = 0, i3 = k]; S_1[i, j] -> S_1[i0 = i, i1 = j, i2 = 1, i3 = _PB_M] }

#domain:
[_PB_M, _PB_N, alpha] -> { S_1[i0, i1, i2 = 1, i3 = _PB_M] : 0 <= i0 < _PB_M and 0 <= i1 < _PB_N; S_0[i0, i1, i2 = 0, i3] : i0 >= 0 and 0 <= i1 < _PB_N and i0 < i3 < _PB_M }

#schedule map:
[_PB_M, _PB_N, alpha] -> { S_1[i0, i1, i2 = 1, i3 = _PB_M] -> [i0, i1, 1, 0]; S_0[i0, i1, i2 = 0, i3] -> [i0, i1, 0, i3] }

#writes:
[_PB_M, _PB_N, alpha] -> { S_1[i0, i1, i2 = 1, i3 = _PB_M] -> B[i0, i1] : 0 <= i0 < _PB_M and 0 <= i1 < _PB_N; S_0[i0, i1, i2 = 0, i3] -> B[i0, i1] : i0 >= 0 and 0 <= i1 < _PB_N and i0 < i3 < _PB_M }

#reads:
[_PB_M, _PB_N, alpha] -> { S_1[i0, i1, i2 = 1, i3 = _PB_M] -> B[i0, i1] : 0 <= i0 < _PB_M and 0 <= i1 < _PB_N; S_0[i0, i1, i2 = 0, i3] -> B[i0, i1] : i0 >= 0 and 0 <= i1 < _PB_N and i0 < i3 < _PB_M; S_0[i0, i1, i2 = 0, i3] -> B[i3, i1] : i0 >= 0 and 0 <= i1 < _PB_N and i3 > i0 and 0 <= i3 < _PB_M; S_0[i0, i1, i2 = 0, i3] -> A[i3, i0] : i0 >= 0 and 0 <= i1 < _PB_N and i3 > i0 and 0 <= i3 < _PB_M }

#dep_raw:
[_PB_M, _PB_N, alpha] -> { S_0[i0, i1, i2 = 0, i3] -> S_0[i0' = i0, i1' = i1, i2' = 0, i3'] : i0 >= 0 and 0 <= i1 < _PB_N and i3 > i0 and i3 < i3' < _PB_M; S_0[i0, i1, i2 = 0, i3] -> S_1[i0' = i0, i1' = i1, i2' = 1, i3' = _PB_M] : i0 >= 0 and 0 <= i1 < _PB_N and i0 < i3 < _PB_M }

#dep_waw:
[_PB_M, _PB_N, alpha] -> { S_0[i0, i1, i2 = 0, i3] -> S_0[i0' = i0, i1' = i1, i2' = 0, i3'] : i0 >= 0 and 0 <= i1 < _PB_N and i3 > i0 and i3 < i3' < _PB_M; S_0[i0, i1, i2 = 0, i3] -> S_1[i0' = i0, i1' = i1, i2' = 1, i3' = _PB_M] : i0 >= 0 and 0 <= i1 < _PB_N and i0 < i3 < _PB_M }

#dep_war:
[_PB_M, _PB_N, alpha] -> { S_0[i0, i1, i2 = 0, i3] -> S_0[i0' = i0, i1' = i1, i2' = 0, i3'] : i0 >= 0 and 0 <= i1 < _PB_N and i3 > i0 and i3 < i3' < _PB_M; S_0[i0, i1, i2 = 0, i3] -> S_0[i0' = i3, i1' = i1, i2' = 0, i3'] : i0 >= 0 and 0 <= i1 < _PB_N and i3 > i0 and i3 < i3' < _PB_M; S_0[i0, i1, i2 = 0, i3] -> S_1[i0' = i0, i1' = i1, i2' = 1, i3' = _PB_M] : i0 >= 0 and 0 <= i1 < _PB_N and i0 < i3 < _PB_M; S_0[i0, i1, i2 = 0, i3] -> S_1[i0' = i3, i1' = i1, i2' = 1, i3' = _PB_M] : i0 >= 0 and 0 <= i1 < _PB_N and i0 < i3 < _PB_M }

#relations:
[_PB_M, _PB_N, alpha] -> { S_0[i0, i1, i2 = 0, i3] -> S_0[i0' = i0, i1' = i1, i2' = 0, i3'] : i0 >= 0 and 0 <= i1 < _PB_N and i3 > i0 and i3 < i3' < _PB_M; S_0[i0, i1, i2 = 0, i3] -> S_0[i0' = i3, i1' = i1, i2' = 0, i3'] : i0 >= 0 and 0 <= i1 < _PB_N and i3 > i0 and i3 < i3' < _PB_M; S_0[i0, i1, i2 = 0, i3] -> S_1[i0' = i0, i1' = i1, i2' = 1, i3' = _PB_M] : i0 >= 0 and 0 <= i1 < _PB_N and i0 < i3 < _PB_M; S_0[i0, i1, i2 = 0, i3] -> S_1[i0' = i3, i1' = i1, i2' = 1, i3' = _PB_M] : i0 >= 0 and 0 <= i1 < _PB_N and i0 < i3 < _PB_M }

#delta:
{ [i0, i1 = 0, i2, i3] : i0 >= 0 and 0 <= i2 <= 1 and i3 > 0 }

#######################################################################

#######################################################################

#normalized loop (0):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 1, i1 = 0, i2 = 1, i3 = 2] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 1, i3 = 1] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0, i3 = 2] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0, i3 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1, i3 = 2] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1, i3 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1] }

#delta:
{ [i0, i1 = 0, i2, i3] : i0 >= 0 and 0 <= i2 <= 1 and i3 > 0 }

#dim [i0]: is parameter, is positive

#dim [i1]: is bounded

#dim [i2]: is order

#dim [i3]: is parameter, is positive

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a4 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a4 != 0  )  and 1*a1 + 0*a2 + 1*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a4 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a4 != 0  )  and 1*a1 + 0*a2 + 1*a3 + 2*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 2*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a4 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a4 != 0  )  and 1*a1 + 0*a2 + 1*a3 + 2*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 2*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4] : false }

#hyperplane: { [a1, a2, a3, a4] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a4 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a4 != 0  )  and 1*a1 + 0*a2 + 1*a3 + 2*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 2*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 = 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -4, a1 = 0, a2 = 1, a3 = 0, a4 = 0] }

#hyperplane: { [a1 = 0, a2 = 1, a3 = 0, a4 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a4 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a4 != 0  )  and 1*a1 + 0*a2 + 1*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -4, a1 = 1, a2 = 0, a3 = 0, a4 = 0] }

#hyperplane: { [a1 = 1, a2 = 0, a3 = 0, a4 = 0] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*1 = c1*0 and c2*0 = c1*1 and c2*0 = c1*0 and c2*0 = c1*0 } = {}

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a4 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a4 != 0  )  and 1*a1 + 0*a2 + 1*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -4, a1 = 0, a2 = 1, a3 = 0, a4 = 0] }

#hyperplane: { [a1 = 0, a2 = 1, a3 = 0, a4 = 0] }

#hyperplane check: { : exists c1, c2, c3 : ( c1!=0 or c2!=0 or c3!=0 ) and c3*0 = c1*0 + c2*1 and c3*1 = c1*1 + c2*0 and c3*0 = c1*0 + c2*0 and c3*0 = c1*0 + c2*0 } = {}

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a4 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a4 != 0  )  and 1*a1 + 0*a2 + 1*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 2*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -4, a1 = 0, a2 = 0, a3 = 0, a4 = 1] }

#hyperplane: { [a1 = 0, a2 = 0, a3 = 0, a4 = 1] }

#hyperplane check: { : exists c1, c2, c3 : ( c1!=0 or c2!=0 or c3!=0 ) and c3*0 = c1*0 + c2*1 and c3*0 = c1*1 + c2*0 and c3*0 = c1*0 + c2*0 and c3*1 = c1*0 + c2*0 } = {}

#result: true

#create hyperplanes stop

#create spaces start

#part: [_PB_M, _PB_N, alpha] -> { [i0, i1, i2, i3] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : exists bh0 : 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#part: [_PB_M, _PB_N, alpha] -> { [i0, i1, i2, i3] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : exists bh1 : 1 * i0 + 0 * i1 + 0 * i2 + 0 * i3 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 } 

#part: [_PB_M, _PB_N, alpha] -> { [i0, i1, i2, i3] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : exists bh2 : 0 * i0 + 0 * i1 + 0 * i2 + 1 * i3 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1 } 

#spaces mapper: [_PB_M, _PB_N, alpha] -> { [i0, i1, i2, i3] -> [h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i1 <= 16h0 <= i1 and -15 + i0 <= 16h1 <= i0 and -15 + i3 <= 16h2 <= i3 }

#create spaces stop

#create tile scop start

#tile scop mapper: [_PB_M, _PB_N, alpha] -> { S_1[i0, i1, i2, i3] -> S_1[h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i1 <= 16h0 <= i1 and -15 + i0 <= 16h1 <= i0 and -15 + i3 <= 16h2 <= i3; S_0[i0, i1, i2, i3] -> S_0[h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i1 <= 16h0 <= i1 and -15 + i0 <= 16h1 <= i0 and -15 + i3 <= 16h2 <= i3 }

#tile scop delta: { [h0 = 0, h1, h2, ii0, ii1 = 0, ii2, ii3] : ii0 >= -15 + 16h1 and 0 <= ii0 <= 15 + 16h1 and 0 <= ii2 <= 1 and ii3 >= -15 + 16h1 + 16h2 - ii0 and ii3 >= -15 + 16h2 and 0 < ii3 <= 15 + 16h2 and ii3 <= 15 + 16h1 + 16h2 - ii0 }

#tile scop delta part: { [h0 = 0, h1, h2, ii0, ii1 = 0, ii2, ii3] : ii0 >= -15 + 16h1 and 0 <= ii0 <= 15 + 16h1 and 0 <= ii2 <= 1 and ii3 >= -15 + 16h1 + 16h2 - ii0 and ii3 >= -15 + 16h2 and 0 < ii3 <= 15 + 16h2 and ii3 <= 15 + 16h1 + 16h2 - ii0 }

#tile delta: { [h0 = 0, h1, h2] : h1 >= 0 and h2 > 0; [h0 = 0, h1, h2 = 0] : h1 > 0 }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 0, h1 = 1, h2 = 2] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 1, h2 = 1] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 2] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 1] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 2, h2 = 0] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 1, h2 = 0] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1, a2, a3] : exists b1, b2, b3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and 0*a1 + 1*a2 + 2*a3 > 0 and 0*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 1*a2 + 1*a3 > 0 and 0*a1 + 0*a2 + 1*a3 > 0 and 0*a1 + 2*a2 + 0*a3 > 0 and 0*a1 + 1*a2 + 0*a3 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : exists c1, c2, c3 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and c0 = c1 + c2 + c3 and a1 != 0 and a2 != 0 and a3 != 0} * {[d0, b0, c0, a1, a2, a3] : exists b1, b2, b3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and 0*a1 + 1*a2 + 2*a3 > 0 and 0*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 1*a2 + 1*a3 > 0 and 0*a1 + 0*a2 + 1*a3 > 0 and 0*a1 + 2*a2 + 0*a3 > 0 and 0*a1 + 1*a2 + 0*a3 > 0 } )

#result: { [d0 = 0, b0 = 3, c0 = -3, a1 = 1, a2 = 1, a3 = 1] }

#wafefront hyperplane: { [a1 = 1, a2 = 1, a3 = 1] }

#calculate wafefront hyperplane stop

#create parallel free schedule start

#part: [_PB_M, _PB_N, alpha] -> { S_1[i0, i1, i2, i3] -> [0, w0, h0, h1, h2, 0, tw0, i0, i1, i2, i3] : exists  bw0, bh0, bh1, bh2 : 1 = 1 and 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 1 * i0 + 0 * i1 + 0 * i2 + 0 * i3 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 and 0 * i0 + 0 * i1 + 0 * i2 + 1 * i3 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 + 1 * bh2 and tw0 = 0 and w0 = 0 } 

#part: [_PB_M, _PB_N, alpha] -> { S_0[i0, i1, i2, i3] -> [0, w0, h0, h1, h2, 0, tw0, i0, i1, i2, i3] : exists  bw0, bh0, bh1, bh2 : 1 = 1 and 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 1 * i0 + 0 * i1 + 0 * i2 + 0 * i3 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 and 0 * i0 + 0 * i1 + 0 * i2 + 1 * i3 - bh2 = 0 and 16 * h2 <= bh2 <= 16 * (h2 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 + 1 * bh2 and tw0 = 0 and w0 = 0 } 

#parallel free schedule: [_PB_M, _PB_N, alpha] -> { S_1[i0, i1, i2, i3] -> [0, w0 = 0, h0, h1, h2, 0, tw0 = 0, i0, i1, i2, i3] : -15 + i1 <= 16h0 <= i1 and -15 + i0 <= 16h1 <= i0 and -15 + i3 <= 16h2 <= i3; S_0[i0, i1, i2, i3] -> [0, w0 = 0, h0, h1, h2, 0, tw0 = 0, i0, i1, i2, i3] : -15 + i1 <= 16h0 <= i1 and -15 + i0 <= 16h1 <= i0 and -15 + i3 <= 16h2 <= i3 }

#create parallel free schedule stop

#create code start

#wafefront code: [_PB_M, _PB_N, alpha] -> { S_0[i, j, k] -> [0, w0 = 0, h0, h1, h2, 0, tw0 = 0, i, j, 0, k] : i >= 0 and 0 <= j < _PB_N and i < k < _PB_M and -15 + j <= 16h0 <= j and -15 + i <= 16h1 <= i and -15 + k <= 16h2 <= k; S_1[i, j] -> [0, w0 = 0, h0, h1, h2, 0, tw0 = 0, i, j, 1, _PB_M] : 0 <= i < _PB_M and 0 <= j < _PB_N and -15 + j <= 16h0 <= j and -15 + i <= 16h1 <= i and -15 + _PB_M <= 16h2 <= _PB_M }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#global schedule:
[_PB_M, _PB_N, alpha] -> { S_1[i, j] -> [0, w0 = 0, h0, h1, h2, 0, tw0 = 0, i, j, 1, _PB_M] : 0 <= i < _PB_M and 0 <= j < _PB_N and -15 + j <= 16h0 <= j and -15 + i <= 16h1 <= i and -15 + _PB_M <= 16h2 <= _PB_M; S_0[i, j, k] -> [0, w0 = 0, h0, h1, h2, 0, tw0 = 0, i, j, 0, k] : i >= 0 and 0 <= j < _PB_N and i < k < _PB_M and -15 + j <= 16h0 <= j and -15 + i <= 16h1 <= i and -15 + k <= 16h2 <= k }

#######################################################################

#######################################################################

#Does global schedule respects oryginal loop RaW deps? -> True

#Does global schedule respects oryginal loop WaW deps? -> True

#Does global schedule respects oryginal loop WaR deps? -> True

#######################################################################
