
#######################################################################

#oryginal loop:

#schedule:
{ domain: "[_PB_TMAX, _PB_NX, _PB_NY] -> { S_1[t, i, j] : 0 <= t < _PB_TMAX and 0 < i < _PB_NX and 0 <= j < _PB_NY; S_2[t, i, j] : 0 <= t < _PB_TMAX and 0 <= i < _PB_NX and 0 < j < _PB_NY; S_3[t, i, j] : 0 <= t < _PB_TMAX and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY; S_0[t, j] : 0 <= t < _PB_TMAX and 0 <= j < _PB_NY }", child: { schedule: "[_PB_TMAX, _PB_NX, _PB_NY] -> L_0[{ S_1[t, i, j] -> [(t)]; S_2[t, i, j] -> [(t)]; S_3[t, i, j] -> [(t)]; S_0[t, j] -> [(t)] }]", child: { sequence: [ { filter: "[_PB_TMAX, _PB_NX, _PB_NY] -> { S_0[t, j] }", child: { schedule: "[_PB_TMAX, _PB_NY] -> L_1[{ S_0[t, j] -> [(j)] }]" } }, { filter: "[_PB_TMAX, _PB_NX, _PB_NY] -> { S_1[t, i, j] }", child: { schedule: "[_PB_TMAX, _PB_NX, _PB_NY] -> L_2[{ S_1[t, i, j] -> [(i)] }]", child: { schedule: "[_PB_TMAX, _PB_NX, _PB_NY] -> L_3[{ S_1[t, i, j] -> [(j)] }]" } } }, { filter: "[_PB_TMAX, _PB_NX, _PB_NY] -> { S_2[t, i, j] }", child: { schedule: "[_PB_TMAX, _PB_NX, _PB_NY] -> L_4[{ S_2[t, i, j] -> [(i)] }]", child: { schedule: "[_PB_TMAX, _PB_NX, _PB_NY] -> L_5[{ S_2[t, i, j] -> [(j)] }]" } } }, { filter: "[_PB_TMAX, _PB_NX, _PB_NY] -> { S_3[t, i, j] }", child: { schedule: "[_PB_TMAX, _PB_NX, _PB_NY] -> L_6[{ S_3[t, i, j] -> [(i)] }]", child: { schedule: "[_PB_TMAX, _PB_NX, _PB_NY] -> L_7[{ S_3[t, i, j] -> [(j)] }]" } } } ] } } }

#domain:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_1[t, i, j] : 0 <= t < _PB_TMAX and 0 < i < _PB_NX and 0 <= j < _PB_NY; S_2[t, i, j] : 0 <= t < _PB_TMAX and 0 <= i < _PB_NX and 0 < j < _PB_NY; S_3[t, i, j] : 0 <= t < _PB_TMAX and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY; S_0[t, j] : 0 <= t < _PB_TMAX and 0 <= j < _PB_NY }

#schedule map:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_1[t, i, j] -> [t, 1, i, j]; S_0[t, j] -> [t, 0, j, 0]; S_3[t, i, j] -> [t, 3, i, j]; S_2[t, i, j] -> [t, 2, i, j] }

#isl schedule:
{ domain: "[_PB_TMAX, _PB_NX, _PB_NY] -> { S_1[t, i, j] : 0 <= t < _PB_TMAX and 0 < i < _PB_NX and 0 <= j < _PB_NY; S_2[t, i, j] : 0 <= t < _PB_TMAX and 0 <= i < _PB_NX and 0 < j < _PB_NY; S_3[t, i, j] : 0 <= t < _PB_TMAX and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY; S_0[t, j] : 0 <= t < _PB_TMAX and 0 <= j < _PB_NY }", child: { schedule: "[_PB_TMAX, _PB_NX, _PB_NY] -> [{ S_1[t, i, j] -> [(t)]; S_2[t, i, j] -> [(t)]; S_3[t, i, j] -> [(t)]; S_0[t, j] -> [(t)] }, { S_1[t, i, j] -> [(t + i)]; S_2[t, i, j] -> [(t + i)]; S_3[t, i, j] -> [(1 + t + i)]; S_0[t, j] -> [(t)] }, { S_1[t, i, j] -> [(t + j)]; S_2[t, i, j] -> [(t + j)]; S_3[t, i, j] -> [(1 + t + j)]; S_0[t, j] -> [(t + j)] }]", permutable: 1, coincident: [ 1, 1, 1 ] } }

#isl schedule map:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_0[t, j] -> [t, t, t + j]; S_3[t, i, j] -> [t, 1 + t + i, 1 + t + j]; S_1[t, i, j] -> [t, t + i, t + j]; S_2[t, i, j] -> [t, t + i, t + j] }

#writes:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_0[t, j] -> ey[0, j] : 0 <= t < _PB_TMAX and 0 <= j < _PB_NY; S_2[t, i, j] -> ex[i, j] : 0 <= t < _PB_TMAX and 0 <= i < _PB_NX and 0 < j < _PB_NY; S_1[t, i, j] -> ey[i, j] : 0 <= t < _PB_TMAX and 0 < i < _PB_NX and 0 <= j < _PB_NY; S_3[t, i, j] -> hz[i, j] : 0 <= t < _PB_TMAX and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY }

#reads:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_1[t, i, j] -> ey[i, j] : 0 <= t < _PB_TMAX and 0 < i < _PB_NX and 0 <= j < _PB_NY; S_2[t, i, j] -> ex[i, j] : 0 <= t < _PB_TMAX and 0 <= i < _PB_NX and 0 < j < _PB_NY; S_1[t, i, j] -> hz[i, j] : 0 <= t < _PB_TMAX and 0 < i < _PB_NX and 0 <= j < _PB_NY; S_1[t, i, j] -> hz[-1 + i, j] : 0 <= t < _PB_TMAX and 0 < i < _PB_NX and 0 <= j < _PB_NY; S_0[t, j] -> _fict_[t] : 0 <= t < _PB_TMAX and 0 <= j < _PB_NY; S_2[t, i, j] -> hz[i, j] : 0 <= t < _PB_TMAX and 0 <= i < _PB_NX and 0 < j < _PB_NY; S_2[t, i, j] -> hz[i, -1 + j] : 0 <= t < _PB_TMAX and 0 <= i < _PB_NX and 0 < j < _PB_NY; S_3[t, i, j] -> ey[1 + i, j] : 0 <= t < _PB_TMAX and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY; S_3[t, i, j] -> ey[i, j] : 0 <= t < _PB_TMAX and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY; S_3[t, i, j] -> ex[i, 1 + j] : 0 <= t < _PB_TMAX and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY; S_3[t, i, j] -> ex[i, j] : 0 <= t < _PB_TMAX and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY; S_3[t, i, j] -> hz[i, j] : 0 <= t < _PB_TMAX and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY }

#dep_raw:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_2[t, i, j] -> S_2[t', i' = i, j' = j] : t >= 0 and 0 <= i < _PB_NX and 0 < j < _PB_NY and t < t' < _PB_TMAX; S_1[t, i, j] -> S_1[t', i' = i, j' = j] : t >= 0 and 0 < i < _PB_NX and 0 <= j < _PB_NY and t < t' < _PB_TMAX; S_3[t, i, j] -> S_3[t', i' = i, j' = j] : t >= 0 and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY and t < t' < _PB_TMAX; S_1[t, i, j] -> S_3[t', i', j' = j] : t >= 0 and i > 0 and 0 <= j <= -2 + _PB_NY and t <= t' < _PB_TMAX and -1 + i <= i' <= i and i' <= -2 + _PB_NX; S_0[t, j] -> S_3[t', i = 0, j' = j] : _PB_NX >= 2 and t >= 0 and 0 <= j <= -2 + _PB_NY and t <= t' < _PB_TMAX; S_2[t, i, j] -> S_3[t', i' = i, j'] : t >= 0 and 0 <= i <= -2 + _PB_NX and j > 0 and t <= t' < _PB_TMAX and -1 + j <= j' <= j and j' <= -2 + _PB_NY; S_3[t, i, j] -> S_2[t', i' = i, j'] : t >= 0 and 0 <= i <= -2 + _PB_NX and j <= -2 + _PB_NY and t < t' < _PB_TMAX and j' >= j and 0 < j' <= 1 + j; S_3[t, i, j] -> S_1[t', i', j' = j] : t >= 0 and i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY and t < t' < _PB_TMAX and i' >= i and 0 < i' <= 1 + i }

#dep_waw:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_3[t, i, j] -> S_3[t', i' = i, j' = j] : t >= 0 and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY and t < t' < _PB_TMAX; S_1[t, i, j] -> S_1[t', i' = i, j' = j] : t >= 0 and 0 < i < _PB_NX and 0 <= j < _PB_NY and t < t' < _PB_TMAX; S_2[t, i, j] -> S_2[t', i' = i, j' = j] : t >= 0 and 0 <= i < _PB_NX and 0 < j < _PB_NY and t < t' < _PB_TMAX; S_0[t, j] -> S_0[t', j' = j] : t >= 0 and 0 <= j < _PB_NY and t < t' < _PB_TMAX }

#dep_war:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_3[t, i = 0, j] -> S_0[t', j' = j] : _PB_NX >= 2 and t >= 0 and 0 <= j <= -2 + _PB_NY and t < t' < _PB_TMAX; S_2[t, i, j] -> S_2[t', i' = i, j' = j] : t >= 0 and 0 <= i < _PB_NX and 0 < j < _PB_NY and t < t' < _PB_TMAX; S_1[t, i, j] -> S_1[t', i' = i, j' = j] : t >= 0 and 0 < i < _PB_NX and 0 <= j < _PB_NY and t < t' < _PB_TMAX; S_3[t, i, j] -> S_3[t', i' = i, j' = j] : t >= 0 and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY and t < t' < _PB_TMAX; S_1[t, i, j] -> S_3[t', i', j' = j] : t >= 0 and i > 0 and 0 <= j <= -2 + _PB_NY and t <= t' < _PB_TMAX and -1 + i <= i' <= i and i' <= -2 + _PB_NX; S_2[t, i, j] -> S_3[t', i' = i, j'] : t >= 0 and 0 <= i <= -2 + _PB_NX and j > 0 and t <= t' < _PB_TMAX and -1 + j <= j' <= j and j' <= -2 + _PB_NY; S_3[t, i, j] -> S_2[t', i' = i, j'] : t >= 0 and 0 <= i <= -2 + _PB_NX and j <= -2 + _PB_NY and t < t' < _PB_TMAX and j' >= j and 0 < j' <= 1 + j; S_3[t, i, j] -> S_1[t', i', j' = j] : t >= 0 and i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY and t < t' < _PB_TMAX and i' >= i and 0 < i' <= 1 + i }

#relations:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_3[t, i, j] -> S_2[t', i' = i, j'] : t >= 0 and 0 <= i <= -2 + _PB_NX and j <= -2 + _PB_NY and t < t' < _PB_TMAX and j' >= j and 0 < j' <= 1 + j; S_0[t, j] -> S_0[t', j' = j] : t >= 0 and 0 <= j < _PB_NY and t < t' < _PB_TMAX; S_1[t, i, j] -> S_3[t', i', j' = j] : t >= 0 and i > 0 and 0 <= j <= -2 + _PB_NY and t <= t' < _PB_TMAX and -1 + i <= i' <= i and i' <= -2 + _PB_NX; S_2[t, i, j] -> S_3[t', i' = i, j'] : t >= 0 and 0 <= i <= -2 + _PB_NX and j > 0 and t <= t' < _PB_TMAX and -1 + j <= j' <= j and j' <= -2 + _PB_NY; S_3[t, i, j] -> S_1[t', i', j' = j] : t >= 0 and i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY and t < t' < _PB_TMAX and i' >= i and 0 < i' <= 1 + i; S_0[t, j] -> S_3[t', i = 0, j' = j] : _PB_NX >= 2 and t >= 0 and 0 <= j <= -2 + _PB_NY and t <= t' < _PB_TMAX; S_3[t, i = 0, j] -> S_0[t', j' = j] : _PB_NX >= 2 and t >= 0 and 0 <= j <= -2 + _PB_NY and t < t' < _PB_TMAX; S_3[t, i, j] -> S_3[t', i' = i, j' = j] : t >= 0 and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY and t < t' < _PB_TMAX; S_2[t, i, j] -> S_2[t', i' = i, j' = j] : t >= 0 and 0 <= i < _PB_NX and 0 < j < _PB_NY and t < t' < _PB_TMAX; S_1[t, i, j] -> S_1[t', i' = i, j' = j] : t >= 0 and 0 < i < _PB_NX and 0 <= j < _PB_NY and t < t' < _PB_TMAX }

#delta:
{ [t, i, j] : i <= t and j >= -1 + i and -1 - i <= j <= 1 - i and j <= 1 + i and j <= t; [t, j = 0] : t > 0 }

#######################################################################

#######################################################################

#norm schedule map:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_3[t, i, j] -> [t, 3, i, j]; S_0[t, j] -> [t, 0, j, 0]; S_2[t, i, j] -> [t, 2, i, j]; S_1[t, i, j] -> [t, 1, i, j] }

#######################################################################

#######################################################################

#normalized loop (0):

#mapper:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_2[t, i, j] -> S_2[i0 = t, i1 = 2, i2 = i, i3 = j]; S_1[t, i, j] -> S_1[i0 = t, i1 = 1, i2 = i, i3 = j]; S_3[t, i, j] -> S_3[i0 = t, i1 = 3, i2 = i, i3 = j]; S_0[t, j] -> S_0[i0 = t, i1 = 0, i2 = j, i3 = 0] }

#domain:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_1[i0, i1 = 1, i2, i3] : 0 <= i0 < _PB_TMAX and 0 < i2 < _PB_NX and 0 <= i3 < _PB_NY; S_2[i0, i1 = 2, i2, i3] : 0 <= i0 < _PB_TMAX and 0 <= i2 < _PB_NX and 0 < i3 < _PB_NY; S_3[i0, i1 = 3, i2, i3] : 0 <= i0 < _PB_TMAX and 0 <= i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY; S_0[i0, i1 = 0, i2, i3 = 0] : 0 <= i0 < _PB_TMAX and 0 <= i2 < _PB_NY }

#schedule map:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_1[i0, i1 = 1, i2, i3] -> [i0, 1, i2, i3]; S_0[i0, i1 = 0, i2, i3 = 0] -> [i0, 0, i2, 0]; S_2[i0, i1 = 2, i2, i3] -> [i0, 2, i2, i3]; S_3[i0, i1 = 3, i2, i3] -> [i0, 3, i2, i3] }

#writes:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_1[i0, i1 = 1, i2, i3] -> ey[i2, i3] : 0 <= i0 < _PB_TMAX and 0 < i2 < _PB_NX and 0 <= i3 < _PB_NY; S_3[i0, i1 = 3, i2, i3] -> hz[i2, i3] : 0 <= i0 < _PB_TMAX and 0 <= i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY; S_0[i0, i1 = 0, i2, i3 = 0] -> ey[0, i2] : 0 <= i0 < _PB_TMAX and 0 <= i2 < _PB_NY; S_2[i0, i1 = 2, i2, i3] -> ex[i2, i3] : 0 <= i0 < _PB_TMAX and 0 <= i2 < _PB_NX and 0 < i3 < _PB_NY }

#reads:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_3[i0, i1 = 3, i2, i3] -> ey[1 + i2, i3] : 0 <= i0 < _PB_TMAX and 0 <= i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY; S_3[i0, i1 = 3, i2, i3] -> ey[i2, i3] : 0 <= i0 < _PB_TMAX and 0 <= i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY; S_1[i0, i1 = 1, i2, i3] -> hz[i2, i3] : 0 <= i0 < _PB_TMAX and 0 < i2 < _PB_NX and 0 <= i3 < _PB_NY; S_1[i0, i1 = 1, i2, i3] -> hz[-1 + i2, i3] : 0 <= i0 < _PB_TMAX and 0 < i2 < _PB_NX and 0 <= i3 < _PB_NY; S_0[i0, i1 = 0, i2, i3 = 0] -> _fict_[i0] : 0 <= i0 < _PB_TMAX and 0 <= i2 < _PB_NY; S_2[i0, i1 = 2, i2, i3] -> hz[i2, i3] : 0 <= i0 < _PB_TMAX and 0 <= i2 < _PB_NX and 0 < i3 < _PB_NY; S_2[i0, i1 = 2, i2, i3] -> hz[i2, -1 + i3] : 0 <= i0 < _PB_TMAX and 0 <= i2 < _PB_NX and 0 < i3 < _PB_NY; S_2[i0, i1 = 2, i2, i3] -> ex[i2, i3] : 0 <= i0 < _PB_TMAX and 0 <= i2 < _PB_NX and 0 < i3 < _PB_NY; S_3[i0, i1 = 3, i2, i3] -> hz[i2, i3] : 0 <= i0 < _PB_TMAX and 0 <= i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY; S_1[i0, i1 = 1, i2, i3] -> ey[i2, i3] : 0 <= i0 < _PB_TMAX and 0 < i2 < _PB_NX and 0 <= i3 < _PB_NY; S_3[i0, i1 = 3, i2, i3] -> ex[i2, 1 + i3] : 0 <= i0 < _PB_TMAX and 0 <= i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY; S_3[i0, i1 = 3, i2, i3] -> ex[i2, i3] : 0 <= i0 < _PB_TMAX and 0 <= i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY }

#dep_raw:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_0[i0, i1 = 0, i2, i3 = 0] -> S_3[i0', i1' = 3, i2' = 0, i3' = i2] : _PB_NX >= 2 and i0 >= 0 and 0 <= i2 <= -2 + _PB_NY and i0 <= i0' < _PB_TMAX; S_3[i0, i1 = 3, i2, i3] -> S_2[i0', i1' = 2, i2' = i2, i3'] : i0 >= 0 and 0 <= i2 <= -2 + _PB_NX and i3 <= -2 + _PB_NY and i0 < i0' < _PB_TMAX and i3' >= i3 and 0 < i3' <= 1 + i3; S_1[i0, i1 = 1, i2, i3] -> S_1[i0', i1' = 1, i2' = i2, i3' = i3] : i0 >= 0 and 0 < i2 < _PB_NX and 0 <= i3 < _PB_NY and i0 < i0' < _PB_TMAX; S_3[i0, i1 = 3, i2, i3] -> S_3[i0', i1' = 3, i2' = i2, i3' = i3] : i0 >= 0 and 0 <= i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY and i0 < i0' < _PB_TMAX; S_3[i0, i1 = 3, i2, i3] -> S_1[i0', i1' = 1, i2', i3' = i3] : i0 >= 0 and i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY and i0 < i0' < _PB_TMAX and i2' >= i2 and 0 < i2' <= 1 + i2; S_1[i0, i1 = 1, i2, i3] -> S_3[i0', i1' = 3, i2', i3' = i3] : i0 >= 0 and i2 > 0 and 0 <= i3 <= -2 + _PB_NY and i0 <= i0' < _PB_TMAX and -1 + i2 <= i2' <= i2 and i2' <= -2 + _PB_NX; S_2[i0, i1 = 2, i2, i3] -> S_2[i0', i1' = 2, i2' = i2, i3' = i3] : i0 >= 0 and 0 <= i2 < _PB_NX and 0 < i3 < _PB_NY and i0 < i0' < _PB_TMAX; S_2[i0, i1 = 2, i2, i3] -> S_3[i0', i1' = 3, i2' = i2, i3'] : i0 >= 0 and 0 <= i2 <= -2 + _PB_NX and i3 > 0 and i0 <= i0' < _PB_TMAX and -1 + i3 <= i3' <= i3 and i3' <= -2 + _PB_NY }

#dep_waw:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_2[i0, i1 = 2, i2, i3] -> S_2[i0', i1' = 2, i2' = i2, i3' = i3] : i0 >= 0 and 0 <= i2 < _PB_NX and 0 < i3 < _PB_NY and i0 < i0' < _PB_TMAX; S_1[i0, i1 = 1, i2, i3] -> S_1[i0', i1' = 1, i2' = i2, i3' = i3] : i0 >= 0 and 0 < i2 < _PB_NX and 0 <= i3 < _PB_NY and i0 < i0' < _PB_TMAX; S_0[i0, i1 = 0, i2, i3 = 0] -> S_0[i0', i1' = 0, i2' = i2, i3' = 0] : 0 <= i0 < _PB_TMAX and 0 <= i2 < _PB_NY and i0' > i0 and 0 <= i0' < _PB_TMAX; S_3[i0, i1 = 3, i2, i3] -> S_3[i0', i1' = 3, i2' = i2, i3' = i3] : i0 >= 0 and 0 <= i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY and i0 < i0' < _PB_TMAX }

#dep_war:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_3[i0, i1 = 3, i2 = 0, i3] -> S_0[i0', i1' = 0, i2' = i3, i3' = 0] : _PB_NX >= 2 and 0 <= i0 < _PB_TMAX and 0 <= i3 <= -2 + _PB_NY and i0' > i0 and 0 <= i0' < _PB_TMAX; S_3[i0, i1 = 3, i2, i3] -> S_2[i0', i1' = 2, i2' = i2, i3'] : i0 >= 0 and 0 <= i2 <= -2 + _PB_NX and i3 <= -2 + _PB_NY and i0 < i0' < _PB_TMAX and i3' >= i3 and 0 < i3' <= 1 + i3; S_3[i0, i1 = 3, i2, i3] -> S_3[i0', i1' = 3, i2' = i2, i3' = i3] : i0 >= 0 and 0 <= i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY and i0 < i0' < _PB_TMAX; S_1[i0, i1 = 1, i2, i3] -> S_1[i0', i1' = 1, i2' = i2, i3' = i3] : i0 >= 0 and 0 < i2 < _PB_NX and 0 <= i3 < _PB_NY and i0 < i0' < _PB_TMAX; S_3[i0, i1 = 3, i2, i3] -> S_1[i0', i1' = 1, i2', i3' = i3] : i0 >= 0 and i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY and i0 < i0' < _PB_TMAX and i2' >= i2 and 0 < i2' <= 1 + i2; S_1[i0, i1 = 1, i2, i3] -> S_3[i0', i1' = 3, i2', i3' = i3] : i0 >= 0 and i2 > 0 and 0 <= i3 <= -2 + _PB_NY and i0 <= i0' < _PB_TMAX and -1 + i2 <= i2' <= i2 and i2' <= -2 + _PB_NX; S_2[i0, i1 = 2, i2, i3] -> S_2[i0', i1' = 2, i2' = i2, i3' = i3] : i0 >= 0 and 0 <= i2 < _PB_NX and 0 < i3 < _PB_NY and i0 < i0' < _PB_TMAX; S_2[i0, i1 = 2, i2, i3] -> S_3[i0', i1' = 3, i2' = i2, i3'] : i0 >= 0 and 0 <= i2 <= -2 + _PB_NX and i3 > 0 and i0 <= i0' < _PB_TMAX and -1 + i3 <= i3' <= i3 and i3' <= -2 + _PB_NY }

#relations:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_1[i0, i1 = 1, i2, i3] -> S_1[i0', i1' = 1, i2' = i2, i3' = i3] : i0 >= 0 and 0 < i2 < _PB_NX and 0 <= i3 < _PB_NY and i0 < i0' < _PB_TMAX; S_0[i0, i1 = 0, i2, i3 = 0] -> S_0[i0', i1' = 0, i2' = i2, i3' = 0] : 0 <= i0 < _PB_TMAX and 0 <= i2 < _PB_NY and i0' > i0 and 0 <= i0' < _PB_TMAX; S_2[i0, i1 = 2, i2, i3] -> S_2[i0', i1' = 2, i2' = i2, i3' = i3] : i0 >= 0 and 0 <= i2 < _PB_NX and 0 < i3 < _PB_NY and i0 < i0' < _PB_TMAX; S_1[i0, i1 = 1, i2, i3] -> S_3[i0', i1' = 3, i2', i3' = i3] : i0 >= 0 and i2 > 0 and 0 <= i3 <= -2 + _PB_NY and i0 <= i0' < _PB_TMAX and -1 + i2 <= i2' <= i2 and i2' <= -2 + _PB_NX; S_3[i0, i1 = 3, i2 = 0, i3] -> S_0[i0', i1' = 0, i2' = i3, i3' = 0] : _PB_NX >= 2 and 0 <= i0 < _PB_TMAX and 0 <= i3 <= -2 + _PB_NY and i0' > i0 and 0 <= i0' < _PB_TMAX; S_3[i0, i1 = 3, i2, i3] -> S_2[i0', i1' = 2, i2' = i2, i3'] : i0 >= 0 and 0 <= i2 <= -2 + _PB_NX and i3 <= -2 + _PB_NY and i0 < i0' < _PB_TMAX and i3' >= i3 and 0 < i3' <= 1 + i3; S_3[i0, i1 = 3, i2, i3] -> S_3[i0', i1' = 3, i2' = i2, i3' = i3] : i0 >= 0 and 0 <= i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY and i0 < i0' < _PB_TMAX; S_3[i0, i1 = 3, i2, i3] -> S_1[i0', i1' = 1, i2', i3' = i3] : i0 >= 0 and i2 <= -2 + _PB_NX and 0 <= i3 <= -2 + _PB_NY and i0 < i0' < _PB_TMAX and i2' >= i2 and 0 < i2' <= 1 + i2; S_0[i0, i1 = 0, i2, i3 = 0] -> S_3[i0', i1' = 3, i2' = 0, i3' = i2] : _PB_NX >= 2 and i0 >= 0 and 0 <= i2 <= -2 + _PB_NY and i0 <= i0' < _PB_TMAX; S_2[i0, i1 = 2, i2, i3] -> S_3[i0', i1' = 3, i2' = i2, i3'] : i0 >= 0 and 0 <= i2 <= -2 + _PB_NX and i3 > 0 and i0 <= i0' < _PB_TMAX and -1 + i3 <= i3' <= i3 and i3' <= -2 + _PB_NY }

#delta:
{ [i0, i1, i2, i3] : i0 >= 0 and -i1 < i2 <= 0 and -2 + i1 <= i3 <= 0; [i0, i1, i2 = 0, i3] : i0 > 0 and i1 >= -1 and 0 <= i3 <= -i1; [i0, i1 = -2, i2, i3 = 0] : i0 > 0 and 0 <= i2 <= 1; [i0, i1 = 3, i2, i3 = -i2] : i0 >= 0 and i2 <= 0; [i0, i1 = -3, i2, i3 = -i2] : i0 > 0 and i2 >= 0 }

#######################################################################

#######################################################################

#normalized loop (0):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 1, i1 = 2, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = 2, i2 = -1, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = 1, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = 1, i2 = 0, i3 = -1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -1, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = -1] }

#distance vector set : { [i0 = 2, i1 = 0, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 2, i1 = -1, i2 = 0, i3 = 1] }

#distance vector set : { [i0 = 2, i1 = -1, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = -1, i2 = 0, i3 = 1] }

#distance vector set : { [i0 = 1, i1 = -1, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = 3, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = 3, i2 = -1, i3 = 1] }

#distance vector set : { [i0 = 0, i1 = 3, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 3, i2 = -1, i3 = 1] }

#distance vector set : { [i0 = 2, i1 = -2, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 2, i1 = -2, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = -2, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = -2, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 2, i1 = -3, i2 = 1, i3 = -1] }

#distance vector set : { [i0 = 2, i1 = -3, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = -3, i2 = 1, i3 = -1] }

#distance vector set : { [i0 = 1, i1 = -3, i2 = 0, i3 = 0] }

#delta:
{ [i0, i1, i2, i3] : i0 >= 0 and -i1 < i2 <= 0 and -2 + i1 <= i3 <= 0; [i0, i1, i2 = 0, i3] : i0 > 0 and i1 >= -1 and 0 <= i3 <= -i1; [i0, i1 = -2, i2, i3 = 0] : i0 > 0 and 0 <= i2 <= 1; [i0, i1 = 3, i2, i3 = -i2] : i0 >= 0 and i2 <= 0; [i0, i1 = -3, i2, i3 = -i2] : i0 > 0 and i2 >= 0 }

#dim [i0]: is parameter, is positive

#dim [i1]: is order

#dim [i2]: is parameter, is negative, is positive

#dim [i3]: is bounded

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  )  and 2*a1 + -1*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + 3*a2 + -1*a3 + 1*a4 >= 0 and 0*a1 + 3*a2 + -1*a3 + 1*a4 >= 0 and 2*a1 + -2*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + -2*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 3*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 2*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 2*a2 + -1*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 >= 0 and 2*a1 + -3*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + -3*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  )  and 2*a1 + -1*a2 + 0*a3 + 1*a4 = 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 = 0 and 1*a1 + 3*a2 + -1*a3 + 1*a4 = 0 and 0*a1 + 3*a2 + -1*a3 + 1*a4 = 0 and 2*a1 + -2*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + -2*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + 3*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 3*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 2*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + 0*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + -1*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + -2*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + -2*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + -3*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 2*a2 + -1*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 = 0 and 2*a1 + -3*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + -3*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 = 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 = 0 and 1*a1 + -3*a2 + 0*a3 + 0*a4 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  )  and 2*a1 + -1*a2 + 0*a3 + 1*a4 = 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 = 0 and 1*a1 + 3*a2 + -1*a3 + 1*a4 = 0 and 0*a1 + 3*a2 + -1*a3 + 1*a4 = 0 and 2*a1 + -2*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + -2*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + 3*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 3*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 2*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + 0*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + -1*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + -2*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + -2*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + -3*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 2*a2 + -1*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 = 0 and 2*a1 + -3*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + -3*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 = 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 = 0 and 1*a1 + -3*a2 + 0*a3 + 0*a4 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4] : false }

#hyperplane: { [a1, a2, a3, a4] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  )  and 2*a1 + -1*a2 + 0*a3 + 1*a4 = 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 = 0 and 1*a1 + 3*a2 + -1*a3 + 1*a4 = 0 and 0*a1 + 3*a2 + -1*a3 + 1*a4 = 0 and 2*a1 + -2*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + -2*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + 3*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 3*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 2*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + 0*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + -1*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + -2*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + -2*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + -3*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 2*a2 + -1*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 = 0 and 2*a1 + -3*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + -3*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 = 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 = 0 and 1*a1 + -3*a2 + 0*a3 + 0*a4 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4] : false }

#hyperplane: { [a1, a2, a3, a4] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  )  and 2*a1 + -1*a2 + 0*a3 + 1*a4 = 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 = 0 and 1*a1 + 3*a2 + -1*a3 + 1*a4 = 0 and 0*a1 + 3*a2 + -1*a3 + 1*a4 = 0 and 2*a1 + -2*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + -2*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + 3*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 3*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 2*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + 0*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + -1*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + -2*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + -2*a2 + 0*a3 + 0*a4 = 0 and 2*a1 + -3*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 2*a2 + -1*a3 + 0*a4 = 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 = 0 and 2*a1 + -3*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + -3*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 = 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 = 0 and 1*a1 + -3*a2 + 0*a3 + 0*a4 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4] : false }

#hyperplane: { [a1, a2, a3, a4] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  )  and 2*a1 + -1*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + 3*a2 + -1*a3 + 1*a4 >= 0 and 0*a1 + 3*a2 + -1*a3 + 1*a4 >= 0 and 2*a1 + -2*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + -2*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 3*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 2*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 2*a2 + -1*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 >= 0 and 2*a1 + -3*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + -3*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -4, a1 = 1, a2 = 0, a3 = 0, a4 = 0] }

#hyperplane: { [a1 = 1, a2 = 0, a3 = 0, a4 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  )  and 2*a1 + -1*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + 3*a2 + -1*a3 + 1*a4 >= 0 and 0*a1 + 3*a2 + -1*a3 + 1*a4 >= 0 and 2*a1 + -2*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + -2*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 3*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 2*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 2*a2 + -1*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 >= 0 and 2*a1 + -3*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + -3*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4] : false }

#hyperplane: { [a1, a2, a3, a4] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a3 <= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a3 != 0  or a4 != 0  )  and 2*a1 + -1*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + 3*a2 + -1*a3 + 1*a4 >= 0 and 0*a1 + 3*a2 + -1*a3 + 1*a4 >= 0 and 2*a1 + -2*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + -2*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 3*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 2*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 1*a2 + 0*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 2*a2 + -1*a3 + 0*a4 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 >= 0 and 2*a1 + -3*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + -3*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 1*a2 + 0*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 } )

#result: { [d0 = 0, b0 = 5, c0 = -3, a1 = 3, a2 = 1, a3 = 0, a4 = -1] }

#hyperplane: { [a1 = 3, a2 = 1, a3 = 0, a4 = -1] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*3 = c1*1 and c2*1 = c1*0 and c2*0 = c1*0 and c2*-1 = c1*0 } = {}

#result: true

#create hyperplanes stop

#create spaces start

#part: [_PB_TMAX, _PB_NX, _PB_NY] -> { [i0, i1, i2, i3] -> [  h0, h1, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : exists bh0 : 1 * i0 + 0 * i1 + 0 * i2 + 0 * i3 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#part: [_PB_TMAX, _PB_NX, _PB_NY] -> { [i0, i1, i2, i3] -> [  h0, h1, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : exists bh1 : 3 * i0 + 1 * i1 + 0 * i2 + -1 * i3 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 } 

#spaces mapper: [_PB_TMAX, _PB_NX, _PB_NY] -> { [i0, i1, i2, i3] -> [h0, h1, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i0 <= 16h0 <= i0 and -15 + 3i0 + i1 - i3 <= 16h1 <= 3i0 + i1 - i3 }

#create spaces stop

#create tile scop start

#tile scop mapper: [_PB_TMAX, _PB_NX, _PB_NY] -> { S_1[i0, i1, i2, i3] -> S_1[h0, h1, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i0 <= 16h0 <= i0 and -15 + 3i0 + i1 - i3 <= 16h1 <= 3i0 + i1 - i3; S_2[i0, i1, i2, i3] -> S_2[h0, h1, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i0 <= 16h0 <= i0 and -15 + 3i0 + i1 - i3 <= 16h1 <= 3i0 + i1 - i3; S_0[i0, i1, i2, i3] -> S_0[h0, h1, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i0 <= 16h0 <= i0 and -15 + 3i0 + i1 - i3 <= 16h1 <= 3i0 + i1 - i3; S_3[i0, i1, i2, i3] -> S_3[h0, h1, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i0 <= 16h0 <= i0 and -15 + 3i0 + i1 - i3 <= 16h1 <= 3i0 + i1 - i3 }

#tile scop delta: { [h0, h1, ii0, ii1, ii2, ii3] : ii0 >= -15 + 16h0 and 0 <= ii0 <= 15 + 16h0 and -ii1 < ii2 <= 0 and ii3 >= -2 + ii1 and -15 - 16h1 + 3ii0 + ii1 <= ii3 <= 15 - 16h1 + 3ii0 + ii1 and ii3 <= 0; [h0, h1, ii0, ii1, ii2 = 0, ii3] : ii0 >= -15 + 16h0 and 0 < ii0 <= 15 + 16h0 and 3ii0 >= -15 + 16h1 and ii1 >= -1 and 2ii1 <= 15 + 16h1 - 3ii0 and ii3 >= 0 and -16 - 16h1 + 3ii0 <= ii3 <= 16 - 16h1 + 3ii0 + 2ii1 and ii3 <= -ii1; [h0, h1, ii0, ii1 = -2, ii2, ii3 = 0] : ii0 >= -15 + 16h0 and 0 < ii0 <= 15 + 16h0 and -13 + 16h1 <= 3ii0 <= 17 + 16h1 and 0 <= ii2 <= 1; [h0, h1, ii0, ii1 = 3, ii2, ii3 = -ii2] : ii0 >= -15 + 16h0 and 0 <= ii0 <= 15 + 16h0 and ii2 >= -18 + 16h1 - 3ii0 and -48 - 48h0 + 16h1 <= ii2 <= 44 - 48h0 + 16h1 and ii2 <= 0 and ii2 <= 12 + 16h1 - 3ii0; [h0, h1, ii0, ii1 = -3, ii2, ii3 = -ii2] : ii0 >= -15 + 16h0 and 0 < ii0 <= 15 + 16h0 and ii2 >= -12 + 16h1 - 3ii0 and ii2 >= 0 and -44 - 48h0 + 16h1 <= ii2 <= 48 - 48h0 + 16h1 and ii2 <= 18 + 16h1 - 3ii0 }

#tile scop delta part: { [h0, h1, ii0, ii1, ii2, ii3] : ii0 >= -15 + 16h0 and 0 <= ii0 <= 15 + 16h0 and -ii1 < ii2 <= 0 and ii3 >= -2 + ii1 and -15 - 16h1 + 3ii0 + ii1 <= ii3 <= 15 - 16h1 + 3ii0 + ii1 and ii3 <= 0 }

#tile scop delta part: { [h0, h1, ii0, ii1, ii2 = 0, ii3] : ii0 >= -15 + 16h0 and 0 < ii0 <= 15 + 16h0 and 3ii0 >= -15 + 16h1 and ii1 >= -1 and 2ii1 <= 15 + 16h1 - 3ii0 and ii3 >= 0 and -16 - 16h1 + 3ii0 <= ii3 <= 16 - 16h1 + 3ii0 + 2ii1 and ii3 <= -ii1 }

#tile scop delta part: { [h0, h1, ii0, ii1 = -2, ii2, ii3 = 0] : ii0 >= -15 + 16h0 and 0 < ii0 <= 15 + 16h0 and -13 + 16h1 <= 3ii0 <= 17 + 16h1 and 0 <= ii2 <= 1 }

#tile scop delta part: { [h0, h1, ii0, ii1 = -3, ii2, ii3 = -ii2] : ii0 >= -15 + 16h0 and 0 < ii0 <= 15 + 16h0 and ii2 >= -12 + 16h1 - 3ii0 and ii2 >= 0 and -44 - 48h0 + 16h1 <= ii2 <= 48 - 48h0 + 16h1 and ii2 <= 18 + 16h1 - 3ii0 }

#tile scop delta part: { [h0, h1, ii0, ii1 = 3, ii2, ii3 = -ii2] : ii0 >= -15 + 16h0 and 0 <= ii0 <= 15 + 16h0 and ii2 >= -18 + 16h1 - 3ii0 and -48 - 48h0 + 16h1 <= ii2 <= 44 - 48h0 + 16h1 and ii2 <= 0 and ii2 <= 12 + 16h1 - 3ii0 }

#tile delta: { [h0, h1] : h0 >= 0 and (h1 < 0 or h1 > 0); [h0, h1 = 0] : h0 > 0 }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 1, h1 = -1] }

#tile relatiions distance vector set: { [h0 = 1, h1 = -2] }

#tile relatiions distance vector set: { [h0 = 0, h1 = -1] }

#tile relatiions distance vector set: { [h0 = 0, h1 = -2] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 2] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 1] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 2] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 1] }

#tile relatiions distance vector set: { [h0 = 2, h1 = 0] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1, a2] : exists b1, b2 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and b0 > 0 and b0 = b1 + b2 and 1*a1 + 2*a2 > 0 and 0*a1 + 2*a2 > 0 and 1*a1 + 1*a2 > 0 and 0*a1 + 1*a2 > 0 and 2*a1 + 0*a2 > 0 and 1*a1 + -1*a2 > 0 and 0*a1 + -1*a2 > 0 and 1*a1 + -2*a2 > 0 and 0*a1 + -2*a2 > 0 and 1*a1 + 0*a2 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1, a2] : exists c1, c2 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and c0 = c1 + c2 and a1 != 0 and a2 != 0} * {[d0, b0, c0, a1, a2] : exists b1, b2 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and b0 > 0 and b0 = b1 + b2 and 1*a1 + 2*a2 > 0 and 0*a1 + 2*a2 > 0 and 1*a1 + 1*a2 > 0 and 0*a1 + 1*a2 > 0 and 2*a1 + 0*a2 > 0 and 1*a1 + -1*a2 > 0 and 0*a1 + -1*a2 > 0 and 1*a1 + -2*a2 > 0 and 0*a1 + -2*a2 > 0 and 1*a1 + 0*a2 > 0 } )

#result: { [d0, b0, c0, a1, a2] : false }

#wafefront hyperplane: { [a1, a2] : false }

#calculate wafefront hyperplane stop

#######################################################################

#continue search for hyperplanes

#######################################################################

#dim info analyze start

#dim info analyze stop

#delta analyze start

#delta:
{  }

#dim [i0]: is wavefront order

#dim [i1]: is wavefront order

#dim [i2]: is bounded

#dim [i3]: is bounded

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 = 0  and a2 = 0  and ( 1 = 0  or a3 != 0  or a4 != 0  )  }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 = 0  and a2 = 0  and ( 1 = 0  or a3 != 0  or a4 != 0  )  }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 = 0  and a2 = 0  and ( 1 = 0  or a3 != 0  or a4 != 0  )  } )

#result: { [d0 = 0, b0 = 1, c0 = -4, a1 = 0, a2 = 0, a3 = 1, a4 = 0] }

#hyperplane: { [a1 = 0, a2 = 0, a3 = 1, a4 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 = 0  and a2 = 0  and ( 1 = 0  or a3 != 0  or a4 != 0  )  } )

#result: { [d0 = 0, b0 = 1, c0 = -4, a1 = 0, a2 = 0, a3 = 1, a4 = 0] }

#hyperplane: { [a1 = 0, a2 = 0, a3 = 1, a4 = 0] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*0 = c1*0 and c2*0 = c1*0 and c2*1 = c1*1 and c2*0 = c1*0 } = {}

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 = 0  and a2 = 0  and ( 1 = 0  or a3 != 0  or a4 != 0  )  } )

#result: { [d0 = 0, b0 = 1, c0 = -4, a1 = 0, a2 = 0, a3 = 0, a4 = 1] }

#hyperplane: { [a1 = 0, a2 = 0, a3 = 0, a4 = 1] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*0 = c1*0 and c2*0 = c1*0 and c2*0 = c1*1 and c2*1 = c1*0 } = {}

#result: true

#create hyperplanes stop

#create spaces start

#part: [_PB_TMAX, _PB_NX, _PB_NY] -> { [i0, i1, i2, i3] -> [  ii0 = i0, ii1 = i1, h0, h1, ii2 = i2, ii3 = i3] : exists bh0 : 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#part: [_PB_TMAX, _PB_NX, _PB_NY] -> { [i0, i1, i2, i3] -> [  ii0 = i0, ii1 = i1, h0, h1, ii2 = i2, ii3 = i3] : exists bh1 : 0 * i0 + 0 * i1 + 0 * i2 + 1 * i3 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1 } 

#spaces mapper: [_PB_TMAX, _PB_NX, _PB_NY] -> { [i0, i1, i2, i3] -> [ii0 = i0, ii1 = i1, h0, h1, ii2 = i2, ii3 = i3] : -15 + i2 <= 16h0 <= i2 and -15 + i3 <= 16h1 <= i3 }

#create spaces stop

#create tile scop start

#tile scop mapper: [_PB_TMAX, _PB_NX, _PB_NY] -> { S_1[i0, i1, i2, i3] -> S_1[ii0 = i0, ii1 = i1, h0, h1, ii2 = i2, ii3 = i3] : -15 + i2 <= 16h0 <= i2 and -15 + i3 <= 16h1 <= i3; S_2[i0, i1, i2, i3] -> S_2[ii0 = i0, ii1 = i1, h0, h1, ii2 = i2, ii3 = i3] : -15 + i2 <= 16h0 <= i2 and -15 + i3 <= 16h1 <= i3; S_0[i0, i1, i2, i3] -> S_0[ii0 = i0, ii1 = i1, h0, h1, ii2 = i2, ii3 = i3] : -15 + i2 <= 16h0 <= i2 and -15 + i3 <= 16h1 <= i3; S_3[i0, i1, i2, i3] -> S_3[ii0 = i0, ii1 = i1, h0, h1, ii2 = i2, ii3 = i3] : -15 + i2 <= 16h0 <= i2 and -15 + i3 <= 16h1 <= i3 }

#tile scop delta: { [ii0, ii1, h0, h1, ii2, ii3] : ii0 >= 0 and ii2 >= -15 + 16h0 and -ii1 < ii2 <= 0 and ii2 <= 15 + 16h0 and ii3 >= -2 + ii1 and -15 + 16h1 <= ii3 <= 0 and ii3 <= 15 + 16h1; [ii0, ii1, h0 = 0, h1, ii2 = 0, ii3] : ii0 > 0 and ii1 >= -1 and ii3 >= -15 + 16h1 and 0 <= ii3 <= -ii1 and ii3 <= 15 + 16h1; [ii0, ii1 = 3, h0, h1, ii2, ii3 = -ii2] : ii0 >= 0 and ii2 >= -15 + 16h0 and -15 - 16h1 <= ii2 <= -16h1 and ii2 <= 0 and ii2 <= 16h0; [ii0, ii1 = -3, h0, h1, ii2, ii3 = -ii2] : ii0 > 0 and ii2 >= 16h0 and ii2 >= 0 and -16h1 <= ii2 <= 15 - 16h1 and ii2 <= 15 + 16h0; [ii0, ii1 = -2, h0, h1 = 0, ii2, ii3 = 0] : ii0 > 0 and ii2 >= -15 + 16h0 and 0 <= ii2 <= 1 and ii2 <= 15 + 16h0 }

#tile scop delta part: { [ii0, ii1, h0, h1, ii2, ii3] : false }

#tile scop delta part: { [ii0, ii1, h0, h1, ii2, ii3] : false }

#tile scop delta part: { [ii0, ii1, h0, h1, ii2, ii3] : false }

#tile scop delta part: { [ii0, ii1, h0, h1, ii2, ii3] : false }

#tile scop delta part: { [ii0, ii1, h0, h1, ii2, ii3] : false }

#tile delta: {  }

#create tile scop stop

#tile delta analyze start

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1, a2] : exists b1, b2 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and b0 > 0 and b0 = b1 + b2 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1, a2] : exists c1, c2 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and c0 = c1 + c2 and a1 != 0 and a2 != 0} * {[d0, b0, c0, a1, a2] : exists b1, b2 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and b0 > 0 and b0 = b1 + b2 } )

#result: { [d0 = 0, b0 = 2, c0 = -2, a1 = 1, a2 = 1] }

#wafefront hyperplane: { [a1 = 1, a2 = 1] }

#calculate wafefront hyperplane stop

#create parallel free schedule start

#part: [_PB_TMAX, _PB_NX, _PB_NY] -> { S_1[i0, i1, i2, i3] -> [0, i0, i1, w0, h0, h1, 0, 0, tw0, i2, i3] : exists  bw0, bh0, bh1 : 1 = 1 and 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 0 * i0 + 0 * i1 + 0 * i2 + 1 * i3 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 and tw0 = 0 and w0 = 0 } 

#part: [_PB_TMAX, _PB_NX, _PB_NY] -> { S_0[i0, i1, i2, i3] -> [0, i0, i1, w0, h0, h1, 0, 0, tw0, i2, i3] : exists  bw0, bh0, bh1 : 1 = 1 and 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 0 * i0 + 0 * i1 + 0 * i2 + 1 * i3 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 and tw0 = 0 and w0 = 0 } 

#part: [_PB_TMAX, _PB_NX, _PB_NY] -> { S_2[i0, i1, i2, i3] -> [0, i0, i1, w0, h0, h1, 0, 0, tw0, i2, i3] : exists  bw0, bh0, bh1 : 1 = 1 and 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 0 * i0 + 0 * i1 + 0 * i2 + 1 * i3 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 and tw0 = 0 and w0 = 0 } 

#part: [_PB_TMAX, _PB_NX, _PB_NY] -> { S_3[i0, i1, i2, i3] -> [0, i0, i1, w0, h0, h1, 0, 0, tw0, i2, i3] : exists  bw0, bh0, bh1 : 1 = 1 and 0 * i0 + 0 * i1 + 1 * i2 + 0 * i3 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 0 * i0 + 0 * i1 + 0 * i2 + 1 * i3 - bh1 = 0 and 16 * h1 <= bh1 <= 16 * (h1 + 1) - 1  and bw0 = 1 * bh0 + 1 * bh1 and tw0 = 0 and w0 = 0 } 

#parallel free schedule: [_PB_TMAX, _PB_NX, _PB_NY] -> { S_0[i0, i1, i2, i3] -> [0, i0, i1, w0 = 0, h0, h1, 0, 0, tw0 = 0, i2, i3] : -15 + i2 <= 16h0 <= i2 and -15 + i3 <= 16h1 <= i3; S_3[i0, i1, i2, i3] -> [0, i0, i1, w0 = 0, h0, h1, 0, 0, tw0 = 0, i2, i3] : -15 + i2 <= 16h0 <= i2 and -15 + i3 <= 16h1 <= i3; S_2[i0, i1, i2, i3] -> [0, i0, i1, w0 = 0, h0, h1, 0, 0, tw0 = 0, i2, i3] : -15 + i2 <= 16h0 <= i2 and -15 + i3 <= 16h1 <= i3; S_1[i0, i1, i2, i3] -> [0, i0, i1, w0 = 0, h0, h1, 0, 0, tw0 = 0, i2, i3] : -15 + i2 <= 16h0 <= i2 and -15 + i3 <= 16h1 <= i3 }

#create parallel free schedule stop

#create code start

#wafefront code: [_PB_TMAX, _PB_NX, _PB_NY] -> { S_0[t, j] -> [0, t, 0, w0 = 0, h0, h1 = 0, 0, 0, tw0 = 0, j, 0] : 0 <= t < _PB_TMAX and 0 <= j < _PB_NY and -15 + j <= 16h0 <= j; S_3[t, i, j] -> [0, t, 3, w0 = 0, h0, h1, 0, 0, tw0 = 0, i, j] : 0 <= t < _PB_TMAX and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j; S_2[t, i, j] -> [0, t, 2, w0 = 0, h0, h1, 0, 0, tw0 = 0, i, j] : 0 <= t < _PB_TMAX and 0 <= i < _PB_NX and 0 < j < _PB_NY and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j; S_1[t, i, j] -> [0, t, 1, w0 = 0, h0, h1, 0, 0, tw0 = 0, i, j] : 0 <= t < _PB_TMAX and 0 < i < _PB_NX and 0 <= j < _PB_NY and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#global schedule:
[_PB_TMAX, _PB_NX, _PB_NY] -> { S_2[t, i, j] -> [0, t, 2, w0 = 0, h0, h1, 0, 0, tw0 = 0, i, j] : 0 <= t < _PB_TMAX and 0 <= i < _PB_NX and 0 < j < _PB_NY and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j; S_3[t, i, j] -> [0, t, 3, w0 = 0, h0, h1, 0, 0, tw0 = 0, i, j] : 0 <= t < _PB_TMAX and 0 <= i <= -2 + _PB_NX and 0 <= j <= -2 + _PB_NY and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j; S_1[t, i, j] -> [0, t, 1, w0 = 0, h0, h1, 0, 0, tw0 = 0, i, j] : 0 <= t < _PB_TMAX and 0 < i < _PB_NX and 0 <= j < _PB_NY and -15 + i <= 16h0 <= i and -15 + j <= 16h1 <= j; S_0[t, j] -> [0, t, 0, w0 = 0, h0, h1 = 0, 0, 0, tw0 = 0, j, 0] : 0 <= t < _PB_TMAX and 0 <= j < _PB_NY and -15 + j <= 16h0 <= j }

#######################################################################

#######################################################################

#Does global schedule respects oryginal loop RaW deps? -> True

#Does global schedule respects oryginal loop WaW deps? -> True

#Does global schedule respects oryginal loop WaR deps? -> True

#######################################################################
