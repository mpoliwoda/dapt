
//dapt code:
#define min(x,y)    ((x) < (y) ? (x) : (y))
#define max(x,y)    ((x) > (y) ? (x) : (y))
#define floord(n,d) (((n)<0) ? -((-(n)+(d)-1)/(d)) : (n)/(d))

for (int w0 = 0; w0 <= floord(3 * _PB_TSTEPS + _PB_N - 4, 16); w0 += 1) {
  #pragma omp parallel for
  for (int h0 = max(max(0, w0 + floord(-2 * _PB_TSTEPS - _PB_N + 2, 16) + 1), floord(-_PB_N + 16 * w0 + 18, 48)); h0 <= min(floord(_PB_TSTEPS - 1, 16), w0 / 3); h0 += 1) {
    for (int i0 = max(16 * h0, -_PB_N + 8 * w0 - 8 * h0 + floord(_PB_N, 2) + 1); i0 <= min(min(_PB_TSTEPS - 1, 8 * w0 - 8 * h0 + 7), 16 * h0 + 15); i0 += 1) {
      for (int i2 = max(1, 16 * w0 - 16 * h0 - 2 * i0); i2 <= min(_PB_N - 2, 16 * w0 - 16 * h0 - 2 * i0 + 15); i2 += 1) {
        B[i2] = (0.33333 * ((A[i2 - 1] + A[i2]) + A[i2 + 1]));
      }
      for (int i2 = max(1, 16 * w0 - 16 * h0 - 2 * i0 - 1); i2 <= min(_PB_N - 2, 16 * w0 - 16 * h0 - 2 * i0 + 14); i2 += 1) {
        A[i2] = (0.33333 * ((B[i2 - 1] + B[i2]) + B[i2 + 1]));
      }
    }
  }
}
