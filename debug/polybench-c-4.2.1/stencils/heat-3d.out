
//dapt code:
#define min(x,y)    ((x) < (y) ? (x) : (y))
#define max(x,y)    ((x) > (y) ? (x) : (y))
#define floord(n,d) (((n)<0) ? -((-(n)+(d)-1)/(d)) : (n)/(d))

if (TSTEPS >= 1 && _PB_N >= 3) {
  for (int w0 = 0; w0 <= (7 * TSTEPS + 3 * _PB_N - 3) / 16; w0 += 1) {
    #pragma omp parallel for
    for (int h0 = max(max(0, w0 - (6 * TSTEPS + 3 * _PB_N + 13) / 16 + 1), floord(-3 * _PB_N + 16 * w0 + 24, 112)); h0 <= min(TSTEPS / 16, w0 / 7); h0 += 1) {
      for (int h1 = max(max(max(2 * h0, w0 - h0 - (2 * TSTEPS + _PB_N + 7) / 8 + 1), w0 - 5 * h0 - (_PB_N + 5) / 8 - 3), floord(-_PB_N + 8 * w0 - 8 * h0 + 11, 24)); h1 <= min(min(min(w0 - 5 * h0, 2 * h0 + (_PB_N - 3) / 16 + 2), (2 * TSTEPS + _PB_N - 1) / 16), (_PB_N + 8 * w0 - 8 * h0 + 12) / 24); h1 += 1) {
        for (int h2 = max(max(max(max(max(2 * h0, w0 - h0 - h1 - (2 * TSTEPS + _PB_N + 15) / 16 + 1), w0 - 3 * h0 - h1 - (_PB_N + 13) / 16 - 1), h1 - (_PB_N + 12) / 16), w0 - h0 - 2 * h1 - (_PB_N + 12) / 16), -h0 - h1 + floord(-_PB_N + 16 * w0 + 16 * h0 + 16 * h1 - 13, 32) + 1); h2 <= min(min(min(min(min(w0 - 3 * h0 - h1, h1 + (_PB_N + 12) / 16), w0 - h0 - 2 * h1 + (_PB_N + 12) / 16), 2 * h0 + (_PB_N - 3) / 16 + 2), (2 * TSTEPS + _PB_N - 1) / 16), -h0 - h1 + (_PB_N + 16 * w0 + 16 * h0 + 16 * h1 + 12) / 32); h2 += 1) {
          if (h2 >= h1 + 1 && h0 + h1 + 2 * h2 >= w0 + 1 && 16 * h2 >= _PB_N + 1 && 16 * h2 + 1 >= _PB_N + 32 * h0 && (_PB_N + 1) % 2 == 0) {
            for (int i2 = max(1, _PB_N + 16 * h1 - 16 * h2 - 2); i2 <= _PB_N + 16 * h1 - 16 * h2 + 13; i2 += 1) {
              for (int i4 = max(1, _PB_N + 16 * w0 - 16 * h0 - 16 * h1 - 32 * h2 - 2); i4 <= _PB_N + 16 * w0 - 16 * h0 - 16 * h1 - 32 * h2 + 13; i4 += 1) {
                A[i2][_PB_N - 2][i4] = ((((SCALAR_VAL(0.125) * ((B[i2 + 1][_PB_N - 2][i4] - (SCALAR_VAL(2.0) * B[i2][_PB_N - 2][i4])) + B[i2 - 1][_PB_N - 2][i4])) + (SCALAR_VAL(0.125) * ((B[i2][_PB_N - 1][i4] - (SCALAR_VAL(2.0) * B[i2][_PB_N - 2][i4])) + B[i2][_PB_N - 3][i4]))) + (SCALAR_VAL(0.125) * ((B[i2][_PB_N - 2][i4 + 1] - (SCALAR_VAL(2.0) * B[i2][_PB_N - 2][i4])) + B[i2][_PB_N - 2][i4 - 1]))) + B[i2][_PB_N - 2][i4]);
              }
            }
          }
          if (16 * h1 >= _PB_N + 1 && 16 * h1 + 1 >= _PB_N + 32 * h0 && h0 + 2 * h1 + h2 >= w0 + 1 && (_PB_N + 1) % 2 == 0) {
            for (int i3 = max(1, _PB_N - 16 * h1 + 16 * h2 - 2); i3 <= min(_PB_N - 2, _PB_N - 16 * h1 + 16 * h2 + 13); i3 += 1) {
              for (int i4 = max(1, _PB_N + 16 * w0 - 16 * h0 - 32 * h1 - 16 * h2 - 2); i4 <= _PB_N + 16 * w0 - 16 * h0 - 32 * h1 - 16 * h2 + 13; i4 += 1) {
                A[_PB_N - 2][i3][i4] = ((((SCALAR_VAL(0.125) * ((B[_PB_N - 1][i3][i4] - (SCALAR_VAL(2.0) * B[_PB_N - 2][i3][i4])) + B[_PB_N - 3][i3][i4])) + (SCALAR_VAL(0.125) * ((B[_PB_N - 2][i3 + 1][i4] - (SCALAR_VAL(2.0) * B[_PB_N - 2][i3][i4])) + B[_PB_N - 2][i3 - 1][i4]))) + (SCALAR_VAL(0.125) * ((B[_PB_N - 2][i3][i4 + 1] - (SCALAR_VAL(2.0) * B[_PB_N - 2][i3][i4])) + B[_PB_N - 2][i3][i4 - 1]))) + B[_PB_N - 2][i3][i4]);
              }
            }
          }
          if (16 * w0 >= _PB_N + 16 * h0 + 16 * h1 + 16 * h2 + 1 && 16 * w0 + 1 >= _PB_N + 48 * h0 + 16 * h1 + 16 * h2 && (_PB_N + 1) % 2 == 0) {
            for (int i2 = max(1, _PB_N - 16 * w0 + 16 * h0 + 32 * h1 + 16 * h2 - 2); i2 <= min(_PB_N - 2, _PB_N - 16 * w0 + 16 * h0 + 32 * h1 + 16 * h2 + 13); i2 += 1) {
              for (int i3 = max(1, _PB_N - 16 * w0 + 16 * h0 + 16 * h1 + 32 * h2 - 2); i3 <= min(_PB_N - 2, _PB_N - 16 * w0 + 16 * h0 + 16 * h1 + 32 * h2 + 13); i3 += 1) {
                A[i2][i3][_PB_N - 2] = ((((SCALAR_VAL(0.125) * ((B[i2 + 1][i3][_PB_N - 2] - (SCALAR_VAL(2.0) * B[i2][i3][_PB_N - 2])) + B[i2 - 1][i3][_PB_N - 2])) + (SCALAR_VAL(0.125) * ((B[i2][i3 + 1][_PB_N - 2] - (SCALAR_VAL(2.0) * B[i2][i3][_PB_N - 2])) + B[i2][i3 - 1][_PB_N - 2]))) + (SCALAR_VAL(0.125) * ((B[i2][i3][_PB_N - 1] - (SCALAR_VAL(2.0) * B[i2][i3][_PB_N - 2])) + B[i2][i3][_PB_N - 3]))) + B[i2][i3][_PB_N - 2]);
              }
            }
          }
          for (int i0 = max(max(max(max(1, 16 * h0), -_PB_N + 8 * h2 + floord(_PB_N + 1, 2) + 1), -_PB_N + 8 * h1 + floord(_PB_N + 1, 2) + 1), -_PB_N + 8 * w0 - 8 * h0 - 8 * h1 - 8 * h2 + floord(_PB_N + 1, 2) + 1); i0 <= min(min(min(min(TSTEPS, 16 * h0 + 15), 8 * h1 + 7), 8 * h2 + 7), 8 * w0 - 8 * h0 - 8 * h1 - 8 * h2 + 7); i0 += 1) {
            for (int i2 = max(1, 16 * h1 - 2 * i0); i2 <= min(_PB_N - 2, 16 * h1 - 2 * i0 + 15); i2 += 1) {
              for (int i3 = max(1, 16 * h2 - 2 * i0); i3 <= min(_PB_N - 2, 16 * h2 - 2 * i0 + 15); i3 += 1) {
                for (int i4 = max(1, 16 * w0 - 16 * h0 - 16 * h1 - 16 * h2 - 2 * i0); i4 <= min(_PB_N - 2, 16 * w0 - 16 * h0 - 16 * h1 - 16 * h2 - 2 * i0 + 15); i4 += 1) {
                  B[i2][i3][i4] = ((((SCALAR_VAL(0.125) * ((A[i2 + 1][i3][i4] - (SCALAR_VAL(2.0) * A[i2][i3][i4])) + A[i2 - 1][i3][i4])) + (SCALAR_VAL(0.125) * ((A[i2][i3 + 1][i4] - (SCALAR_VAL(2.0) * A[i2][i3][i4])) + A[i2][i3 - 1][i4]))) + (SCALAR_VAL(0.125) * ((A[i2][i3][i4 + 1] - (SCALAR_VAL(2.0) * A[i2][i3][i4])) + A[i2][i3][i4 - 1]))) + A[i2][i3][i4]);
                }
              }
            }
            for (int i2 = max(1, 16 * h1 - 2 * i0 - 1); i2 <= min(_PB_N - 2, 16 * h1 - 2 * i0 + 14); i2 += 1) {
              for (int i3 = max(1, 16 * h2 - 2 * i0 - 1); i3 <= min(_PB_N - 2, 16 * h2 - 2 * i0 + 14); i3 += 1) {
                for (int i4 = max(1, 16 * w0 - 16 * h0 - 16 * h1 - 16 * h2 - 2 * i0 - 1); i4 <= min(_PB_N - 2, 16 * w0 - 16 * h0 - 16 * h1 - 16 * h2 - 2 * i0 + 14); i4 += 1) {
                  A[i2][i3][i4] = ((((SCALAR_VAL(0.125) * ((B[i2 + 1][i3][i4] - (SCALAR_VAL(2.0) * B[i2][i3][i4])) + B[i2 - 1][i3][i4])) + (SCALAR_VAL(0.125) * ((B[i2][i3 + 1][i4] - (SCALAR_VAL(2.0) * B[i2][i3][i4])) + B[i2][i3 - 1][i4]))) + (SCALAR_VAL(0.125) * ((B[i2][i3][i4 + 1] - (SCALAR_VAL(2.0) * B[i2][i3][i4])) + B[i2][i3][i4 - 1]))) + B[i2][i3][i4]);
                }
              }
            }
          }
        }
      }
    }
  }
}
